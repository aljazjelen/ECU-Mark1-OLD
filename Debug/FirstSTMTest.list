
FirstSTMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080055b8  080055b8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b8  080055b8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080055c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000002c  080055ec  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080055ec  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000885f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001690  00000000  00000000  000288b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013580  00000000  00000000  0002af80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa9  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077cd4  00000000  00000000  000454a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002134  00000000  00000000  000bd1f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800547c 	.word	0x0800547c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	0800547c 	.word	0x0800547c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f9b9 	bl	800177c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 f911 	bl	800163c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f9ab 	bl	800177c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f9a1 	bl	800177c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f933 	bl	80016b4 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f929 	bl	80016b4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f9d3 	bl	8000824 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f955 	bl	8000738 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f9c5 	bl	8000824 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f9bb 	bl	8000824 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f963 	bl	8000788 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f959 	bl	8000788 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	; 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fcdb 	bl	8000eb0 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	; 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fb11 	bl	8000b28 <__aeabi_fsub>
 8000506:	f000 fcd3 	bl	8000eb0 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__aeabi_fdiv>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	4657      	mov	r7, sl
 8000518:	464e      	mov	r6, r9
 800051a:	4645      	mov	r5, r8
 800051c:	46de      	mov	lr, fp
 800051e:	0244      	lsls	r4, r0, #9
 8000520:	b5e0      	push	{r5, r6, r7, lr}
 8000522:	0046      	lsls	r6, r0, #1
 8000524:	4688      	mov	r8, r1
 8000526:	0a64      	lsrs	r4, r4, #9
 8000528:	0e36      	lsrs	r6, r6, #24
 800052a:	0fc7      	lsrs	r7, r0, #31
 800052c:	2e00      	cmp	r6, #0
 800052e:	d063      	beq.n	80005f8 <__aeabi_fdiv+0xe4>
 8000530:	2eff      	cmp	r6, #255	; 0xff
 8000532:	d024      	beq.n	800057e <__aeabi_fdiv+0x6a>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	00e4      	lsls	r4, r4, #3
 8000538:	04db      	lsls	r3, r3, #19
 800053a:	431c      	orrs	r4, r3
 800053c:	2300      	movs	r3, #0
 800053e:	4699      	mov	r9, r3
 8000540:	469b      	mov	fp, r3
 8000542:	3e7f      	subs	r6, #127	; 0x7f
 8000544:	4643      	mov	r3, r8
 8000546:	4642      	mov	r2, r8
 8000548:	025d      	lsls	r5, r3, #9
 800054a:	0fd2      	lsrs	r2, r2, #31
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	0a6d      	lsrs	r5, r5, #9
 8000550:	0e1b      	lsrs	r3, r3, #24
 8000552:	4690      	mov	r8, r2
 8000554:	4692      	mov	sl, r2
 8000556:	d065      	beq.n	8000624 <__aeabi_fdiv+0x110>
 8000558:	2bff      	cmp	r3, #255	; 0xff
 800055a:	d055      	beq.n	8000608 <__aeabi_fdiv+0xf4>
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	2100      	movs	r1, #0
 8000560:	00ed      	lsls	r5, r5, #3
 8000562:	04d2      	lsls	r2, r2, #19
 8000564:	3b7f      	subs	r3, #127	; 0x7f
 8000566:	4315      	orrs	r5, r2
 8000568:	1af6      	subs	r6, r6, r3
 800056a:	4643      	mov	r3, r8
 800056c:	464a      	mov	r2, r9
 800056e:	407b      	eors	r3, r7
 8000570:	2a0f      	cmp	r2, #15
 8000572:	d900      	bls.n	8000576 <__aeabi_fdiv+0x62>
 8000574:	e08d      	b.n	8000692 <__aeabi_fdiv+0x17e>
 8000576:	486d      	ldr	r0, [pc, #436]	; (800072c <__aeabi_fdiv+0x218>)
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	5882      	ldr	r2, [r0, r2]
 800057c:	4697      	mov	pc, r2
 800057e:	2c00      	cmp	r4, #0
 8000580:	d154      	bne.n	800062c <__aeabi_fdiv+0x118>
 8000582:	2308      	movs	r3, #8
 8000584:	4699      	mov	r9, r3
 8000586:	3b06      	subs	r3, #6
 8000588:	26ff      	movs	r6, #255	; 0xff
 800058a:	469b      	mov	fp, r3
 800058c:	e7da      	b.n	8000544 <__aeabi_fdiv+0x30>
 800058e:	2500      	movs	r5, #0
 8000590:	4653      	mov	r3, sl
 8000592:	2902      	cmp	r1, #2
 8000594:	d01b      	beq.n	80005ce <__aeabi_fdiv+0xba>
 8000596:	2903      	cmp	r1, #3
 8000598:	d100      	bne.n	800059c <__aeabi_fdiv+0x88>
 800059a:	e0bf      	b.n	800071c <__aeabi_fdiv+0x208>
 800059c:	2901      	cmp	r1, #1
 800059e:	d028      	beq.n	80005f2 <__aeabi_fdiv+0xde>
 80005a0:	0030      	movs	r0, r6
 80005a2:	307f      	adds	r0, #127	; 0x7f
 80005a4:	2800      	cmp	r0, #0
 80005a6:	dd20      	ble.n	80005ea <__aeabi_fdiv+0xd6>
 80005a8:	076a      	lsls	r2, r5, #29
 80005aa:	d004      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005ac:	220f      	movs	r2, #15
 80005ae:	402a      	ands	r2, r5
 80005b0:	2a04      	cmp	r2, #4
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005b4:	3504      	adds	r5, #4
 80005b6:	012a      	lsls	r2, r5, #4
 80005b8:	d503      	bpl.n	80005c2 <__aeabi_fdiv+0xae>
 80005ba:	0030      	movs	r0, r6
 80005bc:	4a5c      	ldr	r2, [pc, #368]	; (8000730 <__aeabi_fdiv+0x21c>)
 80005be:	3080      	adds	r0, #128	; 0x80
 80005c0:	4015      	ands	r5, r2
 80005c2:	28fe      	cmp	r0, #254	; 0xfe
 80005c4:	dc03      	bgt.n	80005ce <__aeabi_fdiv+0xba>
 80005c6:	01ac      	lsls	r4, r5, #6
 80005c8:	0a64      	lsrs	r4, r4, #9
 80005ca:	b2c2      	uxtb	r2, r0
 80005cc:	e001      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 80005ce:	22ff      	movs	r2, #255	; 0xff
 80005d0:	2400      	movs	r4, #0
 80005d2:	0264      	lsls	r4, r4, #9
 80005d4:	05d2      	lsls	r2, r2, #23
 80005d6:	0a60      	lsrs	r0, r4, #9
 80005d8:	07db      	lsls	r3, r3, #31
 80005da:	4310      	orrs	r0, r2
 80005dc:	4318      	orrs	r0, r3
 80005de:	bc3c      	pop	{r2, r3, r4, r5}
 80005e0:	4690      	mov	r8, r2
 80005e2:	4699      	mov	r9, r3
 80005e4:	46a2      	mov	sl, r4
 80005e6:	46ab      	mov	fp, r5
 80005e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ea:	2201      	movs	r2, #1
 80005ec:	1a10      	subs	r0, r2, r0
 80005ee:	281b      	cmp	r0, #27
 80005f0:	dd7c      	ble.n	80006ec <__aeabi_fdiv+0x1d8>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	e7ec      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d11d      	bne.n	8000638 <__aeabi_fdiv+0x124>
 80005fc:	2304      	movs	r3, #4
 80005fe:	4699      	mov	r9, r3
 8000600:	3b03      	subs	r3, #3
 8000602:	2600      	movs	r6, #0
 8000604:	469b      	mov	fp, r3
 8000606:	e79d      	b.n	8000544 <__aeabi_fdiv+0x30>
 8000608:	3eff      	subs	r6, #255	; 0xff
 800060a:	2d00      	cmp	r5, #0
 800060c:	d120      	bne.n	8000650 <__aeabi_fdiv+0x13c>
 800060e:	2102      	movs	r1, #2
 8000610:	4643      	mov	r3, r8
 8000612:	464a      	mov	r2, r9
 8000614:	407b      	eors	r3, r7
 8000616:	430a      	orrs	r2, r1
 8000618:	2a0f      	cmp	r2, #15
 800061a:	d8d8      	bhi.n	80005ce <__aeabi_fdiv+0xba>
 800061c:	4845      	ldr	r0, [pc, #276]	; (8000734 <__aeabi_fdiv+0x220>)
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	5882      	ldr	r2, [r0, r2]
 8000622:	4697      	mov	pc, r2
 8000624:	2d00      	cmp	r5, #0
 8000626:	d119      	bne.n	800065c <__aeabi_fdiv+0x148>
 8000628:	2101      	movs	r1, #1
 800062a:	e7f1      	b.n	8000610 <__aeabi_fdiv+0xfc>
 800062c:	230c      	movs	r3, #12
 800062e:	4699      	mov	r9, r3
 8000630:	3b09      	subs	r3, #9
 8000632:	26ff      	movs	r6, #255	; 0xff
 8000634:	469b      	mov	fp, r3
 8000636:	e785      	b.n	8000544 <__aeabi_fdiv+0x30>
 8000638:	0020      	movs	r0, r4
 800063a:	f001 fcf1 	bl	8002020 <__clzsi2>
 800063e:	2676      	movs	r6, #118	; 0x76
 8000640:	1f43      	subs	r3, r0, #5
 8000642:	409c      	lsls	r4, r3
 8000644:	2300      	movs	r3, #0
 8000646:	4276      	negs	r6, r6
 8000648:	1a36      	subs	r6, r6, r0
 800064a:	4699      	mov	r9, r3
 800064c:	469b      	mov	fp, r3
 800064e:	e779      	b.n	8000544 <__aeabi_fdiv+0x30>
 8000650:	464a      	mov	r2, r9
 8000652:	2303      	movs	r3, #3
 8000654:	431a      	orrs	r2, r3
 8000656:	4691      	mov	r9, r2
 8000658:	2103      	movs	r1, #3
 800065a:	e786      	b.n	800056a <__aeabi_fdiv+0x56>
 800065c:	0028      	movs	r0, r5
 800065e:	f001 fcdf 	bl	8002020 <__clzsi2>
 8000662:	1f43      	subs	r3, r0, #5
 8000664:	1836      	adds	r6, r6, r0
 8000666:	409d      	lsls	r5, r3
 8000668:	3676      	adds	r6, #118	; 0x76
 800066a:	2100      	movs	r1, #0
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0x56>
 800066e:	2480      	movs	r4, #128	; 0x80
 8000670:	2300      	movs	r3, #0
 8000672:	03e4      	lsls	r4, r4, #15
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e7ac      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 8000678:	2500      	movs	r5, #0
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	03db      	lsls	r3, r3, #15
 800067e:	421c      	tst	r4, r3
 8000680:	d028      	beq.n	80006d4 <__aeabi_fdiv+0x1c0>
 8000682:	421d      	tst	r5, r3
 8000684:	d126      	bne.n	80006d4 <__aeabi_fdiv+0x1c0>
 8000686:	432b      	orrs	r3, r5
 8000688:	025c      	lsls	r4, r3, #9
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	4643      	mov	r3, r8
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	e79f      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 8000692:	0162      	lsls	r2, r4, #5
 8000694:	016c      	lsls	r4, r5, #5
 8000696:	42a2      	cmp	r2, r4
 8000698:	d224      	bcs.n	80006e4 <__aeabi_fdiv+0x1d0>
 800069a:	211b      	movs	r1, #27
 800069c:	2500      	movs	r5, #0
 800069e:	3e01      	subs	r6, #1
 80006a0:	2701      	movs	r7, #1
 80006a2:	0010      	movs	r0, r2
 80006a4:	006d      	lsls	r5, r5, #1
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	2800      	cmp	r0, #0
 80006aa:	db01      	blt.n	80006b0 <__aeabi_fdiv+0x19c>
 80006ac:	4294      	cmp	r4, r2
 80006ae:	d801      	bhi.n	80006b4 <__aeabi_fdiv+0x1a0>
 80006b0:	1b12      	subs	r2, r2, r4
 80006b2:	433d      	orrs	r5, r7
 80006b4:	3901      	subs	r1, #1
 80006b6:	2900      	cmp	r1, #0
 80006b8:	d1f3      	bne.n	80006a2 <__aeabi_fdiv+0x18e>
 80006ba:	0014      	movs	r4, r2
 80006bc:	1e62      	subs	r2, r4, #1
 80006be:	4194      	sbcs	r4, r2
 80006c0:	4325      	orrs	r5, r4
 80006c2:	e76d      	b.n	80005a0 <__aeabi_fdiv+0x8c>
 80006c4:	46ba      	mov	sl, r7
 80006c6:	4659      	mov	r1, fp
 80006c8:	0025      	movs	r5, r4
 80006ca:	4653      	mov	r3, sl
 80006cc:	2902      	cmp	r1, #2
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fdiv+0x1be>
 80006d0:	e761      	b.n	8000596 <__aeabi_fdiv+0x82>
 80006d2:	e77c      	b.n	80005ce <__aeabi_fdiv+0xba>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	03db      	lsls	r3, r3, #15
 80006d8:	431c      	orrs	r4, r3
 80006da:	0264      	lsls	r4, r4, #9
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	003b      	movs	r3, r7
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	e776      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 80006e4:	1b12      	subs	r2, r2, r4
 80006e6:	211a      	movs	r1, #26
 80006e8:	2501      	movs	r5, #1
 80006ea:	e7d9      	b.n	80006a0 <__aeabi_fdiv+0x18c>
 80006ec:	369e      	adds	r6, #158	; 0x9e
 80006ee:	002a      	movs	r2, r5
 80006f0:	40b5      	lsls	r5, r6
 80006f2:	002c      	movs	r4, r5
 80006f4:	40c2      	lsrs	r2, r0
 80006f6:	1e65      	subs	r5, r4, #1
 80006f8:	41ac      	sbcs	r4, r5
 80006fa:	4314      	orrs	r4, r2
 80006fc:	0762      	lsls	r2, r4, #29
 80006fe:	d004      	beq.n	800070a <__aeabi_fdiv+0x1f6>
 8000700:	220f      	movs	r2, #15
 8000702:	4022      	ands	r2, r4
 8000704:	2a04      	cmp	r2, #4
 8000706:	d000      	beq.n	800070a <__aeabi_fdiv+0x1f6>
 8000708:	3404      	adds	r4, #4
 800070a:	0162      	lsls	r2, r4, #5
 800070c:	d403      	bmi.n	8000716 <__aeabi_fdiv+0x202>
 800070e:	01a4      	lsls	r4, r4, #6
 8000710:	0a64      	lsrs	r4, r4, #9
 8000712:	2200      	movs	r2, #0
 8000714:	e75d      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 8000716:	2201      	movs	r2, #1
 8000718:	2400      	movs	r4, #0
 800071a:	e75a      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 800071c:	2480      	movs	r4, #128	; 0x80
 800071e:	03e4      	lsls	r4, r4, #15
 8000720:	432c      	orrs	r4, r5
 8000722:	0264      	lsls	r4, r4, #9
 8000724:	0a64      	lsrs	r4, r4, #9
 8000726:	22ff      	movs	r2, #255	; 0xff
 8000728:	e753      	b.n	80005d2 <__aeabi_fdiv+0xbe>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	08005494 	.word	0x08005494
 8000730:	f7ffffff 	.word	0xf7ffffff
 8000734:	080054d4 	.word	0x080054d4

08000738 <__eqsf2>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	0042      	lsls	r2, r0, #1
 800073c:	024e      	lsls	r6, r1, #9
 800073e:	004c      	lsls	r4, r1, #1
 8000740:	0245      	lsls	r5, r0, #9
 8000742:	0a6d      	lsrs	r5, r5, #9
 8000744:	0e12      	lsrs	r2, r2, #24
 8000746:	0fc3      	lsrs	r3, r0, #31
 8000748:	0a76      	lsrs	r6, r6, #9
 800074a:	0e24      	lsrs	r4, r4, #24
 800074c:	0fc9      	lsrs	r1, r1, #31
 800074e:	2aff      	cmp	r2, #255	; 0xff
 8000750:	d00f      	beq.n	8000772 <__eqsf2+0x3a>
 8000752:	2cff      	cmp	r4, #255	; 0xff
 8000754:	d011      	beq.n	800077a <__eqsf2+0x42>
 8000756:	2001      	movs	r0, #1
 8000758:	42a2      	cmp	r2, r4
 800075a:	d000      	beq.n	800075e <__eqsf2+0x26>
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	42b5      	cmp	r5, r6
 8000760:	d1fc      	bne.n	800075c <__eqsf2+0x24>
 8000762:	428b      	cmp	r3, r1
 8000764:	d00d      	beq.n	8000782 <__eqsf2+0x4a>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d1f8      	bne.n	800075c <__eqsf2+0x24>
 800076a:	0028      	movs	r0, r5
 800076c:	1e45      	subs	r5, r0, #1
 800076e:	41a8      	sbcs	r0, r5
 8000770:	e7f4      	b.n	800075c <__eqsf2+0x24>
 8000772:	2001      	movs	r0, #1
 8000774:	2d00      	cmp	r5, #0
 8000776:	d1f1      	bne.n	800075c <__eqsf2+0x24>
 8000778:	e7eb      	b.n	8000752 <__eqsf2+0x1a>
 800077a:	2001      	movs	r0, #1
 800077c:	2e00      	cmp	r6, #0
 800077e:	d1ed      	bne.n	800075c <__eqsf2+0x24>
 8000780:	e7e9      	b.n	8000756 <__eqsf2+0x1e>
 8000782:	2000      	movs	r0, #0
 8000784:	e7ea      	b.n	800075c <__eqsf2+0x24>
 8000786:	46c0      	nop			; (mov r8, r8)

08000788 <__gesf2>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	004a      	lsls	r2, r1, #1
 800078c:	024e      	lsls	r6, r1, #9
 800078e:	0245      	lsls	r5, r0, #9
 8000790:	0044      	lsls	r4, r0, #1
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	0e24      	lsrs	r4, r4, #24
 8000796:	0fc3      	lsrs	r3, r0, #31
 8000798:	0a76      	lsrs	r6, r6, #9
 800079a:	0e12      	lsrs	r2, r2, #24
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	2cff      	cmp	r4, #255	; 0xff
 80007a0:	d015      	beq.n	80007ce <__gesf2+0x46>
 80007a2:	2aff      	cmp	r2, #255	; 0xff
 80007a4:	d00e      	beq.n	80007c4 <__gesf2+0x3c>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d115      	bne.n	80007d6 <__gesf2+0x4e>
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d101      	bne.n	80007b2 <__gesf2+0x2a>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d01c      	beq.n	80007ec <__gesf2+0x64>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d014      	beq.n	80007e0 <__gesf2+0x58>
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d027      	beq.n	800080a <__gesf2+0x82>
 80007ba:	2002      	movs	r0, #2
 80007bc:	3b01      	subs	r3, #1
 80007be:	4018      	ands	r0, r3
 80007c0:	3801      	subs	r0, #1
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d0ee      	beq.n	80007a6 <__gesf2+0x1e>
 80007c8:	2002      	movs	r0, #2
 80007ca:	4240      	negs	r0, r0
 80007cc:	e7f9      	b.n	80007c2 <__gesf2+0x3a>
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d1fa      	bne.n	80007c8 <__gesf2+0x40>
 80007d2:	2aff      	cmp	r2, #255	; 0xff
 80007d4:	d00e      	beq.n	80007f4 <__gesf2+0x6c>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d10e      	bne.n	80007f8 <__gesf2+0x70>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d0ed      	beq.n	80007ba <__gesf2+0x32>
 80007de:	e00b      	b.n	80007f8 <__gesf2+0x70>
 80007e0:	2301      	movs	r3, #1
 80007e2:	3901      	subs	r1, #1
 80007e4:	4399      	bics	r1, r3
 80007e6:	0008      	movs	r0, r1
 80007e8:	3001      	adds	r0, #1
 80007ea:	e7ea      	b.n	80007c2 <__gesf2+0x3a>
 80007ec:	2000      	movs	r0, #0
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d0e7      	beq.n	80007c2 <__gesf2+0x3a>
 80007f2:	e7e2      	b.n	80007ba <__gesf2+0x32>
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1e7      	bne.n	80007c8 <__gesf2+0x40>
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d1de      	bne.n	80007ba <__gesf2+0x32>
 80007fc:	4294      	cmp	r4, r2
 80007fe:	dd05      	ble.n	800080c <__gesf2+0x84>
 8000800:	2102      	movs	r1, #2
 8000802:	1e58      	subs	r0, r3, #1
 8000804:	4008      	ands	r0, r1
 8000806:	3801      	subs	r0, #1
 8000808:	e7db      	b.n	80007c2 <__gesf2+0x3a>
 800080a:	2400      	movs	r4, #0
 800080c:	42a2      	cmp	r2, r4
 800080e:	dc04      	bgt.n	800081a <__gesf2+0x92>
 8000810:	42b5      	cmp	r5, r6
 8000812:	d8d2      	bhi.n	80007ba <__gesf2+0x32>
 8000814:	2000      	movs	r0, #0
 8000816:	42b5      	cmp	r5, r6
 8000818:	d2d3      	bcs.n	80007c2 <__gesf2+0x3a>
 800081a:	1e58      	subs	r0, r3, #1
 800081c:	2301      	movs	r3, #1
 800081e:	4398      	bics	r0, r3
 8000820:	3001      	adds	r0, #1
 8000822:	e7ce      	b.n	80007c2 <__gesf2+0x3a>

08000824 <__lesf2>:
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	0042      	lsls	r2, r0, #1
 8000828:	0244      	lsls	r4, r0, #9
 800082a:	024d      	lsls	r5, r1, #9
 800082c:	0fc3      	lsrs	r3, r0, #31
 800082e:	0048      	lsls	r0, r1, #1
 8000830:	0a64      	lsrs	r4, r4, #9
 8000832:	0e12      	lsrs	r2, r2, #24
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	0e00      	lsrs	r0, r0, #24
 8000838:	0fc9      	lsrs	r1, r1, #31
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d012      	beq.n	8000864 <__lesf2+0x40>
 800083e:	28ff      	cmp	r0, #255	; 0xff
 8000840:	d00c      	beq.n	800085c <__lesf2+0x38>
 8000842:	2a00      	cmp	r2, #0
 8000844:	d112      	bne.n	800086c <__lesf2+0x48>
 8000846:	2800      	cmp	r0, #0
 8000848:	d119      	bne.n	800087e <__lesf2+0x5a>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d117      	bne.n	800087e <__lesf2+0x5a>
 800084e:	2c00      	cmp	r4, #0
 8000850:	d02b      	beq.n	80008aa <__lesf2+0x86>
 8000852:	2002      	movs	r0, #2
 8000854:	3b01      	subs	r3, #1
 8000856:	4018      	ands	r0, r3
 8000858:	3801      	subs	r0, #1
 800085a:	e026      	b.n	80008aa <__lesf2+0x86>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d0f0      	beq.n	8000842 <__lesf2+0x1e>
 8000860:	2002      	movs	r0, #2
 8000862:	e022      	b.n	80008aa <__lesf2+0x86>
 8000864:	2c00      	cmp	r4, #0
 8000866:	d1fb      	bne.n	8000860 <__lesf2+0x3c>
 8000868:	28ff      	cmp	r0, #255	; 0xff
 800086a:	d01f      	beq.n	80008ac <__lesf2+0x88>
 800086c:	2800      	cmp	r0, #0
 800086e:	d11f      	bne.n	80008b0 <__lesf2+0x8c>
 8000870:	2d00      	cmp	r5, #0
 8000872:	d11d      	bne.n	80008b0 <__lesf2+0x8c>
 8000874:	2002      	movs	r0, #2
 8000876:	3b01      	subs	r3, #1
 8000878:	4018      	ands	r0, r3
 800087a:	3801      	subs	r0, #1
 800087c:	e015      	b.n	80008aa <__lesf2+0x86>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d00e      	beq.n	80008a0 <__lesf2+0x7c>
 8000882:	428b      	cmp	r3, r1
 8000884:	d1e5      	bne.n	8000852 <__lesf2+0x2e>
 8000886:	2200      	movs	r2, #0
 8000888:	4290      	cmp	r0, r2
 800088a:	dc04      	bgt.n	8000896 <__lesf2+0x72>
 800088c:	42ac      	cmp	r4, r5
 800088e:	d8e0      	bhi.n	8000852 <__lesf2+0x2e>
 8000890:	2000      	movs	r0, #0
 8000892:	42ac      	cmp	r4, r5
 8000894:	d209      	bcs.n	80008aa <__lesf2+0x86>
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	2301      	movs	r3, #1
 800089a:	4398      	bics	r0, r3
 800089c:	3001      	adds	r0, #1
 800089e:	e004      	b.n	80008aa <__lesf2+0x86>
 80008a0:	2301      	movs	r3, #1
 80008a2:	3901      	subs	r1, #1
 80008a4:	4399      	bics	r1, r3
 80008a6:	0008      	movs	r0, r1
 80008a8:	3001      	adds	r0, #1
 80008aa:	bd30      	pop	{r4, r5, pc}
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d1d7      	bne.n	8000860 <__lesf2+0x3c>
 80008b0:	428b      	cmp	r3, r1
 80008b2:	d1ce      	bne.n	8000852 <__lesf2+0x2e>
 80008b4:	4282      	cmp	r2, r0
 80008b6:	dde7      	ble.n	8000888 <__lesf2+0x64>
 80008b8:	2102      	movs	r1, #2
 80008ba:	1e58      	subs	r0, r3, #1
 80008bc:	4008      	ands	r0, r1
 80008be:	3801      	subs	r0, #1
 80008c0:	e7f3      	b.n	80008aa <__lesf2+0x86>
 80008c2:	46c0      	nop			; (mov r8, r8)

080008c4 <__aeabi_fmul>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464e      	mov	r6, r9
 80008c8:	4657      	mov	r7, sl
 80008ca:	4645      	mov	r5, r8
 80008cc:	46de      	mov	lr, fp
 80008ce:	b5e0      	push	{r5, r6, r7, lr}
 80008d0:	0243      	lsls	r3, r0, #9
 80008d2:	0a5b      	lsrs	r3, r3, #9
 80008d4:	0045      	lsls	r5, r0, #1
 80008d6:	b083      	sub	sp, #12
 80008d8:	1c0f      	adds	r7, r1, #0
 80008da:	4699      	mov	r9, r3
 80008dc:	0e2d      	lsrs	r5, r5, #24
 80008de:	0fc6      	lsrs	r6, r0, #31
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d057      	beq.n	8000994 <__aeabi_fmul+0xd0>
 80008e4:	2dff      	cmp	r5, #255	; 0xff
 80008e6:	d024      	beq.n	8000932 <__aeabi_fmul+0x6e>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	04c0      	lsls	r0, r0, #19
 80008ee:	4318      	orrs	r0, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	4681      	mov	r9, r0
 80008f4:	469a      	mov	sl, r3
 80008f6:	469b      	mov	fp, r3
 80008f8:	3d7f      	subs	r5, #127	; 0x7f
 80008fa:	027c      	lsls	r4, r7, #9
 80008fc:	007a      	lsls	r2, r7, #1
 80008fe:	0ffb      	lsrs	r3, r7, #31
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	0e12      	lsrs	r2, r2, #24
 8000904:	4698      	mov	r8, r3
 8000906:	d023      	beq.n	8000950 <__aeabi_fmul+0x8c>
 8000908:	2aff      	cmp	r2, #255	; 0xff
 800090a:	d04b      	beq.n	80009a4 <__aeabi_fmul+0xe0>
 800090c:	00e3      	lsls	r3, r4, #3
 800090e:	2480      	movs	r4, #128	; 0x80
 8000910:	2000      	movs	r0, #0
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	3a7f      	subs	r2, #127	; 0x7f
 8000916:	431c      	orrs	r4, r3
 8000918:	18ad      	adds	r5, r5, r2
 800091a:	1c6b      	adds	r3, r5, #1
 800091c:	4647      	mov	r7, r8
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	4653      	mov	r3, sl
 8000922:	4077      	eors	r7, r6
 8000924:	003a      	movs	r2, r7
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d848      	bhi.n	80009bc <__aeabi_fmul+0xf8>
 800092a:	497d      	ldr	r1, [pc, #500]	; (8000b20 <__aeabi_fmul+0x25c>)
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	58cb      	ldr	r3, [r1, r3]
 8000930:	469f      	mov	pc, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d000      	beq.n	8000938 <__aeabi_fmul+0x74>
 8000936:	e085      	b.n	8000a44 <__aeabi_fmul+0x180>
 8000938:	3308      	adds	r3, #8
 800093a:	469a      	mov	sl, r3
 800093c:	3b06      	subs	r3, #6
 800093e:	469b      	mov	fp, r3
 8000940:	027c      	lsls	r4, r7, #9
 8000942:	007a      	lsls	r2, r7, #1
 8000944:	0ffb      	lsrs	r3, r7, #31
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	0a64      	lsrs	r4, r4, #9
 800094a:	0e12      	lsrs	r2, r2, #24
 800094c:	4698      	mov	r8, r3
 800094e:	d1db      	bne.n	8000908 <__aeabi_fmul+0x44>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_fmul+0x92>
 8000954:	e090      	b.n	8000a78 <__aeabi_fmul+0x1b4>
 8000956:	4652      	mov	r2, sl
 8000958:	2301      	movs	r3, #1
 800095a:	431a      	orrs	r2, r3
 800095c:	4692      	mov	sl, r2
 800095e:	2001      	movs	r0, #1
 8000960:	e7db      	b.n	800091a <__aeabi_fmul+0x56>
 8000962:	464c      	mov	r4, r9
 8000964:	4658      	mov	r0, fp
 8000966:	0017      	movs	r7, r2
 8000968:	2802      	cmp	r0, #2
 800096a:	d024      	beq.n	80009b6 <__aeabi_fmul+0xf2>
 800096c:	2803      	cmp	r0, #3
 800096e:	d100      	bne.n	8000972 <__aeabi_fmul+0xae>
 8000970:	e0cf      	b.n	8000b12 <__aeabi_fmul+0x24e>
 8000972:	2200      	movs	r2, #0
 8000974:	2300      	movs	r3, #0
 8000976:	2801      	cmp	r0, #1
 8000978:	d14d      	bne.n	8000a16 <__aeabi_fmul+0x152>
 800097a:	0258      	lsls	r0, r3, #9
 800097c:	05d2      	lsls	r2, r2, #23
 800097e:	0a40      	lsrs	r0, r0, #9
 8000980:	07ff      	lsls	r7, r7, #31
 8000982:	4310      	orrs	r0, r2
 8000984:	4338      	orrs	r0, r7
 8000986:	b003      	add	sp, #12
 8000988:	bc3c      	pop	{r2, r3, r4, r5}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	46ab      	mov	fp, r5
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	2b00      	cmp	r3, #0
 8000996:	d15b      	bne.n	8000a50 <__aeabi_fmul+0x18c>
 8000998:	2304      	movs	r3, #4
 800099a:	469a      	mov	sl, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2500      	movs	r5, #0
 80009a0:	469b      	mov	fp, r3
 80009a2:	e7aa      	b.n	80008fa <__aeabi_fmul+0x36>
 80009a4:	35ff      	adds	r5, #255	; 0xff
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d160      	bne.n	8000a6c <__aeabi_fmul+0x1a8>
 80009aa:	4652      	mov	r2, sl
 80009ac:	2302      	movs	r3, #2
 80009ae:	431a      	orrs	r2, r3
 80009b0:	4692      	mov	sl, r2
 80009b2:	2002      	movs	r0, #2
 80009b4:	e7b1      	b.n	800091a <__aeabi_fmul+0x56>
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	2300      	movs	r3, #0
 80009ba:	e7de      	b.n	800097a <__aeabi_fmul+0xb6>
 80009bc:	464b      	mov	r3, r9
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	469c      	mov	ip, r3
 80009c2:	464b      	mov	r3, r9
 80009c4:	0426      	lsls	r6, r4, #16
 80009c6:	0c36      	lsrs	r6, r6, #16
 80009c8:	0418      	lsls	r0, r3, #16
 80009ca:	4661      	mov	r1, ip
 80009cc:	0033      	movs	r3, r6
 80009ce:	0c22      	lsrs	r2, r4, #16
 80009d0:	4664      	mov	r4, ip
 80009d2:	0c00      	lsrs	r0, r0, #16
 80009d4:	4343      	muls	r3, r0
 80009d6:	434e      	muls	r6, r1
 80009d8:	4350      	muls	r0, r2
 80009da:	4354      	muls	r4, r2
 80009dc:	1980      	adds	r0, r0, r6
 80009de:	0c1a      	lsrs	r2, r3, #16
 80009e0:	1812      	adds	r2, r2, r0
 80009e2:	4296      	cmp	r6, r2
 80009e4:	d903      	bls.n	80009ee <__aeabi_fmul+0x12a>
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	0249      	lsls	r1, r1, #9
 80009ea:	468c      	mov	ip, r1
 80009ec:	4464      	add	r4, ip
 80009ee:	041b      	lsls	r3, r3, #16
 80009f0:	0c1b      	lsrs	r3, r3, #16
 80009f2:	0410      	lsls	r0, r2, #16
 80009f4:	18c0      	adds	r0, r0, r3
 80009f6:	0183      	lsls	r3, r0, #6
 80009f8:	1e5e      	subs	r6, r3, #1
 80009fa:	41b3      	sbcs	r3, r6
 80009fc:	0e80      	lsrs	r0, r0, #26
 80009fe:	4318      	orrs	r0, r3
 8000a00:	0c13      	lsrs	r3, r2, #16
 8000a02:	191b      	adds	r3, r3, r4
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	4303      	orrs	r3, r0
 8000a08:	001c      	movs	r4, r3
 8000a0a:	0123      	lsls	r3, r4, #4
 8000a0c:	d579      	bpl.n	8000b02 <__aeabi_fmul+0x23e>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	0862      	lsrs	r2, r4, #1
 8000a12:	401c      	ands	r4, r3
 8000a14:	4314      	orrs	r4, r2
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	327f      	adds	r2, #127	; 0x7f
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	dd4d      	ble.n	8000aba <__aeabi_fmul+0x1f6>
 8000a1e:	0763      	lsls	r3, r4, #29
 8000a20:	d004      	beq.n	8000a2c <__aeabi_fmul+0x168>
 8000a22:	230f      	movs	r3, #15
 8000a24:	4023      	ands	r3, r4
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fmul+0x168>
 8000a2a:	3404      	adds	r4, #4
 8000a2c:	0123      	lsls	r3, r4, #4
 8000a2e:	d503      	bpl.n	8000a38 <__aeabi_fmul+0x174>
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <__aeabi_fmul+0x260>)
 8000a32:	9a01      	ldr	r2, [sp, #4]
 8000a34:	401c      	ands	r4, r3
 8000a36:	3280      	adds	r2, #128	; 0x80
 8000a38:	2afe      	cmp	r2, #254	; 0xfe
 8000a3a:	dcbc      	bgt.n	80009b6 <__aeabi_fmul+0xf2>
 8000a3c:	01a3      	lsls	r3, r4, #6
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	e79a      	b.n	800097a <__aeabi_fmul+0xb6>
 8000a44:	230c      	movs	r3, #12
 8000a46:	469a      	mov	sl, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	469b      	mov	fp, r3
 8000a4e:	e754      	b.n	80008fa <__aeabi_fmul+0x36>
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fae5 	bl	8002020 <__clzsi2>
 8000a56:	464a      	mov	r2, r9
 8000a58:	1f43      	subs	r3, r0, #5
 8000a5a:	2576      	movs	r5, #118	; 0x76
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	426d      	negs	r5, r5
 8000a62:	4691      	mov	r9, r2
 8000a64:	1a2d      	subs	r5, r5, r0
 8000a66:	469a      	mov	sl, r3
 8000a68:	469b      	mov	fp, r3
 8000a6a:	e746      	b.n	80008fa <__aeabi_fmul+0x36>
 8000a6c:	4652      	mov	r2, sl
 8000a6e:	2303      	movs	r3, #3
 8000a70:	431a      	orrs	r2, r3
 8000a72:	4692      	mov	sl, r2
 8000a74:	2003      	movs	r0, #3
 8000a76:	e750      	b.n	800091a <__aeabi_fmul+0x56>
 8000a78:	0020      	movs	r0, r4
 8000a7a:	f001 fad1 	bl	8002020 <__clzsi2>
 8000a7e:	1f43      	subs	r3, r0, #5
 8000a80:	1a2d      	subs	r5, r5, r0
 8000a82:	409c      	lsls	r4, r3
 8000a84:	3d76      	subs	r5, #118	; 0x76
 8000a86:	2000      	movs	r0, #0
 8000a88:	e747      	b.n	800091a <__aeabi_fmul+0x56>
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	2700      	movs	r7, #0
 8000a8e:	03db      	lsls	r3, r3, #15
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	e772      	b.n	800097a <__aeabi_fmul+0xb6>
 8000a94:	4642      	mov	r2, r8
 8000a96:	e766      	b.n	8000966 <__aeabi_fmul+0xa2>
 8000a98:	464c      	mov	r4, r9
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	4658      	mov	r0, fp
 8000a9e:	e762      	b.n	8000966 <__aeabi_fmul+0xa2>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	421a      	tst	r2, r3
 8000aa8:	d022      	beq.n	8000af0 <__aeabi_fmul+0x22c>
 8000aaa:	421c      	tst	r4, r3
 8000aac:	d120      	bne.n	8000af0 <__aeabi_fmul+0x22c>
 8000aae:	4323      	orrs	r3, r4
 8000ab0:	025b      	lsls	r3, r3, #9
 8000ab2:	0a5b      	lsrs	r3, r3, #9
 8000ab4:	4647      	mov	r7, r8
 8000ab6:	22ff      	movs	r2, #255	; 0xff
 8000ab8:	e75f      	b.n	800097a <__aeabi_fmul+0xb6>
 8000aba:	2301      	movs	r3, #1
 8000abc:	1a9a      	subs	r2, r3, r2
 8000abe:	2a1b      	cmp	r2, #27
 8000ac0:	dc21      	bgt.n	8000b06 <__aeabi_fmul+0x242>
 8000ac2:	0023      	movs	r3, r4
 8000ac4:	9901      	ldr	r1, [sp, #4]
 8000ac6:	40d3      	lsrs	r3, r2
 8000ac8:	319e      	adds	r1, #158	; 0x9e
 8000aca:	408c      	lsls	r4, r1
 8000acc:	001a      	movs	r2, r3
 8000ace:	0023      	movs	r3, r4
 8000ad0:	1e5c      	subs	r4, r3, #1
 8000ad2:	41a3      	sbcs	r3, r4
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	075a      	lsls	r2, r3, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fmul+0x220>
 8000ada:	220f      	movs	r2, #15
 8000adc:	401a      	ands	r2, r3
 8000ade:	2a04      	cmp	r2, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fmul+0x220>
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	015a      	lsls	r2, r3, #5
 8000ae6:	d411      	bmi.n	8000b0c <__aeabi_fmul+0x248>
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	0a5b      	lsrs	r3, r3, #9
 8000aec:	2200      	movs	r2, #0
 8000aee:	e744      	b.n	800097a <__aeabi_fmul+0xb6>
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	464a      	mov	r2, r9
 8000af4:	03db      	lsls	r3, r3, #15
 8000af6:	4313      	orrs	r3, r2
 8000af8:	025b      	lsls	r3, r3, #9
 8000afa:	0a5b      	lsrs	r3, r3, #9
 8000afc:	0037      	movs	r7, r6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	e73b      	b.n	800097a <__aeabi_fmul+0xb6>
 8000b02:	9501      	str	r5, [sp, #4]
 8000b04:	e787      	b.n	8000a16 <__aeabi_fmul+0x152>
 8000b06:	2200      	movs	r2, #0
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e736      	b.n	800097a <__aeabi_fmul+0xb6>
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e733      	b.n	800097a <__aeabi_fmul+0xb6>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	03db      	lsls	r3, r3, #15
 8000b16:	4323      	orrs	r3, r4
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	0a5b      	lsrs	r3, r3, #9
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	e72c      	b.n	800097a <__aeabi_fmul+0xb6>
 8000b20:	08005514 	.word	0x08005514
 8000b24:	f7ffffff 	.word	0xf7ffffff

08000b28 <__aeabi_fsub>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	4647      	mov	r7, r8
 8000b2c:	46ce      	mov	lr, r9
 8000b2e:	0044      	lsls	r4, r0, #1
 8000b30:	0fc2      	lsrs	r2, r0, #31
 8000b32:	b580      	push	{r7, lr}
 8000b34:	0247      	lsls	r7, r0, #9
 8000b36:	0248      	lsls	r0, r1, #9
 8000b38:	0a40      	lsrs	r0, r0, #9
 8000b3a:	4684      	mov	ip, r0
 8000b3c:	4666      	mov	r6, ip
 8000b3e:	0048      	lsls	r0, r1, #1
 8000b40:	0a7f      	lsrs	r7, r7, #9
 8000b42:	0e24      	lsrs	r4, r4, #24
 8000b44:	00f6      	lsls	r6, r6, #3
 8000b46:	0025      	movs	r5, r4
 8000b48:	4690      	mov	r8, r2
 8000b4a:	00fb      	lsls	r3, r7, #3
 8000b4c:	0e00      	lsrs	r0, r0, #24
 8000b4e:	0fc9      	lsrs	r1, r1, #31
 8000b50:	46b1      	mov	r9, r6
 8000b52:	28ff      	cmp	r0, #255	; 0xff
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x30>
 8000b56:	e085      	b.n	8000c64 <__aeabi_fsub+0x13c>
 8000b58:	2601      	movs	r6, #1
 8000b5a:	4071      	eors	r1, r6
 8000b5c:	1a26      	subs	r6, r4, r0
 8000b5e:	4291      	cmp	r1, r2
 8000b60:	d057      	beq.n	8000c12 <__aeabi_fsub+0xea>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	dd43      	ble.n	8000bee <__aeabi_fsub+0xc6>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d000      	beq.n	8000b6c <__aeabi_fsub+0x44>
 8000b6a:	e07f      	b.n	8000c6c <__aeabi_fsub+0x144>
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_fsub+0x4c>
 8000b72:	e0aa      	b.n	8000cca <__aeabi_fsub+0x1a2>
 8000b74:	3e01      	subs	r6, #1
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d000      	beq.n	8000b7c <__aeabi_fsub+0x54>
 8000b7a:	e0f7      	b.n	8000d6c <__aeabi_fsub+0x244>
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	015a      	lsls	r2, r3, #5
 8000b80:	d400      	bmi.n	8000b84 <__aeabi_fsub+0x5c>
 8000b82:	e08b      	b.n	8000c9c <__aeabi_fsub+0x174>
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	099c      	lsrs	r4, r3, #6
 8000b88:	0020      	movs	r0, r4
 8000b8a:	f001 fa49 	bl	8002020 <__clzsi2>
 8000b8e:	3805      	subs	r0, #5
 8000b90:	4084      	lsls	r4, r0
 8000b92:	4285      	cmp	r5, r0
 8000b94:	dd00      	ble.n	8000b98 <__aeabi_fsub+0x70>
 8000b96:	e0d3      	b.n	8000d40 <__aeabi_fsub+0x218>
 8000b98:	1b45      	subs	r5, r0, r5
 8000b9a:	0023      	movs	r3, r4
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	3501      	adds	r5, #1
 8000ba0:	40eb      	lsrs	r3, r5
 8000ba2:	1b45      	subs	r5, r0, r5
 8000ba4:	40ac      	lsls	r4, r5
 8000ba6:	1e62      	subs	r2, r4, #1
 8000ba8:	4194      	sbcs	r4, r2
 8000baa:	4323      	orrs	r3, r4
 8000bac:	2407      	movs	r4, #7
 8000bae:	2500      	movs	r5, #0
 8000bb0:	401c      	ands	r4, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4641      	mov	r1, r8
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d004      	beq.n	8000bc6 <__aeabi_fsub+0x9e>
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	4019      	ands	r1, r3
 8000bc0:	2904      	cmp	r1, #4
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x9e>
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	0159      	lsls	r1, r3, #5
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_fsub+0xa4>
 8000bca:	e080      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000bcc:	3501      	adds	r5, #1
 8000bce:	b2ec      	uxtb	r4, r5
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fsub+0xae>
 8000bd4:	e0a3      	b.n	8000d1e <__aeabi_fsub+0x1f6>
 8000bd6:	24ff      	movs	r4, #255	; 0xff
 8000bd8:	2300      	movs	r3, #0
 8000bda:	025b      	lsls	r3, r3, #9
 8000bdc:	05e4      	lsls	r4, r4, #23
 8000bde:	0a58      	lsrs	r0, r3, #9
 8000be0:	07d2      	lsls	r2, r2, #31
 8000be2:	4320      	orrs	r0, r4
 8000be4:	4310      	orrs	r0, r2
 8000be6:	bc0c      	pop	{r2, r3}
 8000be8:	4690      	mov	r8, r2
 8000bea:	4699      	mov	r9, r3
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d174      	bne.n	8000cdc <__aeabi_fsub+0x1b4>
 8000bf2:	1c60      	adds	r0, r4, #1
 8000bf4:	b2c0      	uxtb	r0, r0
 8000bf6:	2801      	cmp	r0, #1
 8000bf8:	dc00      	bgt.n	8000bfc <__aeabi_fsub+0xd4>
 8000bfa:	e0a7      	b.n	8000d4c <__aeabi_fsub+0x224>
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	1a9c      	subs	r4, r3, r2
 8000c00:	0162      	lsls	r2, r4, #5
 8000c02:	d500      	bpl.n	8000c06 <__aeabi_fsub+0xde>
 8000c04:	e0b6      	b.n	8000d74 <__aeabi_fsub+0x24c>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d1be      	bne.n	8000b88 <__aeabi_fsub+0x60>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e7e3      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	dc00      	bgt.n	8000c18 <__aeabi_fsub+0xf0>
 8000c16:	e085      	b.n	8000d24 <__aeabi_fsub+0x1fc>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d046      	beq.n	8000caa <__aeabi_fsub+0x182>
 8000c1c:	2cff      	cmp	r4, #255	; 0xff
 8000c1e:	d049      	beq.n	8000cb4 <__aeabi_fsub+0x18c>
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	4648      	mov	r0, r9
 8000c24:	04d2      	lsls	r2, r2, #19
 8000c26:	4310      	orrs	r0, r2
 8000c28:	4681      	mov	r9, r0
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2e1b      	cmp	r6, #27
 8000c2e:	dc09      	bgt.n	8000c44 <__aeabi_fsub+0x11c>
 8000c30:	2020      	movs	r0, #32
 8000c32:	464c      	mov	r4, r9
 8000c34:	1b80      	subs	r0, r0, r6
 8000c36:	4084      	lsls	r4, r0
 8000c38:	464a      	mov	r2, r9
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	40f2      	lsrs	r2, r6
 8000c3e:	1e44      	subs	r4, r0, #1
 8000c40:	41a0      	sbcs	r0, r4
 8000c42:	4302      	orrs	r2, r0
 8000c44:	189b      	adds	r3, r3, r2
 8000c46:	015a      	lsls	r2, r3, #5
 8000c48:	d528      	bpl.n	8000c9c <__aeabi_fsub+0x174>
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	2dff      	cmp	r5, #255	; 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x12a>
 8000c50:	e0a8      	b.n	8000da4 <__aeabi_fsub+0x27c>
 8000c52:	2201      	movs	r2, #1
 8000c54:	2407      	movs	r4, #7
 8000c56:	4994      	ldr	r1, [pc, #592]	; (8000ea8 <__aeabi_fsub+0x380>)
 8000c58:	401a      	ands	r2, r3
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	401c      	ands	r4, r3
 8000c62:	e7a6      	b.n	8000bb2 <__aeabi_fsub+0x8a>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x142>
 8000c68:	e778      	b.n	8000b5c <__aeabi_fsub+0x34>
 8000c6a:	e775      	b.n	8000b58 <__aeabi_fsub+0x30>
 8000c6c:	2cff      	cmp	r4, #255	; 0xff
 8000c6e:	d054      	beq.n	8000d1a <__aeabi_fsub+0x1f2>
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4649      	mov	r1, r9
 8000c74:	04d2      	lsls	r2, r2, #19
 8000c76:	4311      	orrs	r1, r2
 8000c78:	4689      	mov	r9, r1
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2e1b      	cmp	r6, #27
 8000c7e:	dc09      	bgt.n	8000c94 <__aeabi_fsub+0x16c>
 8000c80:	2120      	movs	r1, #32
 8000c82:	4648      	mov	r0, r9
 8000c84:	1b89      	subs	r1, r1, r6
 8000c86:	4088      	lsls	r0, r1
 8000c88:	464a      	mov	r2, r9
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	40f2      	lsrs	r2, r6
 8000c8e:	1e48      	subs	r0, r1, #1
 8000c90:	4181      	sbcs	r1, r0
 8000c92:	430a      	orrs	r2, r1
 8000c94:	1a9b      	subs	r3, r3, r2
 8000c96:	015a      	lsls	r2, r3, #5
 8000c98:	d500      	bpl.n	8000c9c <__aeabi_fsub+0x174>
 8000c9a:	e773      	b.n	8000b84 <__aeabi_fsub+0x5c>
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4641      	mov	r1, r8
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	0759      	lsls	r1, r3, #29
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_fsub+0x180>
 8000ca6:	e789      	b.n	8000bbc <__aeabi_fsub+0x94>
 8000ca8:	e011      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000caa:	4648      	mov	r0, r9
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d158      	bne.n	8000d62 <__aeabi_fsub+0x23a>
 8000cb0:	2cff      	cmp	r4, #255	; 0xff
 8000cb2:	d10c      	bne.n	8000cce <__aeabi_fsub+0x1a6>
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x194>
 8000cba:	e78c      	b.n	8000bd6 <__aeabi_fsub+0xae>
 8000cbc:	2080      	movs	r0, #128	; 0x80
 8000cbe:	03c0      	lsls	r0, r0, #15
 8000cc0:	4303      	orrs	r3, r0
 8000cc2:	025b      	lsls	r3, r3, #9
 8000cc4:	0a5b      	lsrs	r3, r3, #9
 8000cc6:	24ff      	movs	r4, #255	; 0xff
 8000cc8:	e787      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d025      	beq.n	8000d1a <__aeabi_fsub+0x1f2>
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	2dff      	cmp	r5, #255	; 0xff
 8000cd2:	d0f0      	beq.n	8000cb6 <__aeabi_fsub+0x18e>
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	0a5b      	lsrs	r3, r3, #9
 8000cd8:	b2ec      	uxtb	r4, r5
 8000cda:	e77e      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d04d      	beq.n	8000d7c <__aeabi_fsub+0x254>
 8000ce0:	28ff      	cmp	r0, #255	; 0xff
 8000ce2:	d018      	beq.n	8000d16 <__aeabi_fsub+0x1ee>
 8000ce4:	2480      	movs	r4, #128	; 0x80
 8000ce6:	04e4      	lsls	r4, r4, #19
 8000ce8:	4272      	negs	r2, r6
 8000cea:	4323      	orrs	r3, r4
 8000cec:	2a1b      	cmp	r2, #27
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_fsub+0x1ca>
 8000cf0:	e0c4      	b.n	8000e7c <__aeabi_fsub+0x354>
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	2520      	movs	r5, #32
 8000cf6:	40d4      	lsrs	r4, r2
 8000cf8:	1aaa      	subs	r2, r5, r2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	4193      	sbcs	r3, r2
 8000d00:	4323      	orrs	r3, r4
 8000d02:	464a      	mov	r2, r9
 8000d04:	0005      	movs	r5, r0
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	4688      	mov	r8, r1
 8000d0a:	e738      	b.n	8000b7e <__aeabi_fsub+0x56>
 8000d0c:	1c72      	adds	r2, r6, #1
 8000d0e:	d0f8      	beq.n	8000d02 <__aeabi_fsub+0x1da>
 8000d10:	43f2      	mvns	r2, r6
 8000d12:	28ff      	cmp	r0, #255	; 0xff
 8000d14:	d1ea      	bne.n	8000cec <__aeabi_fsub+0x1c4>
 8000d16:	000a      	movs	r2, r1
 8000d18:	464b      	mov	r3, r9
 8000d1a:	25ff      	movs	r5, #255	; 0xff
 8000d1c:	e7d7      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000d1e:	019b      	lsls	r3, r3, #6
 8000d20:	0a5b      	lsrs	r3, r3, #9
 8000d22:	e75a      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d141      	bne.n	8000dac <__aeabi_fsub+0x284>
 8000d28:	1c65      	adds	r5, r4, #1
 8000d2a:	b2e9      	uxtb	r1, r5
 8000d2c:	2901      	cmp	r1, #1
 8000d2e:	dd45      	ble.n	8000dbc <__aeabi_fsub+0x294>
 8000d30:	2dff      	cmp	r5, #255	; 0xff
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x20e>
 8000d34:	e74f      	b.n	8000bd6 <__aeabi_fsub+0xae>
 8000d36:	2407      	movs	r4, #7
 8000d38:	444b      	add	r3, r9
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	401c      	ands	r4, r3
 8000d3e:	e738      	b.n	8000bb2 <__aeabi_fsub+0x8a>
 8000d40:	2207      	movs	r2, #7
 8000d42:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <__aeabi_fsub+0x384>)
 8000d44:	1a2d      	subs	r5, r5, r0
 8000d46:	4023      	ands	r3, r4
 8000d48:	4014      	ands	r4, r2
 8000d4a:	e732      	b.n	8000bb2 <__aeabi_fsub+0x8a>
 8000d4c:	2c00      	cmp	r4, #0
 8000d4e:	d11d      	bne.n	8000d8c <__aeabi_fsub+0x264>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d17a      	bne.n	8000e4a <__aeabi_fsub+0x322>
 8000d54:	464b      	mov	r3, r9
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x234>
 8000d5a:	e091      	b.n	8000e80 <__aeabi_fsub+0x358>
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	2500      	movs	r5, #0
 8000d60:	e7b5      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d119      	bne.n	8000d9c <__aeabi_fsub+0x274>
 8000d68:	444b      	add	r3, r9
 8000d6a:	e76c      	b.n	8000c46 <__aeabi_fsub+0x11e>
 8000d6c:	2cff      	cmp	r4, #255	; 0xff
 8000d6e:	d184      	bne.n	8000c7a <__aeabi_fsub+0x152>
 8000d70:	25ff      	movs	r5, #255	; 0xff
 8000d72:	e7ac      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000d74:	464a      	mov	r2, r9
 8000d76:	4688      	mov	r8, r1
 8000d78:	1ad4      	subs	r4, r2, r3
 8000d7a:	e705      	b.n	8000b88 <__aeabi_fsub+0x60>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1c5      	bne.n	8000d0c <__aeabi_fsub+0x1e4>
 8000d80:	000a      	movs	r2, r1
 8000d82:	28ff      	cmp	r0, #255	; 0xff
 8000d84:	d0c8      	beq.n	8000d18 <__aeabi_fsub+0x1f0>
 8000d86:	0005      	movs	r5, r0
 8000d88:	464b      	mov	r3, r9
 8000d8a:	e7a0      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d149      	bne.n	8000e24 <__aeabi_fsub+0x2fc>
 8000d90:	464b      	mov	r3, r9
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d077      	beq.n	8000e86 <__aeabi_fsub+0x35e>
 8000d96:	000a      	movs	r2, r1
 8000d98:	25ff      	movs	r5, #255	; 0xff
 8000d9a:	e798      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_fsub+0x27a>
 8000da0:	e743      	b.n	8000c2a <__aeabi_fsub+0x102>
 8000da2:	e787      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000da4:	000a      	movs	r2, r1
 8000da6:	24ff      	movs	r4, #255	; 0xff
 8000da8:	2300      	movs	r3, #0
 8000daa:	e716      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d115      	bne.n	8000ddc <__aeabi_fsub+0x2b4>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d157      	bne.n	8000e64 <__aeabi_fsub+0x33c>
 8000db4:	28ff      	cmp	r0, #255	; 0xff
 8000db6:	d1e6      	bne.n	8000d86 <__aeabi_fsub+0x25e>
 8000db8:	464b      	mov	r3, r9
 8000dba:	e77b      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d120      	bne.n	8000e02 <__aeabi_fsub+0x2da>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d057      	beq.n	8000e74 <__aeabi_fsub+0x34c>
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d053      	beq.n	8000e72 <__aeabi_fsub+0x34a>
 8000dca:	444b      	add	r3, r9
 8000dcc:	015a      	lsls	r2, r3, #5
 8000dce:	d568      	bpl.n	8000ea2 <__aeabi_fsub+0x37a>
 8000dd0:	2407      	movs	r4, #7
 8000dd2:	4a36      	ldr	r2, [pc, #216]	; (8000eac <__aeabi_fsub+0x384>)
 8000dd4:	401c      	ands	r4, r3
 8000dd6:	2501      	movs	r5, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	e6ea      	b.n	8000bb2 <__aeabi_fsub+0x8a>
 8000ddc:	28ff      	cmp	r0, #255	; 0xff
 8000dde:	d0eb      	beq.n	8000db8 <__aeabi_fsub+0x290>
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	04d2      	lsls	r2, r2, #19
 8000de4:	4276      	negs	r6, r6
 8000de6:	4313      	orrs	r3, r2
 8000de8:	2e1b      	cmp	r6, #27
 8000dea:	dc53      	bgt.n	8000e94 <__aeabi_fsub+0x36c>
 8000dec:	2520      	movs	r5, #32
 8000dee:	1bad      	subs	r5, r5, r6
 8000df0:	001a      	movs	r2, r3
 8000df2:	40ab      	lsls	r3, r5
 8000df4:	40f2      	lsrs	r2, r6
 8000df6:	1e5c      	subs	r4, r3, #1
 8000df8:	41a3      	sbcs	r3, r4
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	444b      	add	r3, r9
 8000dfe:	0005      	movs	r5, r0
 8000e00:	e721      	b.n	8000c46 <__aeabi_fsub+0x11e>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0d8      	beq.n	8000db8 <__aeabi_fsub+0x290>
 8000e06:	4649      	mov	r1, r9
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x2e6>
 8000e0c:	e752      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	03c9      	lsls	r1, r1, #15
 8000e12:	420f      	tst	r7, r1
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x2f0>
 8000e16:	e74d      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	4208      	tst	r0, r1
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_fsub+0x2f8>
 8000e1e:	e749      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000e20:	464b      	mov	r3, r9
 8000e22:	e747      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000e24:	4648      	mov	r0, r9
 8000e26:	25ff      	movs	r5, #255	; 0xff
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_fsub+0x306>
 8000e2c:	e74f      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	03d2      	lsls	r2, r2, #15
 8000e32:	4217      	tst	r7, r2
 8000e34:	d004      	beq.n	8000e40 <__aeabi_fsub+0x318>
 8000e36:	4660      	mov	r0, ip
 8000e38:	4210      	tst	r0, r2
 8000e3a:	d101      	bne.n	8000e40 <__aeabi_fsub+0x318>
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	4688      	mov	r8, r1
 8000e40:	2201      	movs	r2, #1
 8000e42:	4641      	mov	r1, r8
 8000e44:	25ff      	movs	r5, #255	; 0xff
 8000e46:	400a      	ands	r2, r1
 8000e48:	e741      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d01f      	beq.n	8000e90 <__aeabi_fsub+0x368>
 8000e50:	1a1a      	subs	r2, r3, r0
 8000e52:	0150      	lsls	r0, r2, #5
 8000e54:	d520      	bpl.n	8000e98 <__aeabi_fsub+0x370>
 8000e56:	464a      	mov	r2, r9
 8000e58:	2407      	movs	r4, #7
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	401c      	ands	r4, r3
 8000e5e:	4688      	mov	r8, r1
 8000e60:	2500      	movs	r5, #0
 8000e62:	e6a6      	b.n	8000bb2 <__aeabi_fsub+0x8a>
 8000e64:	1c74      	adds	r4, r6, #1
 8000e66:	d0c9      	beq.n	8000dfc <__aeabi_fsub+0x2d4>
 8000e68:	43f6      	mvns	r6, r6
 8000e6a:	28ff      	cmp	r0, #255	; 0xff
 8000e6c:	d1bc      	bne.n	8000de8 <__aeabi_fsub+0x2c0>
 8000e6e:	464b      	mov	r3, r9
 8000e70:	e720      	b.n	8000cb4 <__aeabi_fsub+0x18c>
 8000e72:	4699      	mov	r9, r3
 8000e74:	464b      	mov	r3, r9
 8000e76:	2500      	movs	r5, #0
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	e72b      	b.n	8000cd4 <__aeabi_fsub+0x1ac>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e740      	b.n	8000d02 <__aeabi_fsub+0x1da>
 8000e80:	2200      	movs	r2, #0
 8000e82:	2300      	movs	r3, #0
 8000e84:	e6a9      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	2200      	movs	r2, #0
 8000e8a:	03db      	lsls	r3, r3, #15
 8000e8c:	24ff      	movs	r4, #255	; 0xff
 8000e8e:	e6a4      	b.n	8000bda <__aeabi_fsub+0xb2>
 8000e90:	2500      	movs	r5, #0
 8000e92:	e71c      	b.n	8000cce <__aeabi_fsub+0x1a6>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e7b1      	b.n	8000dfc <__aeabi_fsub+0x2d4>
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d0f1      	beq.n	8000e80 <__aeabi_fsub+0x358>
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	e6fc      	b.n	8000c9c <__aeabi_fsub+0x174>
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	e6fa      	b.n	8000c9c <__aeabi_fsub+0x174>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	7dffffff 	.word	0x7dffffff
 8000eac:	fbffffff 	.word	0xfbffffff

08000eb0 <__aeabi_f2iz>:
 8000eb0:	0241      	lsls	r1, r0, #9
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0fc3      	lsrs	r3, r0, #31
 8000eb6:	0a49      	lsrs	r1, r1, #9
 8000eb8:	0e12      	lsrs	r2, r2, #24
 8000eba:	2000      	movs	r0, #0
 8000ebc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ebe:	d90d      	bls.n	8000edc <__aeabi_f2iz+0x2c>
 8000ec0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ec2:	d80c      	bhi.n	8000ede <__aeabi_f2iz+0x2e>
 8000ec4:	2080      	movs	r0, #128	; 0x80
 8000ec6:	0400      	lsls	r0, r0, #16
 8000ec8:	4301      	orrs	r1, r0
 8000eca:	2a95      	cmp	r2, #149	; 0x95
 8000ecc:	dc0a      	bgt.n	8000ee4 <__aeabi_f2iz+0x34>
 8000ece:	2096      	movs	r0, #150	; 0x96
 8000ed0:	1a82      	subs	r2, r0, r2
 8000ed2:	40d1      	lsrs	r1, r2
 8000ed4:	4248      	negs	r0, r1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_f2iz+0x2c>
 8000eda:	0008      	movs	r0, r1
 8000edc:	4770      	bx	lr
 8000ede:	4a03      	ldr	r2, [pc, #12]	; (8000eec <__aeabi_f2iz+0x3c>)
 8000ee0:	1898      	adds	r0, r3, r2
 8000ee2:	e7fb      	b.n	8000edc <__aeabi_f2iz+0x2c>
 8000ee4:	3a96      	subs	r2, #150	; 0x96
 8000ee6:	4091      	lsls	r1, r2
 8000ee8:	e7f4      	b.n	8000ed4 <__aeabi_f2iz+0x24>
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	7fffffff 	.word	0x7fffffff

08000ef0 <__aeabi_i2f>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	d03d      	beq.n	8000f72 <__aeabi_i2f+0x82>
 8000ef6:	17c3      	asrs	r3, r0, #31
 8000ef8:	18c5      	adds	r5, r0, r3
 8000efa:	405d      	eors	r5, r3
 8000efc:	0fc4      	lsrs	r4, r0, #31
 8000efe:	0028      	movs	r0, r5
 8000f00:	f001 f88e 	bl	8002020 <__clzsi2>
 8000f04:	229e      	movs	r2, #158	; 0x9e
 8000f06:	1a12      	subs	r2, r2, r0
 8000f08:	2a96      	cmp	r2, #150	; 0x96
 8000f0a:	dc07      	bgt.n	8000f1c <__aeabi_i2f+0x2c>
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	2808      	cmp	r0, #8
 8000f10:	dd33      	ble.n	8000f7a <__aeabi_i2f+0x8a>
 8000f12:	3808      	subs	r0, #8
 8000f14:	4085      	lsls	r5, r0
 8000f16:	0268      	lsls	r0, r5, #9
 8000f18:	0a40      	lsrs	r0, r0, #9
 8000f1a:	e023      	b.n	8000f64 <__aeabi_i2f+0x74>
 8000f1c:	2a99      	cmp	r2, #153	; 0x99
 8000f1e:	dd0b      	ble.n	8000f38 <__aeabi_i2f+0x48>
 8000f20:	2305      	movs	r3, #5
 8000f22:	0029      	movs	r1, r5
 8000f24:	1a1b      	subs	r3, r3, r0
 8000f26:	40d9      	lsrs	r1, r3
 8000f28:	0003      	movs	r3, r0
 8000f2a:	331b      	adds	r3, #27
 8000f2c:	409d      	lsls	r5, r3
 8000f2e:	002b      	movs	r3, r5
 8000f30:	1e5d      	subs	r5, r3, #1
 8000f32:	41ab      	sbcs	r3, r5
 8000f34:	4319      	orrs	r1, r3
 8000f36:	000d      	movs	r5, r1
 8000f38:	2805      	cmp	r0, #5
 8000f3a:	dd01      	ble.n	8000f40 <__aeabi_i2f+0x50>
 8000f3c:	1f43      	subs	r3, r0, #5
 8000f3e:	409d      	lsls	r5, r3
 8000f40:	002b      	movs	r3, r5
 8000f42:	490f      	ldr	r1, [pc, #60]	; (8000f80 <__aeabi_i2f+0x90>)
 8000f44:	400b      	ands	r3, r1
 8000f46:	076e      	lsls	r6, r5, #29
 8000f48:	d009      	beq.n	8000f5e <__aeabi_i2f+0x6e>
 8000f4a:	260f      	movs	r6, #15
 8000f4c:	4035      	ands	r5, r6
 8000f4e:	2d04      	cmp	r5, #4
 8000f50:	d005      	beq.n	8000f5e <__aeabi_i2f+0x6e>
 8000f52:	3304      	adds	r3, #4
 8000f54:	015d      	lsls	r5, r3, #5
 8000f56:	d502      	bpl.n	8000f5e <__aeabi_i2f+0x6e>
 8000f58:	229f      	movs	r2, #159	; 0x9f
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	1a12      	subs	r2, r2, r0
 8000f5e:	019b      	lsls	r3, r3, #6
 8000f60:	0a58      	lsrs	r0, r3, #9
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	0240      	lsls	r0, r0, #9
 8000f66:	05d2      	lsls	r2, r2, #23
 8000f68:	0a40      	lsrs	r0, r0, #9
 8000f6a:	07e4      	lsls	r4, r4, #31
 8000f6c:	4310      	orrs	r0, r2
 8000f6e:	4320      	orrs	r0, r4
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	2400      	movs	r4, #0
 8000f74:	2200      	movs	r2, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	e7f4      	b.n	8000f64 <__aeabi_i2f+0x74>
 8000f7a:	0268      	lsls	r0, r5, #9
 8000f7c:	0a40      	lsrs	r0, r0, #9
 8000f7e:	e7f1      	b.n	8000f64 <__aeabi_i2f+0x74>
 8000f80:	fbffffff 	.word	0xfbffffff

08000f84 <__aeabi_ui2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	1e04      	subs	r4, r0, #0
 8000f88:	d034      	beq.n	8000ff4 <__aeabi_ui2f+0x70>
 8000f8a:	f001 f849 	bl	8002020 <__clzsi2>
 8000f8e:	229e      	movs	r2, #158	; 0x9e
 8000f90:	1a12      	subs	r2, r2, r0
 8000f92:	2a96      	cmp	r2, #150	; 0x96
 8000f94:	dc07      	bgt.n	8000fa6 <__aeabi_ui2f+0x22>
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	2808      	cmp	r0, #8
 8000f9a:	dd2e      	ble.n	8000ffa <__aeabi_ui2f+0x76>
 8000f9c:	3808      	subs	r0, #8
 8000f9e:	4084      	lsls	r4, r0
 8000fa0:	0260      	lsls	r0, r4, #9
 8000fa2:	0a40      	lsrs	r0, r0, #9
 8000fa4:	e021      	b.n	8000fea <__aeabi_ui2f+0x66>
 8000fa6:	2a99      	cmp	r2, #153	; 0x99
 8000fa8:	dd09      	ble.n	8000fbe <__aeabi_ui2f+0x3a>
 8000faa:	0003      	movs	r3, r0
 8000fac:	0021      	movs	r1, r4
 8000fae:	331b      	adds	r3, #27
 8000fb0:	4099      	lsls	r1, r3
 8000fb2:	1e4b      	subs	r3, r1, #1
 8000fb4:	4199      	sbcs	r1, r3
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	1a1b      	subs	r3, r3, r0
 8000fba:	40dc      	lsrs	r4, r3
 8000fbc:	430c      	orrs	r4, r1
 8000fbe:	2805      	cmp	r0, #5
 8000fc0:	dd01      	ble.n	8000fc6 <__aeabi_ui2f+0x42>
 8000fc2:	1f43      	subs	r3, r0, #5
 8000fc4:	409c      	lsls	r4, r3
 8000fc6:	0023      	movs	r3, r4
 8000fc8:	490d      	ldr	r1, [pc, #52]	; (8001000 <__aeabi_ui2f+0x7c>)
 8000fca:	400b      	ands	r3, r1
 8000fcc:	0765      	lsls	r5, r4, #29
 8000fce:	d009      	beq.n	8000fe4 <__aeabi_ui2f+0x60>
 8000fd0:	250f      	movs	r5, #15
 8000fd2:	402c      	ands	r4, r5
 8000fd4:	2c04      	cmp	r4, #4
 8000fd6:	d005      	beq.n	8000fe4 <__aeabi_ui2f+0x60>
 8000fd8:	3304      	adds	r3, #4
 8000fda:	015c      	lsls	r4, r3, #5
 8000fdc:	d502      	bpl.n	8000fe4 <__aeabi_ui2f+0x60>
 8000fde:	229f      	movs	r2, #159	; 0x9f
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	1a12      	subs	r2, r2, r0
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	0a58      	lsrs	r0, r3, #9
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	0240      	lsls	r0, r0, #9
 8000fec:	05d2      	lsls	r2, r2, #23
 8000fee:	0a40      	lsrs	r0, r0, #9
 8000ff0:	4310      	orrs	r0, r2
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	e7f7      	b.n	8000fea <__aeabi_ui2f+0x66>
 8000ffa:	0260      	lsls	r0, r4, #9
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	e7f4      	b.n	8000fea <__aeabi_ui2f+0x66>
 8001000:	fbffffff 	.word	0xfbffffff

08001004 <__aeabi_dadd>:
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	464f      	mov	r7, r9
 8001008:	4646      	mov	r6, r8
 800100a:	46d6      	mov	lr, sl
 800100c:	000c      	movs	r4, r1
 800100e:	0309      	lsls	r1, r1, #12
 8001010:	b5c0      	push	{r6, r7, lr}
 8001012:	0a49      	lsrs	r1, r1, #9
 8001014:	0f47      	lsrs	r7, r0, #29
 8001016:	005e      	lsls	r6, r3, #1
 8001018:	4339      	orrs	r1, r7
 800101a:	031f      	lsls	r7, r3, #12
 800101c:	0fdb      	lsrs	r3, r3, #31
 800101e:	469c      	mov	ip, r3
 8001020:	0065      	lsls	r5, r4, #1
 8001022:	0a7b      	lsrs	r3, r7, #9
 8001024:	0f57      	lsrs	r7, r2, #29
 8001026:	431f      	orrs	r7, r3
 8001028:	0d6d      	lsrs	r5, r5, #21
 800102a:	0fe4      	lsrs	r4, r4, #31
 800102c:	0d76      	lsrs	r6, r6, #21
 800102e:	46a1      	mov	r9, r4
 8001030:	00c0      	lsls	r0, r0, #3
 8001032:	46b8      	mov	r8, r7
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	1bab      	subs	r3, r5, r6
 8001038:	4564      	cmp	r4, ip
 800103a:	d07b      	beq.n	8001134 <__aeabi_dadd+0x130>
 800103c:	2b00      	cmp	r3, #0
 800103e:	dd5f      	ble.n	8001100 <__aeabi_dadd+0xfc>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d000      	beq.n	8001046 <__aeabi_dadd+0x42>
 8001044:	e0a4      	b.n	8001190 <__aeabi_dadd+0x18c>
 8001046:	003e      	movs	r6, r7
 8001048:	4316      	orrs	r6, r2
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x4a>
 800104c:	e112      	b.n	8001274 <__aeabi_dadd+0x270>
 800104e:	1e5e      	subs	r6, r3, #1
 8001050:	2e00      	cmp	r6, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_dadd+0x52>
 8001054:	e19e      	b.n	8001394 <__aeabi_dadd+0x390>
 8001056:	1a87      	subs	r7, r0, r2
 8001058:	4643      	mov	r3, r8
 800105a:	42b8      	cmp	r0, r7
 800105c:	4180      	sbcs	r0, r0
 800105e:	2501      	movs	r5, #1
 8001060:	1ac9      	subs	r1, r1, r3
 8001062:	4240      	negs	r0, r0
 8001064:	1a09      	subs	r1, r1, r0
 8001066:	020b      	lsls	r3, r1, #8
 8001068:	d400      	bmi.n	800106c <__aeabi_dadd+0x68>
 800106a:	e131      	b.n	80012d0 <__aeabi_dadd+0x2cc>
 800106c:	0249      	lsls	r1, r1, #9
 800106e:	0a4e      	lsrs	r6, r1, #9
 8001070:	2e00      	cmp	r6, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x72>
 8001074:	e16e      	b.n	8001354 <__aeabi_dadd+0x350>
 8001076:	0030      	movs	r0, r6
 8001078:	f000 ffd2 	bl	8002020 <__clzsi2>
 800107c:	0003      	movs	r3, r0
 800107e:	3b08      	subs	r3, #8
 8001080:	2b1f      	cmp	r3, #31
 8001082:	dd00      	ble.n	8001086 <__aeabi_dadd+0x82>
 8001084:	e161      	b.n	800134a <__aeabi_dadd+0x346>
 8001086:	2220      	movs	r2, #32
 8001088:	0039      	movs	r1, r7
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	409e      	lsls	r6, r3
 800108e:	40d1      	lsrs	r1, r2
 8001090:	409f      	lsls	r7, r3
 8001092:	430e      	orrs	r6, r1
 8001094:	429d      	cmp	r5, r3
 8001096:	dd00      	ble.n	800109a <__aeabi_dadd+0x96>
 8001098:	e151      	b.n	800133e <__aeabi_dadd+0x33a>
 800109a:	1b5d      	subs	r5, r3, r5
 800109c:	1c6b      	adds	r3, r5, #1
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dadd+0xa0>
 80010a2:	e17c      	b.n	800139e <__aeabi_dadd+0x39a>
 80010a4:	2120      	movs	r1, #32
 80010a6:	1ac9      	subs	r1, r1, r3
 80010a8:	003d      	movs	r5, r7
 80010aa:	0030      	movs	r0, r6
 80010ac:	408f      	lsls	r7, r1
 80010ae:	4088      	lsls	r0, r1
 80010b0:	40dd      	lsrs	r5, r3
 80010b2:	1e79      	subs	r1, r7, #1
 80010b4:	418f      	sbcs	r7, r1
 80010b6:	0031      	movs	r1, r6
 80010b8:	2207      	movs	r2, #7
 80010ba:	4328      	orrs	r0, r5
 80010bc:	40d9      	lsrs	r1, r3
 80010be:	2500      	movs	r5, #0
 80010c0:	4307      	orrs	r7, r0
 80010c2:	403a      	ands	r2, r7
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	d009      	beq.n	80010dc <__aeabi_dadd+0xd8>
 80010c8:	230f      	movs	r3, #15
 80010ca:	403b      	ands	r3, r7
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d005      	beq.n	80010dc <__aeabi_dadd+0xd8>
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	42bb      	cmp	r3, r7
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	19c9      	adds	r1, r1, r7
 80010da:	001f      	movs	r7, r3
 80010dc:	020b      	lsls	r3, r1, #8
 80010de:	d400      	bmi.n	80010e2 <__aeabi_dadd+0xde>
 80010e0:	e226      	b.n	8001530 <__aeabi_dadd+0x52c>
 80010e2:	1c6a      	adds	r2, r5, #1
 80010e4:	4bc6      	ldr	r3, [pc, #792]	; (8001400 <__aeabi_dadd+0x3fc>)
 80010e6:	0555      	lsls	r5, r2, #21
 80010e8:	0d6d      	lsrs	r5, r5, #21
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dadd+0xec>
 80010ee:	e106      	b.n	80012fe <__aeabi_dadd+0x2fa>
 80010f0:	4ac4      	ldr	r2, [pc, #784]	; (8001404 <__aeabi_dadd+0x400>)
 80010f2:	08ff      	lsrs	r7, r7, #3
 80010f4:	400a      	ands	r2, r1
 80010f6:	0753      	lsls	r3, r2, #29
 80010f8:	0252      	lsls	r2, r2, #9
 80010fa:	433b      	orrs	r3, r7
 80010fc:	0b12      	lsrs	r2, r2, #12
 80010fe:	e08e      	b.n	800121e <__aeabi_dadd+0x21a>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_dadd+0x102>
 8001104:	e0b8      	b.n	8001278 <__aeabi_dadd+0x274>
 8001106:	1c6b      	adds	r3, r5, #1
 8001108:	055b      	lsls	r3, r3, #21
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	2b01      	cmp	r3, #1
 800110e:	dc00      	bgt.n	8001112 <__aeabi_dadd+0x10e>
 8001110:	e130      	b.n	8001374 <__aeabi_dadd+0x370>
 8001112:	1a87      	subs	r7, r0, r2
 8001114:	4643      	mov	r3, r8
 8001116:	42b8      	cmp	r0, r7
 8001118:	41b6      	sbcs	r6, r6
 800111a:	1acb      	subs	r3, r1, r3
 800111c:	4276      	negs	r6, r6
 800111e:	1b9e      	subs	r6, r3, r6
 8001120:	0233      	lsls	r3, r6, #8
 8001122:	d500      	bpl.n	8001126 <__aeabi_dadd+0x122>
 8001124:	e14c      	b.n	80013c0 <__aeabi_dadd+0x3bc>
 8001126:	003b      	movs	r3, r7
 8001128:	4333      	orrs	r3, r6
 800112a:	d1a1      	bne.n	8001070 <__aeabi_dadd+0x6c>
 800112c:	2200      	movs	r2, #0
 800112e:	2400      	movs	r4, #0
 8001130:	2500      	movs	r5, #0
 8001132:	e070      	b.n	8001216 <__aeabi_dadd+0x212>
 8001134:	2b00      	cmp	r3, #0
 8001136:	dc00      	bgt.n	800113a <__aeabi_dadd+0x136>
 8001138:	e0e5      	b.n	8001306 <__aeabi_dadd+0x302>
 800113a:	2e00      	cmp	r6, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x13c>
 800113e:	e083      	b.n	8001248 <__aeabi_dadd+0x244>
 8001140:	4eaf      	ldr	r6, [pc, #700]	; (8001400 <__aeabi_dadd+0x3fc>)
 8001142:	42b5      	cmp	r5, r6
 8001144:	d060      	beq.n	8001208 <__aeabi_dadd+0x204>
 8001146:	2680      	movs	r6, #128	; 0x80
 8001148:	0436      	lsls	r6, r6, #16
 800114a:	4337      	orrs	r7, r6
 800114c:	46b8      	mov	r8, r7
 800114e:	2b38      	cmp	r3, #56	; 0x38
 8001150:	dc00      	bgt.n	8001154 <__aeabi_dadd+0x150>
 8001152:	e13e      	b.n	80013d2 <__aeabi_dadd+0x3ce>
 8001154:	4643      	mov	r3, r8
 8001156:	4313      	orrs	r3, r2
 8001158:	001f      	movs	r7, r3
 800115a:	1e7a      	subs	r2, r7, #1
 800115c:	4197      	sbcs	r7, r2
 800115e:	183f      	adds	r7, r7, r0
 8001160:	4287      	cmp	r7, r0
 8001162:	4180      	sbcs	r0, r0
 8001164:	4240      	negs	r0, r0
 8001166:	1809      	adds	r1, r1, r0
 8001168:	020b      	lsls	r3, r1, #8
 800116a:	d400      	bmi.n	800116e <__aeabi_dadd+0x16a>
 800116c:	e0b0      	b.n	80012d0 <__aeabi_dadd+0x2cc>
 800116e:	4ba4      	ldr	r3, [pc, #656]	; (8001400 <__aeabi_dadd+0x3fc>)
 8001170:	3501      	adds	r5, #1
 8001172:	429d      	cmp	r5, r3
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x174>
 8001176:	e0c3      	b.n	8001300 <__aeabi_dadd+0x2fc>
 8001178:	4aa2      	ldr	r2, [pc, #648]	; (8001404 <__aeabi_dadd+0x400>)
 800117a:	087b      	lsrs	r3, r7, #1
 800117c:	400a      	ands	r2, r1
 800117e:	2101      	movs	r1, #1
 8001180:	400f      	ands	r7, r1
 8001182:	431f      	orrs	r7, r3
 8001184:	0851      	lsrs	r1, r2, #1
 8001186:	07d3      	lsls	r3, r2, #31
 8001188:	2207      	movs	r2, #7
 800118a:	431f      	orrs	r7, r3
 800118c:	403a      	ands	r2, r7
 800118e:	e799      	b.n	80010c4 <__aeabi_dadd+0xc0>
 8001190:	4e9b      	ldr	r6, [pc, #620]	; (8001400 <__aeabi_dadd+0x3fc>)
 8001192:	42b5      	cmp	r5, r6
 8001194:	d038      	beq.n	8001208 <__aeabi_dadd+0x204>
 8001196:	2680      	movs	r6, #128	; 0x80
 8001198:	0436      	lsls	r6, r6, #16
 800119a:	4337      	orrs	r7, r6
 800119c:	46b8      	mov	r8, r7
 800119e:	2b38      	cmp	r3, #56	; 0x38
 80011a0:	dd00      	ble.n	80011a4 <__aeabi_dadd+0x1a0>
 80011a2:	e0dc      	b.n	800135e <__aeabi_dadd+0x35a>
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_dadd+0x1a6>
 80011a8:	e130      	b.n	800140c <__aeabi_dadd+0x408>
 80011aa:	001e      	movs	r6, r3
 80011ac:	4647      	mov	r7, r8
 80011ae:	3e20      	subs	r6, #32
 80011b0:	40f7      	lsrs	r7, r6
 80011b2:	46bc      	mov	ip, r7
 80011b4:	2b20      	cmp	r3, #32
 80011b6:	d004      	beq.n	80011c2 <__aeabi_dadd+0x1be>
 80011b8:	2640      	movs	r6, #64	; 0x40
 80011ba:	1af3      	subs	r3, r6, r3
 80011bc:	4646      	mov	r6, r8
 80011be:	409e      	lsls	r6, r3
 80011c0:	4332      	orrs	r2, r6
 80011c2:	0017      	movs	r7, r2
 80011c4:	4663      	mov	r3, ip
 80011c6:	1e7a      	subs	r2, r7, #1
 80011c8:	4197      	sbcs	r7, r2
 80011ca:	431f      	orrs	r7, r3
 80011cc:	e0cc      	b.n	8001368 <__aeabi_dadd+0x364>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x1d0>
 80011d2:	e204      	b.n	80015de <__aeabi_dadd+0x5da>
 80011d4:	4643      	mov	r3, r8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x1d8>
 80011da:	e159      	b.n	8001490 <__aeabi_dadd+0x48c>
 80011dc:	074b      	lsls	r3, r1, #29
 80011de:	08c0      	lsrs	r0, r0, #3
 80011e0:	4318      	orrs	r0, r3
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	08c9      	lsrs	r1, r1, #3
 80011e6:	031b      	lsls	r3, r3, #12
 80011e8:	4219      	tst	r1, r3
 80011ea:	d008      	beq.n	80011fe <__aeabi_dadd+0x1fa>
 80011ec:	4645      	mov	r5, r8
 80011ee:	08ed      	lsrs	r5, r5, #3
 80011f0:	421d      	tst	r5, r3
 80011f2:	d104      	bne.n	80011fe <__aeabi_dadd+0x1fa>
 80011f4:	4643      	mov	r3, r8
 80011f6:	08d0      	lsrs	r0, r2, #3
 80011f8:	0759      	lsls	r1, r3, #29
 80011fa:	4308      	orrs	r0, r1
 80011fc:	0029      	movs	r1, r5
 80011fe:	0f42      	lsrs	r2, r0, #29
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	4d7f      	ldr	r5, [pc, #508]	; (8001400 <__aeabi_dadd+0x3fc>)
 8001204:	4311      	orrs	r1, r2
 8001206:	00c0      	lsls	r0, r0, #3
 8001208:	074b      	lsls	r3, r1, #29
 800120a:	08ca      	lsrs	r2, r1, #3
 800120c:	497c      	ldr	r1, [pc, #496]	; (8001400 <__aeabi_dadd+0x3fc>)
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	4303      	orrs	r3, r0
 8001212:	428d      	cmp	r5, r1
 8001214:	d068      	beq.n	80012e8 <__aeabi_dadd+0x2e4>
 8001216:	0312      	lsls	r2, r2, #12
 8001218:	056d      	lsls	r5, r5, #21
 800121a:	0b12      	lsrs	r2, r2, #12
 800121c:	0d6d      	lsrs	r5, r5, #21
 800121e:	2100      	movs	r1, #0
 8001220:	0312      	lsls	r2, r2, #12
 8001222:	0018      	movs	r0, r3
 8001224:	0b13      	lsrs	r3, r2, #12
 8001226:	0d0a      	lsrs	r2, r1, #20
 8001228:	0512      	lsls	r2, r2, #20
 800122a:	431a      	orrs	r2, r3
 800122c:	4b76      	ldr	r3, [pc, #472]	; (8001408 <__aeabi_dadd+0x404>)
 800122e:	052d      	lsls	r5, r5, #20
 8001230:	4013      	ands	r3, r2
 8001232:	432b      	orrs	r3, r5
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	07e4      	lsls	r4, r4, #31
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	4323      	orrs	r3, r4
 800123c:	0019      	movs	r1, r3
 800123e:	bc1c      	pop	{r2, r3, r4}
 8001240:	4690      	mov	r8, r2
 8001242:	4699      	mov	r9, r3
 8001244:	46a2      	mov	sl, r4
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001248:	003e      	movs	r6, r7
 800124a:	4316      	orrs	r6, r2
 800124c:	d012      	beq.n	8001274 <__aeabi_dadd+0x270>
 800124e:	1e5e      	subs	r6, r3, #1
 8001250:	2e00      	cmp	r6, #0
 8001252:	d000      	beq.n	8001256 <__aeabi_dadd+0x252>
 8001254:	e100      	b.n	8001458 <__aeabi_dadd+0x454>
 8001256:	1887      	adds	r7, r0, r2
 8001258:	4287      	cmp	r7, r0
 800125a:	4180      	sbcs	r0, r0
 800125c:	4441      	add	r1, r8
 800125e:	4240      	negs	r0, r0
 8001260:	1809      	adds	r1, r1, r0
 8001262:	2501      	movs	r5, #1
 8001264:	020b      	lsls	r3, r1, #8
 8001266:	d533      	bpl.n	80012d0 <__aeabi_dadd+0x2cc>
 8001268:	2502      	movs	r5, #2
 800126a:	e785      	b.n	8001178 <__aeabi_dadd+0x174>
 800126c:	4664      	mov	r4, ip
 800126e:	0033      	movs	r3, r6
 8001270:	4641      	mov	r1, r8
 8001272:	0010      	movs	r0, r2
 8001274:	001d      	movs	r5, r3
 8001276:	e7c7      	b.n	8001208 <__aeabi_dadd+0x204>
 8001278:	2d00      	cmp	r5, #0
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x27a>
 800127c:	e0da      	b.n	8001434 <__aeabi_dadd+0x430>
 800127e:	000c      	movs	r4, r1
 8001280:	4304      	orrs	r4, r0
 8001282:	d0f3      	beq.n	800126c <__aeabi_dadd+0x268>
 8001284:	1c5c      	adds	r4, r3, #1
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x286>
 8001288:	e19f      	b.n	80015ca <__aeabi_dadd+0x5c6>
 800128a:	4c5d      	ldr	r4, [pc, #372]	; (8001400 <__aeabi_dadd+0x3fc>)
 800128c:	42a6      	cmp	r6, r4
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x28e>
 8001290:	e12f      	b.n	80014f2 <__aeabi_dadd+0x4ee>
 8001292:	43db      	mvns	r3, r3
 8001294:	2b38      	cmp	r3, #56	; 0x38
 8001296:	dd00      	ble.n	800129a <__aeabi_dadd+0x296>
 8001298:	e166      	b.n	8001568 <__aeabi_dadd+0x564>
 800129a:	2b1f      	cmp	r3, #31
 800129c:	dd00      	ble.n	80012a0 <__aeabi_dadd+0x29c>
 800129e:	e183      	b.n	80015a8 <__aeabi_dadd+0x5a4>
 80012a0:	2420      	movs	r4, #32
 80012a2:	0005      	movs	r5, r0
 80012a4:	1ae4      	subs	r4, r4, r3
 80012a6:	000f      	movs	r7, r1
 80012a8:	40dd      	lsrs	r5, r3
 80012aa:	40d9      	lsrs	r1, r3
 80012ac:	40a0      	lsls	r0, r4
 80012ae:	4643      	mov	r3, r8
 80012b0:	40a7      	lsls	r7, r4
 80012b2:	1a5b      	subs	r3, r3, r1
 80012b4:	1e44      	subs	r4, r0, #1
 80012b6:	41a0      	sbcs	r0, r4
 80012b8:	4698      	mov	r8, r3
 80012ba:	432f      	orrs	r7, r5
 80012bc:	4338      	orrs	r0, r7
 80012be:	1a17      	subs	r7, r2, r0
 80012c0:	42ba      	cmp	r2, r7
 80012c2:	4192      	sbcs	r2, r2
 80012c4:	4643      	mov	r3, r8
 80012c6:	4252      	negs	r2, r2
 80012c8:	1a99      	subs	r1, r3, r2
 80012ca:	4664      	mov	r4, ip
 80012cc:	0035      	movs	r5, r6
 80012ce:	e6ca      	b.n	8001066 <__aeabi_dadd+0x62>
 80012d0:	2207      	movs	r2, #7
 80012d2:	403a      	ands	r2, r7
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x2d6>
 80012d8:	e6f6      	b.n	80010c8 <__aeabi_dadd+0xc4>
 80012da:	074b      	lsls	r3, r1, #29
 80012dc:	08ca      	lsrs	r2, r1, #3
 80012de:	4948      	ldr	r1, [pc, #288]	; (8001400 <__aeabi_dadd+0x3fc>)
 80012e0:	08ff      	lsrs	r7, r7, #3
 80012e2:	433b      	orrs	r3, r7
 80012e4:	428d      	cmp	r5, r1
 80012e6:	d196      	bne.n	8001216 <__aeabi_dadd+0x212>
 80012e8:	0019      	movs	r1, r3
 80012ea:	4311      	orrs	r1, r2
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x2ec>
 80012ee:	e19e      	b.n	800162e <__aeabi_dadd+0x62a>
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	0309      	lsls	r1, r1, #12
 80012f4:	430a      	orrs	r2, r1
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	0b12      	lsrs	r2, r2, #12
 80012fa:	4d41      	ldr	r5, [pc, #260]	; (8001400 <__aeabi_dadd+0x3fc>)
 80012fc:	e78f      	b.n	800121e <__aeabi_dadd+0x21a>
 80012fe:	0015      	movs	r5, r2
 8001300:	2200      	movs	r2, #0
 8001302:	2300      	movs	r3, #0
 8001304:	e78b      	b.n	800121e <__aeabi_dadd+0x21a>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d000      	beq.n	800130c <__aeabi_dadd+0x308>
 800130a:	e0c7      	b.n	800149c <__aeabi_dadd+0x498>
 800130c:	1c6b      	adds	r3, r5, #1
 800130e:	055f      	lsls	r7, r3, #21
 8001310:	0d7f      	lsrs	r7, r7, #21
 8001312:	2f01      	cmp	r7, #1
 8001314:	dc00      	bgt.n	8001318 <__aeabi_dadd+0x314>
 8001316:	e0f1      	b.n	80014fc <__aeabi_dadd+0x4f8>
 8001318:	4d39      	ldr	r5, [pc, #228]	; (8001400 <__aeabi_dadd+0x3fc>)
 800131a:	42ab      	cmp	r3, r5
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x31c>
 800131e:	e0b9      	b.n	8001494 <__aeabi_dadd+0x490>
 8001320:	1885      	adds	r5, r0, r2
 8001322:	000a      	movs	r2, r1
 8001324:	4285      	cmp	r5, r0
 8001326:	4189      	sbcs	r1, r1
 8001328:	4442      	add	r2, r8
 800132a:	4249      	negs	r1, r1
 800132c:	1851      	adds	r1, r2, r1
 800132e:	2207      	movs	r2, #7
 8001330:	07cf      	lsls	r7, r1, #31
 8001332:	086d      	lsrs	r5, r5, #1
 8001334:	432f      	orrs	r7, r5
 8001336:	0849      	lsrs	r1, r1, #1
 8001338:	403a      	ands	r2, r7
 800133a:	001d      	movs	r5, r3
 800133c:	e6c2      	b.n	80010c4 <__aeabi_dadd+0xc0>
 800133e:	2207      	movs	r2, #7
 8001340:	4930      	ldr	r1, [pc, #192]	; (8001404 <__aeabi_dadd+0x400>)
 8001342:	1aed      	subs	r5, r5, r3
 8001344:	4031      	ands	r1, r6
 8001346:	403a      	ands	r2, r7
 8001348:	e6bc      	b.n	80010c4 <__aeabi_dadd+0xc0>
 800134a:	003e      	movs	r6, r7
 800134c:	3828      	subs	r0, #40	; 0x28
 800134e:	4086      	lsls	r6, r0
 8001350:	2700      	movs	r7, #0
 8001352:	e69f      	b.n	8001094 <__aeabi_dadd+0x90>
 8001354:	0038      	movs	r0, r7
 8001356:	f000 fe63 	bl	8002020 <__clzsi2>
 800135a:	3020      	adds	r0, #32
 800135c:	e68e      	b.n	800107c <__aeabi_dadd+0x78>
 800135e:	4643      	mov	r3, r8
 8001360:	4313      	orrs	r3, r2
 8001362:	001f      	movs	r7, r3
 8001364:	1e7a      	subs	r2, r7, #1
 8001366:	4197      	sbcs	r7, r2
 8001368:	1bc7      	subs	r7, r0, r7
 800136a:	42b8      	cmp	r0, r7
 800136c:	4180      	sbcs	r0, r0
 800136e:	4240      	negs	r0, r0
 8001370:	1a09      	subs	r1, r1, r0
 8001372:	e678      	b.n	8001066 <__aeabi_dadd+0x62>
 8001374:	000e      	movs	r6, r1
 8001376:	003b      	movs	r3, r7
 8001378:	4306      	orrs	r6, r0
 800137a:	4313      	orrs	r3, r2
 800137c:	2d00      	cmp	r5, #0
 800137e:	d161      	bne.n	8001444 <__aeabi_dadd+0x440>
 8001380:	2e00      	cmp	r6, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_dadd+0x382>
 8001384:	e0f4      	b.n	8001570 <__aeabi_dadd+0x56c>
 8001386:	2b00      	cmp	r3, #0
 8001388:	d100      	bne.n	800138c <__aeabi_dadd+0x388>
 800138a:	e11b      	b.n	80015c4 <__aeabi_dadd+0x5c0>
 800138c:	4664      	mov	r4, ip
 800138e:	0039      	movs	r1, r7
 8001390:	0010      	movs	r0, r2
 8001392:	e739      	b.n	8001208 <__aeabi_dadd+0x204>
 8001394:	4f1a      	ldr	r7, [pc, #104]	; (8001400 <__aeabi_dadd+0x3fc>)
 8001396:	42bb      	cmp	r3, r7
 8001398:	d07a      	beq.n	8001490 <__aeabi_dadd+0x48c>
 800139a:	0033      	movs	r3, r6
 800139c:	e6ff      	b.n	800119e <__aeabi_dadd+0x19a>
 800139e:	0030      	movs	r0, r6
 80013a0:	3d1f      	subs	r5, #31
 80013a2:	40e8      	lsrs	r0, r5
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	d003      	beq.n	80013b0 <__aeabi_dadd+0x3ac>
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	1acb      	subs	r3, r1, r3
 80013ac:	409e      	lsls	r6, r3
 80013ae:	4337      	orrs	r7, r6
 80013b0:	1e7b      	subs	r3, r7, #1
 80013b2:	419f      	sbcs	r7, r3
 80013b4:	2207      	movs	r2, #7
 80013b6:	4307      	orrs	r7, r0
 80013b8:	403a      	ands	r2, r7
 80013ba:	2100      	movs	r1, #0
 80013bc:	2500      	movs	r5, #0
 80013be:	e789      	b.n	80012d4 <__aeabi_dadd+0x2d0>
 80013c0:	1a17      	subs	r7, r2, r0
 80013c2:	4643      	mov	r3, r8
 80013c4:	42ba      	cmp	r2, r7
 80013c6:	41b6      	sbcs	r6, r6
 80013c8:	1a59      	subs	r1, r3, r1
 80013ca:	4276      	negs	r6, r6
 80013cc:	1b8e      	subs	r6, r1, r6
 80013ce:	4664      	mov	r4, ip
 80013d0:	e64e      	b.n	8001070 <__aeabi_dadd+0x6c>
 80013d2:	2b1f      	cmp	r3, #31
 80013d4:	dd00      	ble.n	80013d8 <__aeabi_dadd+0x3d4>
 80013d6:	e0ad      	b.n	8001534 <__aeabi_dadd+0x530>
 80013d8:	2620      	movs	r6, #32
 80013da:	4647      	mov	r7, r8
 80013dc:	1af6      	subs	r6, r6, r3
 80013de:	40b7      	lsls	r7, r6
 80013e0:	46b9      	mov	r9, r7
 80013e2:	0017      	movs	r7, r2
 80013e4:	46b2      	mov	sl, r6
 80013e6:	40df      	lsrs	r7, r3
 80013e8:	464e      	mov	r6, r9
 80013ea:	433e      	orrs	r6, r7
 80013ec:	0037      	movs	r7, r6
 80013ee:	4656      	mov	r6, sl
 80013f0:	40b2      	lsls	r2, r6
 80013f2:	1e56      	subs	r6, r2, #1
 80013f4:	41b2      	sbcs	r2, r6
 80013f6:	4317      	orrs	r7, r2
 80013f8:	4642      	mov	r2, r8
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	1889      	adds	r1, r1, r2
 80013fe:	e6ae      	b.n	800115e <__aeabi_dadd+0x15a>
 8001400:	000007ff 	.word	0x000007ff
 8001404:	ff7fffff 	.word	0xff7fffff
 8001408:	800fffff 	.word	0x800fffff
 800140c:	2620      	movs	r6, #32
 800140e:	4647      	mov	r7, r8
 8001410:	1af6      	subs	r6, r6, r3
 8001412:	40b7      	lsls	r7, r6
 8001414:	46b9      	mov	r9, r7
 8001416:	0017      	movs	r7, r2
 8001418:	46b2      	mov	sl, r6
 800141a:	40df      	lsrs	r7, r3
 800141c:	464e      	mov	r6, r9
 800141e:	433e      	orrs	r6, r7
 8001420:	0037      	movs	r7, r6
 8001422:	4656      	mov	r6, sl
 8001424:	40b2      	lsls	r2, r6
 8001426:	1e56      	subs	r6, r2, #1
 8001428:	41b2      	sbcs	r2, r6
 800142a:	4317      	orrs	r7, r2
 800142c:	4642      	mov	r2, r8
 800142e:	40da      	lsrs	r2, r3
 8001430:	1a89      	subs	r1, r1, r2
 8001432:	e799      	b.n	8001368 <__aeabi_dadd+0x364>
 8001434:	4c7f      	ldr	r4, [pc, #508]	; (8001634 <__aeabi_dadd+0x630>)
 8001436:	42a6      	cmp	r6, r4
 8001438:	d05b      	beq.n	80014f2 <__aeabi_dadd+0x4ee>
 800143a:	2480      	movs	r4, #128	; 0x80
 800143c:	0424      	lsls	r4, r4, #16
 800143e:	425b      	negs	r3, r3
 8001440:	4321      	orrs	r1, r4
 8001442:	e727      	b.n	8001294 <__aeabi_dadd+0x290>
 8001444:	2e00      	cmp	r6, #0
 8001446:	d10c      	bne.n	8001462 <__aeabi_dadd+0x45e>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x44a>
 800144c:	e0cb      	b.n	80015e6 <__aeabi_dadd+0x5e2>
 800144e:	4664      	mov	r4, ip
 8001450:	0039      	movs	r1, r7
 8001452:	0010      	movs	r0, r2
 8001454:	4d77      	ldr	r5, [pc, #476]	; (8001634 <__aeabi_dadd+0x630>)
 8001456:	e6d7      	b.n	8001208 <__aeabi_dadd+0x204>
 8001458:	4f76      	ldr	r7, [pc, #472]	; (8001634 <__aeabi_dadd+0x630>)
 800145a:	42bb      	cmp	r3, r7
 800145c:	d018      	beq.n	8001490 <__aeabi_dadd+0x48c>
 800145e:	0033      	movs	r3, r6
 8001460:	e675      	b.n	800114e <__aeabi_dadd+0x14a>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d014      	beq.n	8001490 <__aeabi_dadd+0x48c>
 8001466:	074b      	lsls	r3, r1, #29
 8001468:	08c0      	lsrs	r0, r0, #3
 800146a:	4318      	orrs	r0, r3
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	08c9      	lsrs	r1, r1, #3
 8001470:	031b      	lsls	r3, r3, #12
 8001472:	4219      	tst	r1, r3
 8001474:	d007      	beq.n	8001486 <__aeabi_dadd+0x482>
 8001476:	08fc      	lsrs	r4, r7, #3
 8001478:	421c      	tst	r4, r3
 800147a:	d104      	bne.n	8001486 <__aeabi_dadd+0x482>
 800147c:	0779      	lsls	r1, r7, #29
 800147e:	08d0      	lsrs	r0, r2, #3
 8001480:	4308      	orrs	r0, r1
 8001482:	46e1      	mov	r9, ip
 8001484:	0021      	movs	r1, r4
 8001486:	464c      	mov	r4, r9
 8001488:	0f42      	lsrs	r2, r0, #29
 800148a:	00c9      	lsls	r1, r1, #3
 800148c:	4311      	orrs	r1, r2
 800148e:	00c0      	lsls	r0, r0, #3
 8001490:	4d68      	ldr	r5, [pc, #416]	; (8001634 <__aeabi_dadd+0x630>)
 8001492:	e6b9      	b.n	8001208 <__aeabi_dadd+0x204>
 8001494:	001d      	movs	r5, r3
 8001496:	2200      	movs	r2, #0
 8001498:	2300      	movs	r3, #0
 800149a:	e6c0      	b.n	800121e <__aeabi_dadd+0x21a>
 800149c:	2d00      	cmp	r5, #0
 800149e:	d15b      	bne.n	8001558 <__aeabi_dadd+0x554>
 80014a0:	000d      	movs	r5, r1
 80014a2:	4305      	orrs	r5, r0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x4a4>
 80014a6:	e6e2      	b.n	800126e <__aeabi_dadd+0x26a>
 80014a8:	1c5d      	adds	r5, r3, #1
 80014aa:	d100      	bne.n	80014ae <__aeabi_dadd+0x4aa>
 80014ac:	e0b0      	b.n	8001610 <__aeabi_dadd+0x60c>
 80014ae:	4d61      	ldr	r5, [pc, #388]	; (8001634 <__aeabi_dadd+0x630>)
 80014b0:	42ae      	cmp	r6, r5
 80014b2:	d01f      	beq.n	80014f4 <__aeabi_dadd+0x4f0>
 80014b4:	43db      	mvns	r3, r3
 80014b6:	2b38      	cmp	r3, #56	; 0x38
 80014b8:	dc71      	bgt.n	800159e <__aeabi_dadd+0x59a>
 80014ba:	2b1f      	cmp	r3, #31
 80014bc:	dd00      	ble.n	80014c0 <__aeabi_dadd+0x4bc>
 80014be:	e096      	b.n	80015ee <__aeabi_dadd+0x5ea>
 80014c0:	2520      	movs	r5, #32
 80014c2:	000f      	movs	r7, r1
 80014c4:	1aed      	subs	r5, r5, r3
 80014c6:	40af      	lsls	r7, r5
 80014c8:	46b9      	mov	r9, r7
 80014ca:	0007      	movs	r7, r0
 80014cc:	46aa      	mov	sl, r5
 80014ce:	40df      	lsrs	r7, r3
 80014d0:	464d      	mov	r5, r9
 80014d2:	433d      	orrs	r5, r7
 80014d4:	002f      	movs	r7, r5
 80014d6:	4655      	mov	r5, sl
 80014d8:	40a8      	lsls	r0, r5
 80014da:	40d9      	lsrs	r1, r3
 80014dc:	1e45      	subs	r5, r0, #1
 80014de:	41a8      	sbcs	r0, r5
 80014e0:	4488      	add	r8, r1
 80014e2:	4307      	orrs	r7, r0
 80014e4:	18bf      	adds	r7, r7, r2
 80014e6:	4297      	cmp	r7, r2
 80014e8:	4192      	sbcs	r2, r2
 80014ea:	4251      	negs	r1, r2
 80014ec:	4441      	add	r1, r8
 80014ee:	0035      	movs	r5, r6
 80014f0:	e63a      	b.n	8001168 <__aeabi_dadd+0x164>
 80014f2:	4664      	mov	r4, ip
 80014f4:	0035      	movs	r5, r6
 80014f6:	4641      	mov	r1, r8
 80014f8:	0010      	movs	r0, r2
 80014fa:	e685      	b.n	8001208 <__aeabi_dadd+0x204>
 80014fc:	000b      	movs	r3, r1
 80014fe:	4303      	orrs	r3, r0
 8001500:	2d00      	cmp	r5, #0
 8001502:	d000      	beq.n	8001506 <__aeabi_dadd+0x502>
 8001504:	e663      	b.n	80011ce <__aeabi_dadd+0x1ca>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f5      	beq.n	80014f6 <__aeabi_dadd+0x4f2>
 800150a:	4643      	mov	r3, r8
 800150c:	4313      	orrs	r3, r2
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x50e>
 8001510:	e67a      	b.n	8001208 <__aeabi_dadd+0x204>
 8001512:	1887      	adds	r7, r0, r2
 8001514:	4287      	cmp	r7, r0
 8001516:	4180      	sbcs	r0, r0
 8001518:	2207      	movs	r2, #7
 800151a:	4441      	add	r1, r8
 800151c:	4240      	negs	r0, r0
 800151e:	1809      	adds	r1, r1, r0
 8001520:	403a      	ands	r2, r7
 8001522:	020b      	lsls	r3, r1, #8
 8001524:	d400      	bmi.n	8001528 <__aeabi_dadd+0x524>
 8001526:	e6d5      	b.n	80012d4 <__aeabi_dadd+0x2d0>
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <__aeabi_dadd+0x634>)
 800152a:	3501      	adds	r5, #1
 800152c:	4019      	ands	r1, r3
 800152e:	e5c9      	b.n	80010c4 <__aeabi_dadd+0xc0>
 8001530:	0038      	movs	r0, r7
 8001532:	e669      	b.n	8001208 <__aeabi_dadd+0x204>
 8001534:	001e      	movs	r6, r3
 8001536:	4647      	mov	r7, r8
 8001538:	3e20      	subs	r6, #32
 800153a:	40f7      	lsrs	r7, r6
 800153c:	46bc      	mov	ip, r7
 800153e:	2b20      	cmp	r3, #32
 8001540:	d004      	beq.n	800154c <__aeabi_dadd+0x548>
 8001542:	2640      	movs	r6, #64	; 0x40
 8001544:	1af3      	subs	r3, r6, r3
 8001546:	4646      	mov	r6, r8
 8001548:	409e      	lsls	r6, r3
 800154a:	4332      	orrs	r2, r6
 800154c:	0017      	movs	r7, r2
 800154e:	4663      	mov	r3, ip
 8001550:	1e7a      	subs	r2, r7, #1
 8001552:	4197      	sbcs	r7, r2
 8001554:	431f      	orrs	r7, r3
 8001556:	e602      	b.n	800115e <__aeabi_dadd+0x15a>
 8001558:	4d36      	ldr	r5, [pc, #216]	; (8001634 <__aeabi_dadd+0x630>)
 800155a:	42ae      	cmp	r6, r5
 800155c:	d0ca      	beq.n	80014f4 <__aeabi_dadd+0x4f0>
 800155e:	2580      	movs	r5, #128	; 0x80
 8001560:	042d      	lsls	r5, r5, #16
 8001562:	425b      	negs	r3, r3
 8001564:	4329      	orrs	r1, r5
 8001566:	e7a6      	b.n	80014b6 <__aeabi_dadd+0x4b2>
 8001568:	4308      	orrs	r0, r1
 800156a:	1e41      	subs	r1, r0, #1
 800156c:	4188      	sbcs	r0, r1
 800156e:	e6a6      	b.n	80012be <__aeabi_dadd+0x2ba>
 8001570:	2b00      	cmp	r3, #0
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x572>
 8001574:	e648      	b.n	8001208 <__aeabi_dadd+0x204>
 8001576:	1a87      	subs	r7, r0, r2
 8001578:	4643      	mov	r3, r8
 800157a:	42b8      	cmp	r0, r7
 800157c:	41b6      	sbcs	r6, r6
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	4276      	negs	r6, r6
 8001582:	1b9e      	subs	r6, r3, r6
 8001584:	0233      	lsls	r3, r6, #8
 8001586:	d54b      	bpl.n	8001620 <__aeabi_dadd+0x61c>
 8001588:	1a17      	subs	r7, r2, r0
 800158a:	4643      	mov	r3, r8
 800158c:	42ba      	cmp	r2, r7
 800158e:	4192      	sbcs	r2, r2
 8001590:	1a59      	subs	r1, r3, r1
 8001592:	4252      	negs	r2, r2
 8001594:	1a89      	subs	r1, r1, r2
 8001596:	2207      	movs	r2, #7
 8001598:	4664      	mov	r4, ip
 800159a:	403a      	ands	r2, r7
 800159c:	e592      	b.n	80010c4 <__aeabi_dadd+0xc0>
 800159e:	4301      	orrs	r1, r0
 80015a0:	000f      	movs	r7, r1
 80015a2:	1e79      	subs	r1, r7, #1
 80015a4:	418f      	sbcs	r7, r1
 80015a6:	e79d      	b.n	80014e4 <__aeabi_dadd+0x4e0>
 80015a8:	001c      	movs	r4, r3
 80015aa:	000f      	movs	r7, r1
 80015ac:	3c20      	subs	r4, #32
 80015ae:	40e7      	lsrs	r7, r4
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d003      	beq.n	80015bc <__aeabi_dadd+0x5b8>
 80015b4:	2440      	movs	r4, #64	; 0x40
 80015b6:	1ae3      	subs	r3, r4, r3
 80015b8:	4099      	lsls	r1, r3
 80015ba:	4308      	orrs	r0, r1
 80015bc:	1e41      	subs	r1, r0, #1
 80015be:	4188      	sbcs	r0, r1
 80015c0:	4338      	orrs	r0, r7
 80015c2:	e67c      	b.n	80012be <__aeabi_dadd+0x2ba>
 80015c4:	2200      	movs	r2, #0
 80015c6:	2400      	movs	r4, #0
 80015c8:	e625      	b.n	8001216 <__aeabi_dadd+0x212>
 80015ca:	1a17      	subs	r7, r2, r0
 80015cc:	4643      	mov	r3, r8
 80015ce:	42ba      	cmp	r2, r7
 80015d0:	4192      	sbcs	r2, r2
 80015d2:	1a59      	subs	r1, r3, r1
 80015d4:	4252      	negs	r2, r2
 80015d6:	1a89      	subs	r1, r1, r2
 80015d8:	4664      	mov	r4, ip
 80015da:	0035      	movs	r5, r6
 80015dc:	e543      	b.n	8001066 <__aeabi_dadd+0x62>
 80015de:	4641      	mov	r1, r8
 80015e0:	0010      	movs	r0, r2
 80015e2:	4d14      	ldr	r5, [pc, #80]	; (8001634 <__aeabi_dadd+0x630>)
 80015e4:	e610      	b.n	8001208 <__aeabi_dadd+0x204>
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	2400      	movs	r4, #0
 80015ea:	0312      	lsls	r2, r2, #12
 80015ec:	e680      	b.n	80012f0 <__aeabi_dadd+0x2ec>
 80015ee:	001d      	movs	r5, r3
 80015f0:	000f      	movs	r7, r1
 80015f2:	3d20      	subs	r5, #32
 80015f4:	40ef      	lsrs	r7, r5
 80015f6:	46bc      	mov	ip, r7
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d003      	beq.n	8001604 <__aeabi_dadd+0x600>
 80015fc:	2540      	movs	r5, #64	; 0x40
 80015fe:	1aeb      	subs	r3, r5, r3
 8001600:	4099      	lsls	r1, r3
 8001602:	4308      	orrs	r0, r1
 8001604:	0007      	movs	r7, r0
 8001606:	4663      	mov	r3, ip
 8001608:	1e78      	subs	r0, r7, #1
 800160a:	4187      	sbcs	r7, r0
 800160c:	431f      	orrs	r7, r3
 800160e:	e769      	b.n	80014e4 <__aeabi_dadd+0x4e0>
 8001610:	1887      	adds	r7, r0, r2
 8001612:	4297      	cmp	r7, r2
 8001614:	419b      	sbcs	r3, r3
 8001616:	4441      	add	r1, r8
 8001618:	425b      	negs	r3, r3
 800161a:	18c9      	adds	r1, r1, r3
 800161c:	0035      	movs	r5, r6
 800161e:	e5a3      	b.n	8001168 <__aeabi_dadd+0x164>
 8001620:	003b      	movs	r3, r7
 8001622:	4333      	orrs	r3, r6
 8001624:	d0ce      	beq.n	80015c4 <__aeabi_dadd+0x5c0>
 8001626:	2207      	movs	r2, #7
 8001628:	0031      	movs	r1, r6
 800162a:	403a      	ands	r2, r7
 800162c:	e652      	b.n	80012d4 <__aeabi_dadd+0x2d0>
 800162e:	2300      	movs	r3, #0
 8001630:	001a      	movs	r2, r3
 8001632:	e5f4      	b.n	800121e <__aeabi_dadd+0x21a>
 8001634:	000007ff 	.word	0x000007ff
 8001638:	ff7fffff 	.word	0xff7fffff

0800163c <__eqdf2>:
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	464f      	mov	r7, r9
 8001640:	4646      	mov	r6, r8
 8001642:	46d6      	mov	lr, sl
 8001644:	4684      	mov	ip, r0
 8001646:	b5c0      	push	{r6, r7, lr}
 8001648:	4680      	mov	r8, r0
 800164a:	4e19      	ldr	r6, [pc, #100]	; (80016b0 <__eqdf2+0x74>)
 800164c:	0318      	lsls	r0, r3, #12
 800164e:	030f      	lsls	r7, r1, #12
 8001650:	004d      	lsls	r5, r1, #1
 8001652:	0b00      	lsrs	r0, r0, #12
 8001654:	005c      	lsls	r4, r3, #1
 8001656:	4682      	mov	sl, r0
 8001658:	0b3f      	lsrs	r7, r7, #12
 800165a:	0d6d      	lsrs	r5, r5, #21
 800165c:	0fc9      	lsrs	r1, r1, #31
 800165e:	4691      	mov	r9, r2
 8001660:	0d64      	lsrs	r4, r4, #21
 8001662:	0fdb      	lsrs	r3, r3, #31
 8001664:	2001      	movs	r0, #1
 8001666:	42b5      	cmp	r5, r6
 8001668:	d00a      	beq.n	8001680 <__eqdf2+0x44>
 800166a:	42b4      	cmp	r4, r6
 800166c:	d003      	beq.n	8001676 <__eqdf2+0x3a>
 800166e:	42a5      	cmp	r5, r4
 8001670:	d101      	bne.n	8001676 <__eqdf2+0x3a>
 8001672:	4557      	cmp	r7, sl
 8001674:	d00c      	beq.n	8001690 <__eqdf2+0x54>
 8001676:	bc1c      	pop	{r2, r3, r4}
 8001678:	4690      	mov	r8, r2
 800167a:	4699      	mov	r9, r3
 800167c:	46a2      	mov	sl, r4
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	4666      	mov	r6, ip
 8001682:	433e      	orrs	r6, r7
 8001684:	d1f7      	bne.n	8001676 <__eqdf2+0x3a>
 8001686:	42ac      	cmp	r4, r5
 8001688:	d1f5      	bne.n	8001676 <__eqdf2+0x3a>
 800168a:	4654      	mov	r4, sl
 800168c:	4314      	orrs	r4, r2
 800168e:	d1f2      	bne.n	8001676 <__eqdf2+0x3a>
 8001690:	2001      	movs	r0, #1
 8001692:	45c8      	cmp	r8, r9
 8001694:	d1ef      	bne.n	8001676 <__eqdf2+0x3a>
 8001696:	4299      	cmp	r1, r3
 8001698:	d007      	beq.n	80016aa <__eqdf2+0x6e>
 800169a:	2d00      	cmp	r5, #0
 800169c:	d1eb      	bne.n	8001676 <__eqdf2+0x3a>
 800169e:	4663      	mov	r3, ip
 80016a0:	431f      	orrs	r7, r3
 80016a2:	0038      	movs	r0, r7
 80016a4:	1e47      	subs	r7, r0, #1
 80016a6:	41b8      	sbcs	r0, r7
 80016a8:	e7e5      	b.n	8001676 <__eqdf2+0x3a>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7e3      	b.n	8001676 <__eqdf2+0x3a>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff

080016b4 <__gedf2>:
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	464f      	mov	r7, r9
 80016b8:	4646      	mov	r6, r8
 80016ba:	46d6      	mov	lr, sl
 80016bc:	004d      	lsls	r5, r1, #1
 80016be:	b5c0      	push	{r6, r7, lr}
 80016c0:	030e      	lsls	r6, r1, #12
 80016c2:	0fc9      	lsrs	r1, r1, #31
 80016c4:	468a      	mov	sl, r1
 80016c6:	492c      	ldr	r1, [pc, #176]	; (8001778 <__gedf2+0xc4>)
 80016c8:	031f      	lsls	r7, r3, #12
 80016ca:	005c      	lsls	r4, r3, #1
 80016cc:	4680      	mov	r8, r0
 80016ce:	0b36      	lsrs	r6, r6, #12
 80016d0:	0d6d      	lsrs	r5, r5, #21
 80016d2:	4691      	mov	r9, r2
 80016d4:	0b3f      	lsrs	r7, r7, #12
 80016d6:	0d64      	lsrs	r4, r4, #21
 80016d8:	0fdb      	lsrs	r3, r3, #31
 80016da:	428d      	cmp	r5, r1
 80016dc:	d01e      	beq.n	800171c <__gedf2+0x68>
 80016de:	428c      	cmp	r4, r1
 80016e0:	d016      	beq.n	8001710 <__gedf2+0x5c>
 80016e2:	2d00      	cmp	r5, #0
 80016e4:	d11e      	bne.n	8001724 <__gedf2+0x70>
 80016e6:	4330      	orrs	r0, r6
 80016e8:	4684      	mov	ip, r0
 80016ea:	2c00      	cmp	r4, #0
 80016ec:	d101      	bne.n	80016f2 <__gedf2+0x3e>
 80016ee:	433a      	orrs	r2, r7
 80016f0:	d023      	beq.n	800173a <__gedf2+0x86>
 80016f2:	4662      	mov	r2, ip
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d01a      	beq.n	800172e <__gedf2+0x7a>
 80016f8:	459a      	cmp	sl, r3
 80016fa:	d029      	beq.n	8001750 <__gedf2+0x9c>
 80016fc:	4651      	mov	r1, sl
 80016fe:	2002      	movs	r0, #2
 8001700:	3901      	subs	r1, #1
 8001702:	4008      	ands	r0, r1
 8001704:	3801      	subs	r0, #1
 8001706:	bc1c      	pop	{r2, r3, r4}
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	46a2      	mov	sl, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	0039      	movs	r1, r7
 8001712:	4311      	orrs	r1, r2
 8001714:	d0e5      	beq.n	80016e2 <__gedf2+0x2e>
 8001716:	2002      	movs	r0, #2
 8001718:	4240      	negs	r0, r0
 800171a:	e7f4      	b.n	8001706 <__gedf2+0x52>
 800171c:	4330      	orrs	r0, r6
 800171e:	d1fa      	bne.n	8001716 <__gedf2+0x62>
 8001720:	42ac      	cmp	r4, r5
 8001722:	d00f      	beq.n	8001744 <__gedf2+0x90>
 8001724:	2c00      	cmp	r4, #0
 8001726:	d10f      	bne.n	8001748 <__gedf2+0x94>
 8001728:	433a      	orrs	r2, r7
 800172a:	d0e7      	beq.n	80016fc <__gedf2+0x48>
 800172c:	e00c      	b.n	8001748 <__gedf2+0x94>
 800172e:	2201      	movs	r2, #1
 8001730:	3b01      	subs	r3, #1
 8001732:	4393      	bics	r3, r2
 8001734:	0018      	movs	r0, r3
 8001736:	3001      	adds	r0, #1
 8001738:	e7e5      	b.n	8001706 <__gedf2+0x52>
 800173a:	4663      	mov	r3, ip
 800173c:	2000      	movs	r0, #0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0e1      	beq.n	8001706 <__gedf2+0x52>
 8001742:	e7db      	b.n	80016fc <__gedf2+0x48>
 8001744:	433a      	orrs	r2, r7
 8001746:	d1e6      	bne.n	8001716 <__gedf2+0x62>
 8001748:	459a      	cmp	sl, r3
 800174a:	d1d7      	bne.n	80016fc <__gedf2+0x48>
 800174c:	42a5      	cmp	r5, r4
 800174e:	dcd5      	bgt.n	80016fc <__gedf2+0x48>
 8001750:	42a5      	cmp	r5, r4
 8001752:	db05      	blt.n	8001760 <__gedf2+0xac>
 8001754:	42be      	cmp	r6, r7
 8001756:	d8d1      	bhi.n	80016fc <__gedf2+0x48>
 8001758:	d008      	beq.n	800176c <__gedf2+0xb8>
 800175a:	2000      	movs	r0, #0
 800175c:	42be      	cmp	r6, r7
 800175e:	d2d2      	bcs.n	8001706 <__gedf2+0x52>
 8001760:	4650      	mov	r0, sl
 8001762:	2301      	movs	r3, #1
 8001764:	3801      	subs	r0, #1
 8001766:	4398      	bics	r0, r3
 8001768:	3001      	adds	r0, #1
 800176a:	e7cc      	b.n	8001706 <__gedf2+0x52>
 800176c:	45c8      	cmp	r8, r9
 800176e:	d8c5      	bhi.n	80016fc <__gedf2+0x48>
 8001770:	2000      	movs	r0, #0
 8001772:	45c8      	cmp	r8, r9
 8001774:	d3f4      	bcc.n	8001760 <__gedf2+0xac>
 8001776:	e7c6      	b.n	8001706 <__gedf2+0x52>
 8001778:	000007ff 	.word	0x000007ff

0800177c <__ledf2>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	464f      	mov	r7, r9
 8001780:	4646      	mov	r6, r8
 8001782:	46d6      	mov	lr, sl
 8001784:	004d      	lsls	r5, r1, #1
 8001786:	b5c0      	push	{r6, r7, lr}
 8001788:	030e      	lsls	r6, r1, #12
 800178a:	0fc9      	lsrs	r1, r1, #31
 800178c:	468a      	mov	sl, r1
 800178e:	492e      	ldr	r1, [pc, #184]	; (8001848 <__ledf2+0xcc>)
 8001790:	031f      	lsls	r7, r3, #12
 8001792:	005c      	lsls	r4, r3, #1
 8001794:	4680      	mov	r8, r0
 8001796:	0b36      	lsrs	r6, r6, #12
 8001798:	0d6d      	lsrs	r5, r5, #21
 800179a:	4691      	mov	r9, r2
 800179c:	0b3f      	lsrs	r7, r7, #12
 800179e:	0d64      	lsrs	r4, r4, #21
 80017a0:	0fdb      	lsrs	r3, r3, #31
 80017a2:	428d      	cmp	r5, r1
 80017a4:	d018      	beq.n	80017d8 <__ledf2+0x5c>
 80017a6:	428c      	cmp	r4, r1
 80017a8:	d011      	beq.n	80017ce <__ledf2+0x52>
 80017aa:	2d00      	cmp	r5, #0
 80017ac:	d118      	bne.n	80017e0 <__ledf2+0x64>
 80017ae:	4330      	orrs	r0, r6
 80017b0:	4684      	mov	ip, r0
 80017b2:	2c00      	cmp	r4, #0
 80017b4:	d11e      	bne.n	80017f4 <__ledf2+0x78>
 80017b6:	433a      	orrs	r2, r7
 80017b8:	d11c      	bne.n	80017f4 <__ledf2+0x78>
 80017ba:	4663      	mov	r3, ip
 80017bc:	2000      	movs	r0, #0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d030      	beq.n	8001824 <__ledf2+0xa8>
 80017c2:	4651      	mov	r1, sl
 80017c4:	2002      	movs	r0, #2
 80017c6:	3901      	subs	r1, #1
 80017c8:	4008      	ands	r0, r1
 80017ca:	3801      	subs	r0, #1
 80017cc:	e02a      	b.n	8001824 <__ledf2+0xa8>
 80017ce:	0039      	movs	r1, r7
 80017d0:	4311      	orrs	r1, r2
 80017d2:	d0ea      	beq.n	80017aa <__ledf2+0x2e>
 80017d4:	2002      	movs	r0, #2
 80017d6:	e025      	b.n	8001824 <__ledf2+0xa8>
 80017d8:	4330      	orrs	r0, r6
 80017da:	d1fb      	bne.n	80017d4 <__ledf2+0x58>
 80017dc:	42ac      	cmp	r4, r5
 80017de:	d026      	beq.n	800182e <__ledf2+0xb2>
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d126      	bne.n	8001832 <__ledf2+0xb6>
 80017e4:	433a      	orrs	r2, r7
 80017e6:	d124      	bne.n	8001832 <__ledf2+0xb6>
 80017e8:	4651      	mov	r1, sl
 80017ea:	2002      	movs	r0, #2
 80017ec:	3901      	subs	r1, #1
 80017ee:	4008      	ands	r0, r1
 80017f0:	3801      	subs	r0, #1
 80017f2:	e017      	b.n	8001824 <__ledf2+0xa8>
 80017f4:	4662      	mov	r2, ip
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d00f      	beq.n	800181a <__ledf2+0x9e>
 80017fa:	459a      	cmp	sl, r3
 80017fc:	d1e1      	bne.n	80017c2 <__ledf2+0x46>
 80017fe:	42a5      	cmp	r5, r4
 8001800:	db05      	blt.n	800180e <__ledf2+0x92>
 8001802:	42be      	cmp	r6, r7
 8001804:	d8dd      	bhi.n	80017c2 <__ledf2+0x46>
 8001806:	d019      	beq.n	800183c <__ledf2+0xc0>
 8001808:	2000      	movs	r0, #0
 800180a:	42be      	cmp	r6, r7
 800180c:	d20a      	bcs.n	8001824 <__ledf2+0xa8>
 800180e:	4650      	mov	r0, sl
 8001810:	2301      	movs	r3, #1
 8001812:	3801      	subs	r0, #1
 8001814:	4398      	bics	r0, r3
 8001816:	3001      	adds	r0, #1
 8001818:	e004      	b.n	8001824 <__ledf2+0xa8>
 800181a:	2201      	movs	r2, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	4393      	bics	r3, r2
 8001820:	0018      	movs	r0, r3
 8001822:	3001      	adds	r0, #1
 8001824:	bc1c      	pop	{r2, r3, r4}
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	46a2      	mov	sl, r4
 800182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182e:	433a      	orrs	r2, r7
 8001830:	d1d0      	bne.n	80017d4 <__ledf2+0x58>
 8001832:	459a      	cmp	sl, r3
 8001834:	d1c5      	bne.n	80017c2 <__ledf2+0x46>
 8001836:	42a5      	cmp	r5, r4
 8001838:	dcc3      	bgt.n	80017c2 <__ledf2+0x46>
 800183a:	e7e0      	b.n	80017fe <__ledf2+0x82>
 800183c:	45c8      	cmp	r8, r9
 800183e:	d8c0      	bhi.n	80017c2 <__ledf2+0x46>
 8001840:	2000      	movs	r0, #0
 8001842:	45c8      	cmp	r8, r9
 8001844:	d3e3      	bcc.n	800180e <__ledf2+0x92>
 8001846:	e7ed      	b.n	8001824 <__ledf2+0xa8>
 8001848:	000007ff 	.word	0x000007ff

0800184c <__aeabi_dmul>:
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	4657      	mov	r7, sl
 8001850:	46de      	mov	lr, fp
 8001852:	464e      	mov	r6, r9
 8001854:	4645      	mov	r5, r8
 8001856:	b5e0      	push	{r5, r6, r7, lr}
 8001858:	4683      	mov	fp, r0
 800185a:	0006      	movs	r6, r0
 800185c:	030f      	lsls	r7, r1, #12
 800185e:	0048      	lsls	r0, r1, #1
 8001860:	b087      	sub	sp, #28
 8001862:	4692      	mov	sl, r2
 8001864:	001d      	movs	r5, r3
 8001866:	0b3f      	lsrs	r7, r7, #12
 8001868:	0d40      	lsrs	r0, r0, #21
 800186a:	0fcc      	lsrs	r4, r1, #31
 800186c:	2800      	cmp	r0, #0
 800186e:	d100      	bne.n	8001872 <__aeabi_dmul+0x26>
 8001870:	e06f      	b.n	8001952 <__aeabi_dmul+0x106>
 8001872:	4bde      	ldr	r3, [pc, #888]	; (8001bec <__aeabi_dmul+0x3a0>)
 8001874:	4298      	cmp	r0, r3
 8001876:	d038      	beq.n	80018ea <__aeabi_dmul+0x9e>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	00ff      	lsls	r7, r7, #3
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431f      	orrs	r7, r3
 8001880:	0f73      	lsrs	r3, r6, #29
 8001882:	433b      	orrs	r3, r7
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	4bda      	ldr	r3, [pc, #872]	; (8001bf0 <__aeabi_dmul+0x3a4>)
 8001888:	2700      	movs	r7, #0
 800188a:	4699      	mov	r9, r3
 800188c:	2300      	movs	r3, #0
 800188e:	469b      	mov	fp, r3
 8001890:	00f6      	lsls	r6, r6, #3
 8001892:	4481      	add	r9, r0
 8001894:	032b      	lsls	r3, r5, #12
 8001896:	0069      	lsls	r1, r5, #1
 8001898:	0b1b      	lsrs	r3, r3, #12
 800189a:	4652      	mov	r2, sl
 800189c:	4698      	mov	r8, r3
 800189e:	0d49      	lsrs	r1, r1, #21
 80018a0:	0fed      	lsrs	r5, r5, #31
 80018a2:	2900      	cmp	r1, #0
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dmul+0x5c>
 80018a6:	e085      	b.n	80019b4 <__aeabi_dmul+0x168>
 80018a8:	4bd0      	ldr	r3, [pc, #832]	; (8001bec <__aeabi_dmul+0x3a0>)
 80018aa:	4299      	cmp	r1, r3
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x64>
 80018ae:	e073      	b.n	8001998 <__aeabi_dmul+0x14c>
 80018b0:	4643      	mov	r3, r8
 80018b2:	00da      	lsls	r2, r3, #3
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	4313      	orrs	r3, r2
 80018ba:	4652      	mov	r2, sl
 80018bc:	48cc      	ldr	r0, [pc, #816]	; (8001bf0 <__aeabi_dmul+0x3a4>)
 80018be:	0f52      	lsrs	r2, r2, #29
 80018c0:	4684      	mov	ip, r0
 80018c2:	4313      	orrs	r3, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	2000      	movs	r0, #0
 80018c8:	4461      	add	r1, ip
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	4489      	add	r9, r1
 80018ce:	0021      	movs	r1, r4
 80018d0:	4069      	eors	r1, r5
 80018d2:	9100      	str	r1, [sp, #0]
 80018d4:	468c      	mov	ip, r1
 80018d6:	2101      	movs	r1, #1
 80018d8:	4449      	add	r1, r9
 80018da:	468a      	mov	sl, r1
 80018dc:	2f0f      	cmp	r7, #15
 80018de:	d900      	bls.n	80018e2 <__aeabi_dmul+0x96>
 80018e0:	e090      	b.n	8001a04 <__aeabi_dmul+0x1b8>
 80018e2:	49c4      	ldr	r1, [pc, #784]	; (8001bf4 <__aeabi_dmul+0x3a8>)
 80018e4:	00bf      	lsls	r7, r7, #2
 80018e6:	59cf      	ldr	r7, [r1, r7]
 80018e8:	46bf      	mov	pc, r7
 80018ea:	465b      	mov	r3, fp
 80018ec:	433b      	orrs	r3, r7
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	d000      	beq.n	80018f4 <__aeabi_dmul+0xa8>
 80018f2:	e16a      	b.n	8001bca <__aeabi_dmul+0x37e>
 80018f4:	2302      	movs	r3, #2
 80018f6:	2708      	movs	r7, #8
 80018f8:	2600      	movs	r6, #0
 80018fa:	4681      	mov	r9, r0
 80018fc:	469b      	mov	fp, r3
 80018fe:	e7c9      	b.n	8001894 <__aeabi_dmul+0x48>
 8001900:	0032      	movs	r2, r6
 8001902:	4658      	mov	r0, fp
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	4661      	mov	r1, ip
 8001908:	9100      	str	r1, [sp, #0]
 800190a:	2802      	cmp	r0, #2
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0xc4>
 800190e:	e075      	b.n	80019fc <__aeabi_dmul+0x1b0>
 8001910:	2803      	cmp	r0, #3
 8001912:	d100      	bne.n	8001916 <__aeabi_dmul+0xca>
 8001914:	e1fe      	b.n	8001d14 <__aeabi_dmul+0x4c8>
 8001916:	2801      	cmp	r0, #1
 8001918:	d000      	beq.n	800191c <__aeabi_dmul+0xd0>
 800191a:	e12c      	b.n	8001b76 <__aeabi_dmul+0x32a>
 800191c:	2300      	movs	r3, #0
 800191e:	2700      	movs	r7, #0
 8001920:	2600      	movs	r6, #0
 8001922:	2500      	movs	r5, #0
 8001924:	033f      	lsls	r7, r7, #12
 8001926:	0d2a      	lsrs	r2, r5, #20
 8001928:	0b3f      	lsrs	r7, r7, #12
 800192a:	48b3      	ldr	r0, [pc, #716]	; (8001bf8 <__aeabi_dmul+0x3ac>)
 800192c:	0512      	lsls	r2, r2, #20
 800192e:	433a      	orrs	r2, r7
 8001930:	4002      	ands	r2, r0
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	4313      	orrs	r3, r2
 8001936:	9a00      	ldr	r2, [sp, #0]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	07d1      	lsls	r1, r2, #31
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	430b      	orrs	r3, r1
 8001940:	0030      	movs	r0, r6
 8001942:	0019      	movs	r1, r3
 8001944:	b007      	add	sp, #28
 8001946:	bc3c      	pop	{r2, r3, r4, r5}
 8001948:	4690      	mov	r8, r2
 800194a:	4699      	mov	r9, r3
 800194c:	46a2      	mov	sl, r4
 800194e:	46ab      	mov	fp, r5
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	465b      	mov	r3, fp
 8001954:	433b      	orrs	r3, r7
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	d100      	bne.n	800195c <__aeabi_dmul+0x110>
 800195a:	e12f      	b.n	8001bbc <__aeabi_dmul+0x370>
 800195c:	2f00      	cmp	r7, #0
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x116>
 8001960:	e1a5      	b.n	8001cae <__aeabi_dmul+0x462>
 8001962:	0038      	movs	r0, r7
 8001964:	f000 fb5c 	bl	8002020 <__clzsi2>
 8001968:	0003      	movs	r3, r0
 800196a:	3b0b      	subs	r3, #11
 800196c:	2b1c      	cmp	r3, #28
 800196e:	dd00      	ble.n	8001972 <__aeabi_dmul+0x126>
 8001970:	e196      	b.n	8001ca0 <__aeabi_dmul+0x454>
 8001972:	221d      	movs	r2, #29
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	465a      	mov	r2, fp
 8001978:	0001      	movs	r1, r0
 800197a:	40da      	lsrs	r2, r3
 800197c:	465e      	mov	r6, fp
 800197e:	3908      	subs	r1, #8
 8001980:	408f      	lsls	r7, r1
 8001982:	0013      	movs	r3, r2
 8001984:	408e      	lsls	r6, r1
 8001986:	433b      	orrs	r3, r7
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	4b9c      	ldr	r3, [pc, #624]	; (8001bfc <__aeabi_dmul+0x3b0>)
 800198c:	2700      	movs	r7, #0
 800198e:	1a1b      	subs	r3, r3, r0
 8001990:	4699      	mov	r9, r3
 8001992:	2300      	movs	r3, #0
 8001994:	469b      	mov	fp, r3
 8001996:	e77d      	b.n	8001894 <__aeabi_dmul+0x48>
 8001998:	4641      	mov	r1, r8
 800199a:	4653      	mov	r3, sl
 800199c:	430b      	orrs	r3, r1
 800199e:	4993      	ldr	r1, [pc, #588]	; (8001bec <__aeabi_dmul+0x3a0>)
 80019a0:	468c      	mov	ip, r1
 80019a2:	44e1      	add	r9, ip
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d000      	beq.n	80019aa <__aeabi_dmul+0x15e>
 80019a8:	e11a      	b.n	8001be0 <__aeabi_dmul+0x394>
 80019aa:	2202      	movs	r2, #2
 80019ac:	2002      	movs	r0, #2
 80019ae:	4317      	orrs	r7, r2
 80019b0:	2200      	movs	r2, #0
 80019b2:	e78c      	b.n	80018ce <__aeabi_dmul+0x82>
 80019b4:	4313      	orrs	r3, r2
 80019b6:	d100      	bne.n	80019ba <__aeabi_dmul+0x16e>
 80019b8:	e10d      	b.n	8001bd6 <__aeabi_dmul+0x38a>
 80019ba:	4643      	mov	r3, r8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d100      	bne.n	80019c2 <__aeabi_dmul+0x176>
 80019c0:	e181      	b.n	8001cc6 <__aeabi_dmul+0x47a>
 80019c2:	4640      	mov	r0, r8
 80019c4:	f000 fb2c 	bl	8002020 <__clzsi2>
 80019c8:	0002      	movs	r2, r0
 80019ca:	3a0b      	subs	r2, #11
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dmul+0x186>
 80019d0:	e172      	b.n	8001cb8 <__aeabi_dmul+0x46c>
 80019d2:	0001      	movs	r1, r0
 80019d4:	4643      	mov	r3, r8
 80019d6:	3908      	subs	r1, #8
 80019d8:	408b      	lsls	r3, r1
 80019da:	4698      	mov	r8, r3
 80019dc:	231d      	movs	r3, #29
 80019de:	1a9a      	subs	r2, r3, r2
 80019e0:	4653      	mov	r3, sl
 80019e2:	40d3      	lsrs	r3, r2
 80019e4:	001a      	movs	r2, r3
 80019e6:	4643      	mov	r3, r8
 80019e8:	4313      	orrs	r3, r2
 80019ea:	4652      	mov	r2, sl
 80019ec:	408a      	lsls	r2, r1
 80019ee:	4649      	mov	r1, r9
 80019f0:	1a08      	subs	r0, r1, r0
 80019f2:	4982      	ldr	r1, [pc, #520]	; (8001bfc <__aeabi_dmul+0x3b0>)
 80019f4:	4689      	mov	r9, r1
 80019f6:	4481      	add	r9, r0
 80019f8:	2000      	movs	r0, #0
 80019fa:	e768      	b.n	80018ce <__aeabi_dmul+0x82>
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <__aeabi_dmul+0x3a0>)
 80019fe:	2700      	movs	r7, #0
 8001a00:	2600      	movs	r6, #0
 8001a02:	e78e      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001a04:	0c14      	lsrs	r4, r2, #16
 8001a06:	0412      	lsls	r2, r2, #16
 8001a08:	0c12      	lsrs	r2, r2, #16
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0c37      	lsrs	r7, r6, #16
 8001a0e:	0436      	lsls	r6, r6, #16
 8001a10:	0c35      	lsrs	r5, r6, #16
 8001a12:	4379      	muls	r1, r7
 8001a14:	0028      	movs	r0, r5
 8001a16:	468c      	mov	ip, r1
 8001a18:	002e      	movs	r6, r5
 8001a1a:	4360      	muls	r0, r4
 8001a1c:	4460      	add	r0, ip
 8001a1e:	4683      	mov	fp, r0
 8001a20:	4356      	muls	r6, r2
 8001a22:	0021      	movs	r1, r4
 8001a24:	0c30      	lsrs	r0, r6, #16
 8001a26:	4680      	mov	r8, r0
 8001a28:	4658      	mov	r0, fp
 8001a2a:	4379      	muls	r1, r7
 8001a2c:	4440      	add	r0, r8
 8001a2e:	9102      	str	r1, [sp, #8]
 8001a30:	4584      	cmp	ip, r0
 8001a32:	d906      	bls.n	8001a42 <__aeabi_dmul+0x1f6>
 8001a34:	4688      	mov	r8, r1
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0249      	lsls	r1, r1, #9
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	44e0      	add	r8, ip
 8001a3e:	4641      	mov	r1, r8
 8001a40:	9102      	str	r1, [sp, #8]
 8001a42:	0436      	lsls	r6, r6, #16
 8001a44:	0c01      	lsrs	r1, r0, #16
 8001a46:	0c36      	lsrs	r6, r6, #16
 8001a48:	0400      	lsls	r0, r0, #16
 8001a4a:	468b      	mov	fp, r1
 8001a4c:	1981      	adds	r1, r0, r6
 8001a4e:	0c1e      	lsrs	r6, r3, #16
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	9103      	str	r1, [sp, #12]
 8001a56:	0019      	movs	r1, r3
 8001a58:	4379      	muls	r1, r7
 8001a5a:	468c      	mov	ip, r1
 8001a5c:	0028      	movs	r0, r5
 8001a5e:	4375      	muls	r5, r6
 8001a60:	4465      	add	r5, ip
 8001a62:	46a8      	mov	r8, r5
 8001a64:	4358      	muls	r0, r3
 8001a66:	0c05      	lsrs	r5, r0, #16
 8001a68:	4445      	add	r5, r8
 8001a6a:	4377      	muls	r7, r6
 8001a6c:	42a9      	cmp	r1, r5
 8001a6e:	d903      	bls.n	8001a78 <__aeabi_dmul+0x22c>
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	0249      	lsls	r1, r1, #9
 8001a74:	468c      	mov	ip, r1
 8001a76:	4467      	add	r7, ip
 8001a78:	0c29      	lsrs	r1, r5, #16
 8001a7a:	468c      	mov	ip, r1
 8001a7c:	0039      	movs	r1, r7
 8001a7e:	0400      	lsls	r0, r0, #16
 8001a80:	0c00      	lsrs	r0, r0, #16
 8001a82:	042d      	lsls	r5, r5, #16
 8001a84:	182d      	adds	r5, r5, r0
 8001a86:	4461      	add	r1, ip
 8001a88:	44ab      	add	fp, r5
 8001a8a:	9105      	str	r1, [sp, #20]
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	9104      	str	r1, [sp, #16]
 8001a90:	9901      	ldr	r1, [sp, #4]
 8001a92:	040f      	lsls	r7, r1, #16
 8001a94:	0c3f      	lsrs	r7, r7, #16
 8001a96:	0c08      	lsrs	r0, r1, #16
 8001a98:	0039      	movs	r1, r7
 8001a9a:	4351      	muls	r1, r2
 8001a9c:	4342      	muls	r2, r0
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	468c      	mov	ip, r1
 8001aa4:	0c09      	lsrs	r1, r1, #16
 8001aa6:	468b      	mov	fp, r1
 8001aa8:	4362      	muls	r2, r4
 8001aaa:	437c      	muls	r4, r7
 8001aac:	4444      	add	r4, r8
 8001aae:	445c      	add	r4, fp
 8001ab0:	45a0      	cmp	r8, r4
 8001ab2:	d903      	bls.n	8001abc <__aeabi_dmul+0x270>
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0249      	lsls	r1, r1, #9
 8001ab8:	4688      	mov	r8, r1
 8001aba:	4442      	add	r2, r8
 8001abc:	0c21      	lsrs	r1, r4, #16
 8001abe:	4688      	mov	r8, r1
 8001ac0:	4661      	mov	r1, ip
 8001ac2:	0409      	lsls	r1, r1, #16
 8001ac4:	0c09      	lsrs	r1, r1, #16
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	0039      	movs	r1, r7
 8001aca:	4359      	muls	r1, r3
 8001acc:	4343      	muls	r3, r0
 8001ace:	4370      	muls	r0, r6
 8001ad0:	437e      	muls	r6, r7
 8001ad2:	0c0f      	lsrs	r7, r1, #16
 8001ad4:	18f6      	adds	r6, r6, r3
 8001ad6:	0424      	lsls	r4, r4, #16
 8001ad8:	19be      	adds	r6, r7, r6
 8001ada:	4464      	add	r4, ip
 8001adc:	4442      	add	r2, r8
 8001ade:	468c      	mov	ip, r1
 8001ae0:	42b3      	cmp	r3, r6
 8001ae2:	d903      	bls.n	8001aec <__aeabi_dmul+0x2a0>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4698      	mov	r8, r3
 8001aea:	4440      	add	r0, r8
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	4661      	mov	r1, ip
 8001af0:	4698      	mov	r8, r3
 8001af2:	9b04      	ldr	r3, [sp, #16]
 8001af4:	0437      	lsls	r7, r6, #16
 8001af6:	4443      	add	r3, r8
 8001af8:	469b      	mov	fp, r3
 8001afa:	45ab      	cmp	fp, r5
 8001afc:	41ad      	sbcs	r5, r5
 8001afe:	426b      	negs	r3, r5
 8001b00:	040d      	lsls	r5, r1, #16
 8001b02:	9905      	ldr	r1, [sp, #20]
 8001b04:	0c2d      	lsrs	r5, r5, #16
 8001b06:	468c      	mov	ip, r1
 8001b08:	197f      	adds	r7, r7, r5
 8001b0a:	4467      	add	r7, ip
 8001b0c:	18fd      	adds	r5, r7, r3
 8001b0e:	46a8      	mov	r8, r5
 8001b10:	465d      	mov	r5, fp
 8001b12:	192d      	adds	r5, r5, r4
 8001b14:	42a5      	cmp	r5, r4
 8001b16:	41a4      	sbcs	r4, r4
 8001b18:	4693      	mov	fp, r2
 8001b1a:	4264      	negs	r4, r4
 8001b1c:	46a4      	mov	ip, r4
 8001b1e:	44c3      	add	fp, r8
 8001b20:	44dc      	add	ip, fp
 8001b22:	428f      	cmp	r7, r1
 8001b24:	41bf      	sbcs	r7, r7
 8001b26:	4598      	cmp	r8, r3
 8001b28:	419b      	sbcs	r3, r3
 8001b2a:	4593      	cmp	fp, r2
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	45a4      	cmp	ip, r4
 8001b30:	41a4      	sbcs	r4, r4
 8001b32:	425b      	negs	r3, r3
 8001b34:	427f      	negs	r7, r7
 8001b36:	431f      	orrs	r7, r3
 8001b38:	0c36      	lsrs	r6, r6, #16
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	4264      	negs	r4, r4
 8001b3e:	19bf      	adds	r7, r7, r6
 8001b40:	4322      	orrs	r2, r4
 8001b42:	18bf      	adds	r7, r7, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	1838      	adds	r0, r7, r0
 8001b48:	0243      	lsls	r3, r0, #9
 8001b4a:	0dd2      	lsrs	r2, r2, #23
 8001b4c:	9903      	ldr	r1, [sp, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	026a      	lsls	r2, r5, #9
 8001b52:	430a      	orrs	r2, r1
 8001b54:	1e50      	subs	r0, r2, #1
 8001b56:	4182      	sbcs	r2, r0
 8001b58:	4661      	mov	r1, ip
 8001b5a:	0ded      	lsrs	r5, r5, #23
 8001b5c:	432a      	orrs	r2, r5
 8001b5e:	024e      	lsls	r6, r1, #9
 8001b60:	4332      	orrs	r2, r6
 8001b62:	01d9      	lsls	r1, r3, #7
 8001b64:	d400      	bmi.n	8001b68 <__aeabi_dmul+0x31c>
 8001b66:	e0b3      	b.n	8001cd0 <__aeabi_dmul+0x484>
 8001b68:	2601      	movs	r6, #1
 8001b6a:	0850      	lsrs	r0, r2, #1
 8001b6c:	4032      	ands	r2, r6
 8001b6e:	4302      	orrs	r2, r0
 8001b70:	07de      	lsls	r6, r3, #31
 8001b72:	4332      	orrs	r2, r6
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	4c22      	ldr	r4, [pc, #136]	; (8001c00 <__aeabi_dmul+0x3b4>)
 8001b78:	4454      	add	r4, sl
 8001b7a:	2c00      	cmp	r4, #0
 8001b7c:	dd62      	ble.n	8001c44 <__aeabi_dmul+0x3f8>
 8001b7e:	0751      	lsls	r1, r2, #29
 8001b80:	d009      	beq.n	8001b96 <__aeabi_dmul+0x34a>
 8001b82:	200f      	movs	r0, #15
 8001b84:	4010      	ands	r0, r2
 8001b86:	2804      	cmp	r0, #4
 8001b88:	d005      	beq.n	8001b96 <__aeabi_dmul+0x34a>
 8001b8a:	1d10      	adds	r0, r2, #4
 8001b8c:	4290      	cmp	r0, r2
 8001b8e:	4192      	sbcs	r2, r2
 8001b90:	4252      	negs	r2, r2
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	0002      	movs	r2, r0
 8001b96:	01d9      	lsls	r1, r3, #7
 8001b98:	d504      	bpl.n	8001ba4 <__aeabi_dmul+0x358>
 8001b9a:	2480      	movs	r4, #128	; 0x80
 8001b9c:	4819      	ldr	r0, [pc, #100]	; (8001c04 <__aeabi_dmul+0x3b8>)
 8001b9e:	00e4      	lsls	r4, r4, #3
 8001ba0:	4003      	ands	r3, r0
 8001ba2:	4454      	add	r4, sl
 8001ba4:	4818      	ldr	r0, [pc, #96]	; (8001c08 <__aeabi_dmul+0x3bc>)
 8001ba6:	4284      	cmp	r4, r0
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dmul+0x360>
 8001baa:	e727      	b.n	80019fc <__aeabi_dmul+0x1b0>
 8001bac:	075e      	lsls	r6, r3, #29
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	08d2      	lsrs	r2, r2, #3
 8001bb2:	0b1f      	lsrs	r7, r3, #12
 8001bb4:	0563      	lsls	r3, r4, #21
 8001bb6:	4316      	orrs	r6, r2
 8001bb8:	0d5b      	lsrs	r3, r3, #21
 8001bba:	e6b2      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	2704      	movs	r7, #4
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	e664      	b.n	8001894 <__aeabi_dmul+0x48>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	9701      	str	r7, [sp, #4]
 8001bce:	4681      	mov	r9, r0
 8001bd0:	270c      	movs	r7, #12
 8001bd2:	469b      	mov	fp, r3
 8001bd4:	e65e      	b.n	8001894 <__aeabi_dmul+0x48>
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2001      	movs	r0, #1
 8001bda:	4317      	orrs	r7, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	e676      	b.n	80018ce <__aeabi_dmul+0x82>
 8001be0:	2303      	movs	r3, #3
 8001be2:	2003      	movs	r0, #3
 8001be4:	431f      	orrs	r7, r3
 8001be6:	4643      	mov	r3, r8
 8001be8:	e671      	b.n	80018ce <__aeabi_dmul+0x82>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	000007ff 	.word	0x000007ff
 8001bf0:	fffffc01 	.word	0xfffffc01
 8001bf4:	08005554 	.word	0x08005554
 8001bf8:	800fffff 	.word	0x800fffff
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000003ff 	.word	0x000003ff
 8001c04:	feffffff 	.word	0xfeffffff
 8001c08:	000007fe 	.word	0x000007fe
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2780      	movs	r7, #128	; 0x80
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	033f      	lsls	r7, r7, #12
 8001c14:	2600      	movs	r6, #0
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <__aeabi_dmul+0x4d8>)
 8001c18:	e683      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001c1a:	9b01      	ldr	r3, [sp, #4]
 8001c1c:	0032      	movs	r2, r6
 8001c1e:	46a4      	mov	ip, r4
 8001c20:	4658      	mov	r0, fp
 8001c22:	e670      	b.n	8001906 <__aeabi_dmul+0xba>
 8001c24:	46ac      	mov	ip, r5
 8001c26:	e66e      	b.n	8001906 <__aeabi_dmul+0xba>
 8001c28:	2780      	movs	r7, #128	; 0x80
 8001c2a:	9901      	ldr	r1, [sp, #4]
 8001c2c:	033f      	lsls	r7, r7, #12
 8001c2e:	4239      	tst	r1, r7
 8001c30:	d02d      	beq.n	8001c8e <__aeabi_dmul+0x442>
 8001c32:	423b      	tst	r3, r7
 8001c34:	d12b      	bne.n	8001c8e <__aeabi_dmul+0x442>
 8001c36:	431f      	orrs	r7, r3
 8001c38:	033f      	lsls	r7, r7, #12
 8001c3a:	0b3f      	lsrs	r7, r7, #12
 8001c3c:	9500      	str	r5, [sp, #0]
 8001c3e:	0016      	movs	r6, r2
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <__aeabi_dmul+0x4d8>)
 8001c42:	e66e      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001c44:	2501      	movs	r5, #1
 8001c46:	1b2d      	subs	r5, r5, r4
 8001c48:	2d38      	cmp	r5, #56	; 0x38
 8001c4a:	dd00      	ble.n	8001c4e <__aeabi_dmul+0x402>
 8001c4c:	e666      	b.n	800191c <__aeabi_dmul+0xd0>
 8001c4e:	2d1f      	cmp	r5, #31
 8001c50:	dc40      	bgt.n	8001cd4 <__aeabi_dmul+0x488>
 8001c52:	4835      	ldr	r0, [pc, #212]	; (8001d28 <__aeabi_dmul+0x4dc>)
 8001c54:	001c      	movs	r4, r3
 8001c56:	4450      	add	r0, sl
 8001c58:	0016      	movs	r6, r2
 8001c5a:	4082      	lsls	r2, r0
 8001c5c:	4084      	lsls	r4, r0
 8001c5e:	40ee      	lsrs	r6, r5
 8001c60:	1e50      	subs	r0, r2, #1
 8001c62:	4182      	sbcs	r2, r0
 8001c64:	4334      	orrs	r4, r6
 8001c66:	4314      	orrs	r4, r2
 8001c68:	40eb      	lsrs	r3, r5
 8001c6a:	0762      	lsls	r2, r4, #29
 8001c6c:	d009      	beq.n	8001c82 <__aeabi_dmul+0x436>
 8001c6e:	220f      	movs	r2, #15
 8001c70:	4022      	ands	r2, r4
 8001c72:	2a04      	cmp	r2, #4
 8001c74:	d005      	beq.n	8001c82 <__aeabi_dmul+0x436>
 8001c76:	0022      	movs	r2, r4
 8001c78:	1d14      	adds	r4, r2, #4
 8001c7a:	4294      	cmp	r4, r2
 8001c7c:	4180      	sbcs	r0, r0
 8001c7e:	4240      	negs	r0, r0
 8001c80:	181b      	adds	r3, r3, r0
 8001c82:	021a      	lsls	r2, r3, #8
 8001c84:	d53e      	bpl.n	8001d04 <__aeabi_dmul+0x4b8>
 8001c86:	2301      	movs	r3, #1
 8001c88:	2700      	movs	r7, #0
 8001c8a:	2600      	movs	r6, #0
 8001c8c:	e649      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001c8e:	2780      	movs	r7, #128	; 0x80
 8001c90:	9b01      	ldr	r3, [sp, #4]
 8001c92:	033f      	lsls	r7, r7, #12
 8001c94:	431f      	orrs	r7, r3
 8001c96:	033f      	lsls	r7, r7, #12
 8001c98:	0b3f      	lsrs	r7, r7, #12
 8001c9a:	9400      	str	r4, [sp, #0]
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <__aeabi_dmul+0x4d8>)
 8001c9e:	e640      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	3b28      	subs	r3, #40	; 0x28
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	2600      	movs	r6, #0
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	e66d      	b.n	800198a <__aeabi_dmul+0x13e>
 8001cae:	4658      	mov	r0, fp
 8001cb0:	f000 f9b6 	bl	8002020 <__clzsi2>
 8001cb4:	3020      	adds	r0, #32
 8001cb6:	e657      	b.n	8001968 <__aeabi_dmul+0x11c>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	4652      	mov	r2, sl
 8001cbc:	3b28      	subs	r3, #40	; 0x28
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	e693      	b.n	80019ee <__aeabi_dmul+0x1a2>
 8001cc6:	4650      	mov	r0, sl
 8001cc8:	f000 f9aa 	bl	8002020 <__clzsi2>
 8001ccc:	3020      	adds	r0, #32
 8001cce:	e67b      	b.n	80019c8 <__aeabi_dmul+0x17c>
 8001cd0:	46ca      	mov	sl, r9
 8001cd2:	e750      	b.n	8001b76 <__aeabi_dmul+0x32a>
 8001cd4:	201f      	movs	r0, #31
 8001cd6:	001e      	movs	r6, r3
 8001cd8:	4240      	negs	r0, r0
 8001cda:	1b04      	subs	r4, r0, r4
 8001cdc:	40e6      	lsrs	r6, r4
 8001cde:	2d20      	cmp	r5, #32
 8001ce0:	d003      	beq.n	8001cea <__aeabi_dmul+0x49e>
 8001ce2:	4c12      	ldr	r4, [pc, #72]	; (8001d2c <__aeabi_dmul+0x4e0>)
 8001ce4:	4454      	add	r4, sl
 8001ce6:	40a3      	lsls	r3, r4
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	1e50      	subs	r0, r2, #1
 8001cec:	4182      	sbcs	r2, r0
 8001cee:	4332      	orrs	r2, r6
 8001cf0:	2607      	movs	r6, #7
 8001cf2:	2700      	movs	r7, #0
 8001cf4:	4016      	ands	r6, r2
 8001cf6:	d009      	beq.n	8001d0c <__aeabi_dmul+0x4c0>
 8001cf8:	200f      	movs	r0, #15
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	4010      	ands	r0, r2
 8001cfe:	0014      	movs	r4, r2
 8001d00:	2804      	cmp	r0, #4
 8001d02:	d1b9      	bne.n	8001c78 <__aeabi_dmul+0x42c>
 8001d04:	0022      	movs	r2, r4
 8001d06:	075e      	lsls	r6, r3, #29
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	0b1f      	lsrs	r7, r3, #12
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	4316      	orrs	r6, r2
 8001d10:	2300      	movs	r3, #0
 8001d12:	e606      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001d14:	2780      	movs	r7, #128	; 0x80
 8001d16:	033f      	lsls	r7, r7, #12
 8001d18:	431f      	orrs	r7, r3
 8001d1a:	033f      	lsls	r7, r7, #12
 8001d1c:	0b3f      	lsrs	r7, r7, #12
 8001d1e:	0016      	movs	r6, r2
 8001d20:	4b00      	ldr	r3, [pc, #0]	; (8001d24 <__aeabi_dmul+0x4d8>)
 8001d22:	e5fe      	b.n	8001922 <__aeabi_dmul+0xd6>
 8001d24:	000007ff 	.word	0x000007ff
 8001d28:	0000041e 	.word	0x0000041e
 8001d2c:	0000043e 	.word	0x0000043e

08001d30 <__aeabi_d2iz>:
 8001d30:	b530      	push	{r4, r5, lr}
 8001d32:	4d14      	ldr	r5, [pc, #80]	; (8001d84 <__aeabi_d2iz+0x54>)
 8001d34:	030a      	lsls	r2, r1, #12
 8001d36:	004b      	lsls	r3, r1, #1
 8001d38:	0b12      	lsrs	r2, r2, #12
 8001d3a:	0d5b      	lsrs	r3, r3, #21
 8001d3c:	0fc9      	lsrs	r1, r1, #31
 8001d3e:	2400      	movs	r4, #0
 8001d40:	42ab      	cmp	r3, r5
 8001d42:	dd11      	ble.n	8001d68 <__aeabi_d2iz+0x38>
 8001d44:	4c10      	ldr	r4, [pc, #64]	; (8001d88 <__aeabi_d2iz+0x58>)
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	dc10      	bgt.n	8001d6c <__aeabi_d2iz+0x3c>
 8001d4a:	2480      	movs	r4, #128	; 0x80
 8001d4c:	0364      	lsls	r4, r4, #13
 8001d4e:	4322      	orrs	r2, r4
 8001d50:	4c0e      	ldr	r4, [pc, #56]	; (8001d8c <__aeabi_d2iz+0x5c>)
 8001d52:	1ae4      	subs	r4, r4, r3
 8001d54:	2c1f      	cmp	r4, #31
 8001d56:	dd0c      	ble.n	8001d72 <__aeabi_d2iz+0x42>
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <__aeabi_d2iz+0x60>)
 8001d5a:	1ac3      	subs	r3, r0, r3
 8001d5c:	40da      	lsrs	r2, r3
 8001d5e:	0013      	movs	r3, r2
 8001d60:	425c      	negs	r4, r3
 8001d62:	2900      	cmp	r1, #0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_d2iz+0x38>
 8001d66:	001c      	movs	r4, r3
 8001d68:	0020      	movs	r0, r4
 8001d6a:	bd30      	pop	{r4, r5, pc}
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <__aeabi_d2iz+0x64>)
 8001d6e:	18cc      	adds	r4, r1, r3
 8001d70:	e7fa      	b.n	8001d68 <__aeabi_d2iz+0x38>
 8001d72:	4d09      	ldr	r5, [pc, #36]	; (8001d98 <__aeabi_d2iz+0x68>)
 8001d74:	40e0      	lsrs	r0, r4
 8001d76:	46ac      	mov	ip, r5
 8001d78:	4463      	add	r3, ip
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	e7ee      	b.n	8001d60 <__aeabi_d2iz+0x30>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000003fe 	.word	0x000003fe
 8001d88:	0000041d 	.word	0x0000041d
 8001d8c:	00000433 	.word	0x00000433
 8001d90:	00000413 	.word	0x00000413
 8001d94:	7fffffff 	.word	0x7fffffff
 8001d98:	fffffbed 	.word	0xfffffbed

08001d9c <__aeabi_i2d>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d02d      	beq.n	8001dfe <__aeabi_i2d+0x62>
 8001da2:	17c3      	asrs	r3, r0, #31
 8001da4:	18c5      	adds	r5, r0, r3
 8001da6:	405d      	eors	r5, r3
 8001da8:	0fc4      	lsrs	r4, r0, #31
 8001daa:	0028      	movs	r0, r5
 8001dac:	f000 f938 	bl	8002020 <__clzsi2>
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <__aeabi_i2d+0x6c>)
 8001db2:	1a1b      	subs	r3, r3, r0
 8001db4:	055b      	lsls	r3, r3, #21
 8001db6:	0d5b      	lsrs	r3, r3, #21
 8001db8:	280a      	cmp	r0, #10
 8001dba:	dd15      	ble.n	8001de8 <__aeabi_i2d+0x4c>
 8001dbc:	380b      	subs	r0, #11
 8001dbe:	4085      	lsls	r5, r0
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	032d      	lsls	r5, r5, #12
 8001dc4:	0b2d      	lsrs	r5, r5, #12
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	0010      	movs	r0, r2
 8001dca:	032d      	lsls	r5, r5, #12
 8001dcc:	0d0a      	lsrs	r2, r1, #20
 8001dce:	0b2d      	lsrs	r5, r5, #12
 8001dd0:	0512      	lsls	r2, r2, #20
 8001dd2:	432a      	orrs	r2, r5
 8001dd4:	4d0d      	ldr	r5, [pc, #52]	; (8001e0c <__aeabi_i2d+0x70>)
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	402a      	ands	r2, r5
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	07e4      	lsls	r4, r4, #31
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	4323      	orrs	r3, r4
 8001de4:	0019      	movs	r1, r3
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	0002      	movs	r2, r0
 8001dea:	0029      	movs	r1, r5
 8001dec:	3215      	adds	r2, #21
 8001dee:	4091      	lsls	r1, r2
 8001df0:	000a      	movs	r2, r1
 8001df2:	210b      	movs	r1, #11
 8001df4:	1a08      	subs	r0, r1, r0
 8001df6:	40c5      	lsrs	r5, r0
 8001df8:	032d      	lsls	r5, r5, #12
 8001dfa:	0b2d      	lsrs	r5, r5, #12
 8001dfc:	e7e3      	b.n	8001dc6 <__aeabi_i2d+0x2a>
 8001dfe:	2400      	movs	r4, #0
 8001e00:	2300      	movs	r3, #0
 8001e02:	2500      	movs	r5, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	e7de      	b.n	8001dc6 <__aeabi_i2d+0x2a>
 8001e08:	0000041e 	.word	0x0000041e
 8001e0c:	800fffff 	.word	0x800fffff

08001e10 <__aeabi_ui2d>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	1e04      	subs	r4, r0, #0
 8001e14:	d025      	beq.n	8001e62 <__aeabi_ui2d+0x52>
 8001e16:	f000 f903 	bl	8002020 <__clzsi2>
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <__aeabi_ui2d+0x5c>)
 8001e1c:	1a1b      	subs	r3, r3, r0
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	0d5b      	lsrs	r3, r3, #21
 8001e22:	280a      	cmp	r0, #10
 8001e24:	dd12      	ble.n	8001e4c <__aeabi_ui2d+0x3c>
 8001e26:	380b      	subs	r0, #11
 8001e28:	4084      	lsls	r4, r0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	0324      	lsls	r4, r4, #12
 8001e2e:	0b24      	lsrs	r4, r4, #12
 8001e30:	2100      	movs	r1, #0
 8001e32:	0010      	movs	r0, r2
 8001e34:	0324      	lsls	r4, r4, #12
 8001e36:	0d0a      	lsrs	r2, r1, #20
 8001e38:	0b24      	lsrs	r4, r4, #12
 8001e3a:	0512      	lsls	r2, r2, #20
 8001e3c:	4322      	orrs	r2, r4
 8001e3e:	4c0c      	ldr	r4, [pc, #48]	; (8001e70 <__aeabi_ui2d+0x60>)
 8001e40:	051b      	lsls	r3, r3, #20
 8001e42:	4022      	ands	r2, r4
 8001e44:	4313      	orrs	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	0859      	lsrs	r1, r3, #1
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	0021      	movs	r1, r4
 8001e50:	3215      	adds	r2, #21
 8001e52:	4091      	lsls	r1, r2
 8001e54:	000a      	movs	r2, r1
 8001e56:	210b      	movs	r1, #11
 8001e58:	1a08      	subs	r0, r1, r0
 8001e5a:	40c4      	lsrs	r4, r0
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	0b24      	lsrs	r4, r4, #12
 8001e60:	e7e6      	b.n	8001e30 <__aeabi_ui2d+0x20>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2400      	movs	r4, #0
 8001e66:	2200      	movs	r2, #0
 8001e68:	e7e2      	b.n	8001e30 <__aeabi_ui2d+0x20>
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	0000041e 	.word	0x0000041e
 8001e70:	800fffff 	.word	0x800fffff

08001e74 <__aeabi_f2d>:
 8001e74:	0041      	lsls	r1, r0, #1
 8001e76:	0e09      	lsrs	r1, r1, #24
 8001e78:	1c4b      	adds	r3, r1, #1
 8001e7a:	b570      	push	{r4, r5, r6, lr}
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	0246      	lsls	r6, r0, #9
 8001e80:	0a75      	lsrs	r5, r6, #9
 8001e82:	0fc4      	lsrs	r4, r0, #31
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	dd14      	ble.n	8001eb2 <__aeabi_f2d+0x3e>
 8001e88:	23e0      	movs	r3, #224	; 0xe0
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	076d      	lsls	r5, r5, #29
 8001e8e:	0b36      	lsrs	r6, r6, #12
 8001e90:	18cb      	adds	r3, r1, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	0d0a      	lsrs	r2, r1, #20
 8001e96:	0028      	movs	r0, r5
 8001e98:	0512      	lsls	r2, r2, #20
 8001e9a:	4d1c      	ldr	r5, [pc, #112]	; (8001f0c <__aeabi_f2d+0x98>)
 8001e9c:	4332      	orrs	r2, r6
 8001e9e:	055b      	lsls	r3, r3, #21
 8001ea0:	402a      	ands	r2, r5
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	07e4      	lsls	r4, r4, #31
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	4323      	orrs	r3, r4
 8001eae:	0019      	movs	r1, r3
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
 8001eb2:	2900      	cmp	r1, #0
 8001eb4:	d114      	bne.n	8001ee0 <__aeabi_f2d+0x6c>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d01e      	beq.n	8001ef8 <__aeabi_f2d+0x84>
 8001eba:	0028      	movs	r0, r5
 8001ebc:	f000 f8b0 	bl	8002020 <__clzsi2>
 8001ec0:	280a      	cmp	r0, #10
 8001ec2:	dc1c      	bgt.n	8001efe <__aeabi_f2d+0x8a>
 8001ec4:	230b      	movs	r3, #11
 8001ec6:	002a      	movs	r2, r5
 8001ec8:	1a1b      	subs	r3, r3, r0
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	0003      	movs	r3, r0
 8001ece:	3315      	adds	r3, #21
 8001ed0:	409d      	lsls	r5, r3
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <__aeabi_f2d+0x9c>)
 8001ed4:	0312      	lsls	r2, r2, #12
 8001ed6:	1a1b      	subs	r3, r3, r0
 8001ed8:	055b      	lsls	r3, r3, #21
 8001eda:	0b16      	lsrs	r6, r2, #12
 8001edc:	0d5b      	lsrs	r3, r3, #21
 8001ede:	e7d8      	b.n	8001e92 <__aeabi_f2d+0x1e>
 8001ee0:	2d00      	cmp	r5, #0
 8001ee2:	d006      	beq.n	8001ef2 <__aeabi_f2d+0x7e>
 8001ee4:	0b32      	lsrs	r2, r6, #12
 8001ee6:	2680      	movs	r6, #128	; 0x80
 8001ee8:	0336      	lsls	r6, r6, #12
 8001eea:	076d      	lsls	r5, r5, #29
 8001eec:	4316      	orrs	r6, r2
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <__aeabi_f2d+0xa0>)
 8001ef0:	e7cf      	b.n	8001e92 <__aeabi_f2d+0x1e>
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <__aeabi_f2d+0xa0>)
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	e7cc      	b.n	8001e92 <__aeabi_f2d+0x1e>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2600      	movs	r6, #0
 8001efc:	e7c9      	b.n	8001e92 <__aeabi_f2d+0x1e>
 8001efe:	0003      	movs	r3, r0
 8001f00:	002a      	movs	r2, r5
 8001f02:	3b0b      	subs	r3, #11
 8001f04:	409a      	lsls	r2, r3
 8001f06:	2500      	movs	r5, #0
 8001f08:	e7e3      	b.n	8001ed2 <__aeabi_f2d+0x5e>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	800fffff 	.word	0x800fffff
 8001f10:	00000389 	.word	0x00000389
 8001f14:	000007ff 	.word	0x000007ff

08001f18 <__aeabi_d2f>:
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	004c      	lsls	r4, r1, #1
 8001f1c:	0d64      	lsrs	r4, r4, #21
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	1c62      	adds	r2, r4, #1
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	0f46      	lsrs	r6, r0, #29
 8001f26:	0552      	lsls	r2, r2, #21
 8001f28:	0fc9      	lsrs	r1, r1, #31
 8001f2a:	431e      	orrs	r6, r3
 8001f2c:	00c5      	lsls	r5, r0, #3
 8001f2e:	0d52      	lsrs	r2, r2, #21
 8001f30:	2a01      	cmp	r2, #1
 8001f32:	dd29      	ble.n	8001f88 <__aeabi_d2f+0x70>
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <__aeabi_d2f+0xfc>)
 8001f36:	18e7      	adds	r7, r4, r3
 8001f38:	2ffe      	cmp	r7, #254	; 0xfe
 8001f3a:	dc1c      	bgt.n	8001f76 <__aeabi_d2f+0x5e>
 8001f3c:	2f00      	cmp	r7, #0
 8001f3e:	dd3b      	ble.n	8001fb8 <__aeabi_d2f+0xa0>
 8001f40:	0180      	lsls	r0, r0, #6
 8001f42:	1e43      	subs	r3, r0, #1
 8001f44:	4198      	sbcs	r0, r3
 8001f46:	2207      	movs	r2, #7
 8001f48:	00f3      	lsls	r3, r6, #3
 8001f4a:	0f6d      	lsrs	r5, r5, #29
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	432b      	orrs	r3, r5
 8001f50:	401a      	ands	r2, r3
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d004      	beq.n	8001f60 <__aeabi_d2f+0x48>
 8001f56:	220f      	movs	r2, #15
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2a04      	cmp	r2, #4
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_d2f+0x48>
 8001f5e:	3304      	adds	r3, #4
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	04d2      	lsls	r2, r2, #19
 8001f64:	401a      	ands	r2, r3
 8001f66:	d024      	beq.n	8001fb2 <__aeabi_d2f+0x9a>
 8001f68:	3701      	adds	r7, #1
 8001f6a:	b2fa      	uxtb	r2, r7
 8001f6c:	2fff      	cmp	r7, #255	; 0xff
 8001f6e:	d002      	beq.n	8001f76 <__aeabi_d2f+0x5e>
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	0a58      	lsrs	r0, r3, #9
 8001f74:	e001      	b.n	8001f7a <__aeabi_d2f+0x62>
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	2000      	movs	r0, #0
 8001f7a:	0240      	lsls	r0, r0, #9
 8001f7c:	05d2      	lsls	r2, r2, #23
 8001f7e:	0a40      	lsrs	r0, r0, #9
 8001f80:	07c9      	lsls	r1, r1, #31
 8001f82:	4310      	orrs	r0, r2
 8001f84:	4308      	orrs	r0, r1
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	4335      	orrs	r5, r6
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	d104      	bne.n	8001f98 <__aeabi_d2f+0x80>
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	d10a      	bne.n	8001fa8 <__aeabi_d2f+0x90>
 8001f92:	2200      	movs	r2, #0
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7f0      	b.n	8001f7a <__aeabi_d2f+0x62>
 8001f98:	2d00      	cmp	r5, #0
 8001f9a:	d0ec      	beq.n	8001f76 <__aeabi_d2f+0x5e>
 8001f9c:	2080      	movs	r0, #128	; 0x80
 8001f9e:	03c0      	lsls	r0, r0, #15
 8001fa0:	4330      	orrs	r0, r6
 8001fa2:	22ff      	movs	r2, #255	; 0xff
 8001fa4:	e7e9      	b.n	8001f7a <__aeabi_d2f+0x62>
 8001fa6:	2400      	movs	r4, #0
 8001fa8:	2300      	movs	r3, #0
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	0a58      	lsrs	r0, r3, #9
 8001fae:	b2e2      	uxtb	r2, r4
 8001fb0:	e7e3      	b.n	8001f7a <__aeabi_d2f+0x62>
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	003c      	movs	r4, r7
 8001fb6:	e7f8      	b.n	8001faa <__aeabi_d2f+0x92>
 8001fb8:	003b      	movs	r3, r7
 8001fba:	3317      	adds	r3, #23
 8001fbc:	dbf3      	blt.n	8001fa6 <__aeabi_d2f+0x8e>
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	4333      	orrs	r3, r6
 8001fc4:	261e      	movs	r6, #30
 8001fc6:	1bf6      	subs	r6, r6, r7
 8001fc8:	2e1f      	cmp	r6, #31
 8001fca:	dd14      	ble.n	8001ff6 <__aeabi_d2f+0xde>
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4252      	negs	r2, r2
 8001fd0:	1bd7      	subs	r7, r2, r7
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	40fa      	lsrs	r2, r7
 8001fd6:	0017      	movs	r7, r2
 8001fd8:	2e20      	cmp	r6, #32
 8001fda:	d004      	beq.n	8001fe6 <__aeabi_d2f+0xce>
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <__aeabi_d2f+0x100>)
 8001fde:	4694      	mov	ip, r2
 8001fe0:	4464      	add	r4, ip
 8001fe2:	40a3      	lsls	r3, r4
 8001fe4:	431d      	orrs	r5, r3
 8001fe6:	002b      	movs	r3, r5
 8001fe8:	1e5d      	subs	r5, r3, #1
 8001fea:	41ab      	sbcs	r3, r5
 8001fec:	2207      	movs	r2, #7
 8001fee:	433b      	orrs	r3, r7
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	2700      	movs	r7, #0
 8001ff4:	e7ad      	b.n	8001f52 <__aeabi_d2f+0x3a>
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <__aeabi_d2f+0x104>)
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	18a2      	adds	r2, r4, r2
 8001ffc:	4095      	lsls	r5, r2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	1e6c      	subs	r4, r5, #1
 8002002:	41a5      	sbcs	r5, r4
 8002004:	40f0      	lsrs	r0, r6
 8002006:	2207      	movs	r2, #7
 8002008:	432b      	orrs	r3, r5
 800200a:	4303      	orrs	r3, r0
 800200c:	401a      	ands	r2, r3
 800200e:	2700      	movs	r7, #0
 8002010:	e79f      	b.n	8001f52 <__aeabi_d2f+0x3a>
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	fffffc80 	.word	0xfffffc80
 8002018:	fffffca2 	.word	0xfffffca2
 800201c:	fffffc82 	.word	0xfffffc82

08002020 <__clzsi2>:
 8002020:	211c      	movs	r1, #28
 8002022:	2301      	movs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	4298      	cmp	r0, r3
 8002028:	d301      	bcc.n	800202e <__clzsi2+0xe>
 800202a:	0c00      	lsrs	r0, r0, #16
 800202c:	3910      	subs	r1, #16
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	4298      	cmp	r0, r3
 8002032:	d301      	bcc.n	8002038 <__clzsi2+0x18>
 8002034:	0a00      	lsrs	r0, r0, #8
 8002036:	3908      	subs	r1, #8
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	4298      	cmp	r0, r3
 800203c:	d301      	bcc.n	8002042 <__clzsi2+0x22>
 800203e:	0900      	lsrs	r0, r0, #4
 8002040:	3904      	subs	r1, #4
 8002042:	a202      	add	r2, pc, #8	; (adr r2, 800204c <__clzsi2+0x2c>)
 8002044:	5c10      	ldrb	r0, [r2, r0]
 8002046:	1840      	adds	r0, r0, r1
 8002048:	4770      	bx	lr
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	02020304 	.word	0x02020304
 8002050:	01010101 	.word	0x01010101
	...

0800205c <Crank_Init>:
uint8_t Crank_MissingTeethNmbr_P = 1;// Global Parameter for missing number of teeth on the Crankshaft
// TODO add a parameter which varries threshold for missing tooth detection algorithm


/* All Possible Init Stuff */
void Crank_Init(){
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	Crank_DivAngle = 360/Crank_TeethNmbr_P;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <Crank_Init+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	0019      	movs	r1, r3
 8002066:	23b4      	movs	r3, #180	; 0xb4
 8002068:	0058      	lsls	r0, r3, #1
 800206a:	f7fe f8d7 	bl	800021c <__divsi3>
 800206e:	0003      	movs	r3, r0
 8002070:	001a      	movs	r2, r3
 8002072:	4b03      	ldr	r3, [pc, #12]	; (8002080 <Crank_Init+0x24>)
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	20000060 	.word	0x20000060

08002084 <Crank_HalGeberDriver>:

/* Driver for calculating the speed and resetting the counter upon empty slot */
void Crank_HalGeberDriver(TIM_HandleTypeDef *htim){
 8002084:	b5b0      	push	{r4, r5, r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	uint16_t capturedValue;
	//int Crank_ShaftFreqHzRaw = 0;
	//channelId = PWM_IC_CHANNEL_FLOW_METER;

	// Get CCR register for the specific Timer and Channel
	capturedValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2104      	movs	r1, #4
 8002090:	0018      	movs	r0, r3
 8002092:	f002 fe15 	bl	8004cc0 <HAL_TIM_ReadCapturedValue>
 8002096:	0002      	movs	r2, r0
 8002098:	210e      	movs	r1, #14
 800209a:	187b      	adds	r3, r7, r1
 800209c:	801a      	strh	r2, [r3, #0]

	if( capturedValue > Crank_LastCapturedEdgeTime )
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <Crank_HalGeberDriver+0x174>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	187a      	adds	r2, r7, r1
 80020a4:	8812      	ldrh	r2, [r2, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d909      	bls.n	80020be <Crank_HalGeberDriver+0x3a>
		// Compute the input signal frequency
		Crank_RotDelta = capturedValue - Crank_LastCapturedEdgeTime;
 80020aa:	230e      	movs	r3, #14
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <Crank_HalGeberDriver+0x174>)
 80020b2:	8812      	ldrh	r2, [r2, #0]
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	001a      	movs	r2, r3
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <Crank_HalGeberDriver+0x178>)
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e00b      	b.n	80020d6 <Crank_HalGeberDriver+0x52>
	else
	// Timer counter overflow
		Crank_RotDelta = ( 0xFFFF - Crank_LastCapturedEdgeTime ) + capturedValue;
 80020be:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <Crank_HalGeberDriver+0x174>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	001a      	movs	r2, r3
 80020c4:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <Crank_HalGeberDriver+0x17c>)
 80020c6:	1a9a      	subs	r2, r3, r2
 80020c8:	230e      	movs	r3, #14
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	001a      	movs	r2, r3
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <Crank_HalGeberDriver+0x178>)
 80020d4:	601a      	str	r2, [r3, #0]

	// Compute the input signal frequency
	Crank_RotDelta = Crank_RotDelta*(1+htim->Instance->PSC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <Crank_HalGeberDriver+0x178>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	435a      	muls	r2, r3
 80020e4:	4b45      	ldr	r3, [pc, #276]	; (80021fc <Crank_HalGeberDriver+0x178>)
 80020e6:	601a      	str	r2, [r3, #0]
	Crank_ShaftFreqHzRaw = HAL_RCC_GetPCLK1Freq()/Crank_RotDelta/(Crank_TeethNmbr_P+1);  // calculate frequency
 80020e8:	f002 f88e 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80020ec:	0002      	movs	r2, r0
 80020ee:	4b43      	ldr	r3, [pc, #268]	; (80021fc <Crank_HalGeberDriver+0x178>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0019      	movs	r1, r3
 80020f4:	0010      	movs	r0, r2
 80020f6:	f7fe f807 	bl	8000108 <__udivsi3>
 80020fa:	0003      	movs	r3, r0
 80020fc:	001a      	movs	r2, r3
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <Crank_HalGeberDriver+0x180>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f7fd fffe 	bl	8000108 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	001a      	movs	r2, r3
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <Crank_HalGeberDriver+0x184>)
 8002112:	601a      	str	r2, [r3, #0]

	// Update the last captured value
	Crank_LastCapturedEdgeTime = capturedValue;
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <Crank_HalGeberDriver+0x174>)
 8002116:	220e      	movs	r2, #14
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	801a      	strh	r2, [r3, #0]
	Crank_PosDiff = Crank_RotDelta;
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <Crank_HalGeberDriver+0x178>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <Crank_HalGeberDriver+0x188>)
 8002124:	601a      	str	r2, [r3, #0]

	// Check for the empty tooth - if the difference between timestamps is bigger than usually.
	if(((Crank_PosDiff-Crank_PosDiffOld) >= 0.7*Crank_PosDiffOld) && (Crank_PosDiff >= Crank_PosDiffOld)){
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <Crank_HalGeberDriver+0x188>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <Crank_HalGeberDriver+0x18c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff fe6d 	bl	8001e10 <__aeabi_ui2d>
 8002136:	0004      	movs	r4, r0
 8002138:	000d      	movs	r5, r1
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <Crank_HalGeberDriver+0x18c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff fe66 	bl	8001e10 <__aeabi_ui2d>
 8002144:	4a33      	ldr	r2, [pc, #204]	; (8002214 <Crank_HalGeberDriver+0x190>)
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <Crank_HalGeberDriver+0x194>)
 8002148:	f7ff fb80 	bl	800184c <__aeabi_dmul>
 800214c:	0002      	movs	r2, r0
 800214e:	000b      	movs	r3, r1
 8002150:	0020      	movs	r0, r4
 8002152:	0029      	movs	r1, r5
 8002154:	f7fe f982 	bl	800045c <__aeabi_dcmpge>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d01f      	beq.n	800219c <Crank_HalGeberDriver+0x118>
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <Crank_HalGeberDriver+0x188>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <Crank_HalGeberDriver+0x18c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d319      	bcc.n	800219c <Crank_HalGeberDriver+0x118>
		Crank_PosDiffOld = Crank_PosDiff;
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <Crank_HalGeberDriver+0x188>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <Crank_HalGeberDriver+0x18c>)
 800216e:	601a      	str	r2, [r3, #0]

		Crank_ShaftFreqHz = Crank_ShaftFreqHz; // take the last valid value in case the tooth is missing
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <Crank_HalGeberDriver+0x198>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <Crank_HalGeberDriver+0x198>)
 8002176:	601a      	str	r2, [r3, #0]
		if (Crank_TeethCount >= Crank_TeethNmbr_P-1){
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <Crank_HalGeberDriver+0x19c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	001a      	movs	r2, r3
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <Crank_HalGeberDriver+0x180>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3b01      	subs	r3, #1
 8002184:	429a      	cmp	r2, r3
 8002186:	db03      	blt.n	8002190 <Crank_HalGeberDriver+0x10c>
			Crank_bErrToothJump = 1;
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <Crank_HalGeberDriver+0x1a0>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e002      	b.n	8002196 <Crank_HalGeberDriver+0x112>
		}else
			Crank_bErrToothJump = 0;
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <Crank_HalGeberDriver+0x1a0>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
		Crank_TeethCounterReset();					// reset the counter due to the larger space between teeth
 8002196:	f000 f849 	bl	800222c <Crank_TeethCounterReset>
 800219a:	e028      	b.n	80021ee <Crank_HalGeberDriver+0x16a>
	}
	else{
		Crank_PosDiffOld = Crank_PosDiff;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <Crank_HalGeberDriver+0x188>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <Crank_HalGeberDriver+0x18c>)
 80021a2:	601a      	str	r2, [r3, #0]
		Crank_ShaftFreqHz = 0.5*Crank_ShaftFreqHz + 0.5*Crank_ShaftFreqHzRaw; // filter frequency if the tooth isnt missing
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <Crank_HalGeberDriver+0x198>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff fdf7 	bl	8001d9c <__aeabi_i2d>
 80021ae:	2200      	movs	r2, #0
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <Crank_HalGeberDriver+0x1a4>)
 80021b2:	f7ff fb4b 	bl	800184c <__aeabi_dmul>
 80021b6:	0003      	movs	r3, r0
 80021b8:	000c      	movs	r4, r1
 80021ba:	0025      	movs	r5, r4
 80021bc:	001c      	movs	r4, r3
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <Crank_HalGeberDriver+0x184>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff fdea 	bl	8001d9c <__aeabi_i2d>
 80021c8:	2200      	movs	r2, #0
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <Crank_HalGeberDriver+0x1a4>)
 80021cc:	f7ff fb3e 	bl	800184c <__aeabi_dmul>
 80021d0:	0002      	movs	r2, r0
 80021d2:	000b      	movs	r3, r1
 80021d4:	0020      	movs	r0, r4
 80021d6:	0029      	movs	r1, r5
 80021d8:	f7fe ff14 	bl	8001004 <__aeabi_dadd>
 80021dc:	0003      	movs	r3, r0
 80021de:	000c      	movs	r4, r1
 80021e0:	0018      	movs	r0, r3
 80021e2:	0021      	movs	r1, r4
 80021e4:	f7ff fda4 	bl	8001d30 <__aeabi_d2iz>
 80021e8:	0002      	movs	r2, r0
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <Crank_HalGeberDriver+0x198>)
 80021ec:	601a      	str	r2, [r3, #0]
		//Crank_TeethCount++;
	}
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000068 	.word	0x20000068
 80021fc:	20000050 	.word	0x20000050
 8002200:	0000ffff 	.word	0x0000ffff
 8002204:	20000000 	.word	0x20000000
 8002208:	2000004c 	.word	0x2000004c
 800220c:	20000054 	.word	0x20000054
 8002210:	20000058 	.word	0x20000058
 8002214:	66666666 	.word	0x66666666
 8002218:	3fe66666 	.word	0x3fe66666
 800221c:	20000048 	.word	0x20000048
 8002220:	2000005c 	.word	0x2000005c
 8002224:	2000006a 	.word	0x2000006a
 8002228:	3fe00000 	.word	0x3fe00000

0800222c <Crank_TeethCounterReset>:

/* Helper funcion for Teeth Counter reset */
void Crank_TeethCounterReset(){
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	Crank_TeethCount = 1;
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <Crank_TeethCounterReset+0x10>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000005c 	.word	0x2000005c

08002240 <Crank_TeethCounter>:

/* Teeth Counter */
void Crank_TeethCounter(){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	if (Crank_TeethCount < Crank_TeethNmbr_P)
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <Crank_TeethCounter+0x28>)
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <Crank_TeethCounter+0x2c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d206      	bcs.n	800225e <Crank_TeethCounter+0x1e>
		Crank_TeethCount = Crank_TeethCount + 1;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <Crank_TeethCounter+0x28>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <Crank_TeethCounter+0x28>)
 800225a:	701a      	strb	r2, [r3, #0]
	else
		Crank_TeethCounterReset();
}
 800225c:	e001      	b.n	8002262 <Crank_TeethCounter+0x22>
		Crank_TeethCounterReset();
 800225e:	f7ff ffe5 	bl	800222c <Crank_TeethCounterReset>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000005c 	.word	0x2000005c
 800226c:	20000000 	.word	0x20000000

08002270 <Crank_AngleCalc>:

/* Calculation of Crankshaft angle */
void Crank_AngleCalc(){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	Crank_TeethCounter();
 8002274:	f7ff ffe4 	bl	8002240 <Crank_TeethCounter>
	Crank_Angle = 360*(Crank_TeethCount-1)/(Crank_TeethNmbr_P+Crank_MissingTeethNmbr_P);
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <Crank_AngleCalc+0x40>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	0013      	movs	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	189b      	adds	r3, r3, r2
 8002284:	011a      	lsls	r2, r3, #4
 8002286:	1ad2      	subs	r2, r2, r3
 8002288:	00d3      	lsls	r3, r2, #3
 800228a:	001a      	movs	r2, r3
 800228c:	0010      	movs	r0, r2
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <Crank_AngleCalc+0x44>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <Crank_AngleCalc+0x48>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	0019      	movs	r1, r3
 800229c:	f7fd ffbe 	bl	800021c <__divsi3>
 80022a0:	0003      	movs	r3, r0
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <Crank_AngleCalc+0x4c>)
 80022a6:	801a      	strh	r2, [r3, #0]
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	2000005c 	.word	0x2000005c
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000001 	.word	0x20000001
 80022bc:	2000005e 	.word	0x2000005e

080022c0 <Crank_CamPositionSync>:

/* Used to synchronise angle calculation considering twice slower rotation of camshaft */
void Crank_CamPositionSync(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	Engine_Angle = Crank_Angle + Cam_CycleStart*360;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <Crank_CamPositionSync+0x24>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	22b4      	movs	r2, #180	; 0xb4
 80022cc:	0052      	lsls	r2, r2, #1
 80022ce:	4353      	muls	r3, r2
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <Crank_CamPositionSync+0x28>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	18d3      	adds	r3, r2, r3
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <Crank_CamPositionSync+0x2c>)
 80022dc:	801a      	strh	r2, [r3, #0]
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000066 	.word	0x20000066
 80022e8:	2000005e 	.word	0x2000005e
 80022ec:	20000064 	.word	0x20000064

080022f0 <Ignition_DefineIgnitionTeeth>:

int *pAwellTimeUs = &Ignition_DwellTimeUs;
int *pAngleDegree = &Ignition_AngleDegree;


int Ignition_DefineIgnitionTeeth(int AngleOfIgnition,uint8_t CrankTeethNmbr, uint8_t CrankMissingTeethNmbr){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	0008      	movs	r0, r1
 80022fa:	0011      	movs	r1, r2
 80022fc:	1cfb      	adds	r3, r7, #3
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	1cbb      	adds	r3, r7, #2
 8002304:	1c0a      	adds	r2, r1, #0
 8002306:	701a      	strb	r2, [r3, #0]
	int triggerTooth = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
	triggerTooth = (CrankTeethNmbr+CrankMissingTeethNmbr)*AngleOfIgnition/360+1;
 800230c:	1cfb      	adds	r3, r7, #3
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	1cbb      	adds	r3, r7, #2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	435a      	muls	r2, r3
 800231a:	23b4      	movs	r3, #180	; 0xb4
 800231c:	0059      	lsls	r1, r3, #1
 800231e:	0010      	movs	r0, r2
 8002320:	f7fd ff7c 	bl	800021c <__divsi3>
 8002324:	0003      	movs	r3, r0
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
	return triggerTooth;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}

08002334 <Ignition_SetIgnitionTiming>:

void Ignition_SetIgnitionTiming(int CylId, int AngleOfIgnition, int CrankShaftHz, uint8_t CrankTeethNmbr, uint8_t CrankMissingTeethNmbr){
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	001a      	movs	r2, r3
 8002342:	1cfb      	adds	r3, r7, #3
 8002344:	701a      	strb	r2, [r3, #0]
	int TriggerTooth;
	TriggerTooth = Ignition_DefineIgnitionTeeth(AngleOfIgnition,CrankTeethNmbr,CrankMissingTeethNmbr);
 8002346:	2328      	movs	r3, #40	; 0x28
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	1cfb      	adds	r3, r7, #3
 800234e:	7819      	ldrb	r1, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff ffcc 	bl	80022f0 <Ignition_DefineIgnitionTeeth>
 8002358:	0003      	movs	r3, r0
 800235a:	61fb      	str	r3, [r7, #28]
	float triggerAngle;
	float delayAngle;
	uint32_t Ignition_TimeToFire;

	// Perform correction if angle is after the missing teeth
	if (TriggerTooth == CrankTeethNmbr){
 800235c:	1cfb      	adds	r3, r7, #3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d104      	bne.n	8002370 <Ignition_SetIgnitionTiming+0x3c>
		TriggerTooth = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
		delayAngle = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e02a      	b.n	80023c6 <Ignition_SetIgnitionTiming+0x92>
	}
	else{
		triggerAngle = (TriggerTooth-1)*360/(CrankTeethNmbr+CrankMissingTeethNmbr);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	0013      	movs	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	189b      	adds	r3, r3, r2
 800237a:	011a      	lsls	r2, r3, #4
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	00d3      	lsls	r3, r2, #3
 8002380:	001a      	movs	r2, r3
 8002382:	0010      	movs	r0, r2
 8002384:	1cfb      	adds	r3, r7, #3
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	2328      	movs	r3, #40	; 0x28
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	18d3      	adds	r3, r2, r3
 8002390:	0019      	movs	r1, r3
 8002392:	f7fd ff43 	bl	800021c <__divsi3>
 8002396:	0003      	movs	r3, r0
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe fda9 	bl	8000ef0 <__aeabi_i2f>
 800239e:	1c03      	adds	r3, r0, #0
 80023a0:	617b      	str	r3, [r7, #20]
		delayAngle = AngleOfIgnition - triggerAngle;
 80023a2:	68b8      	ldr	r0, [r7, #8]
 80023a4:	f7fe fda4 	bl	8000ef0 <__aeabi_i2f>
 80023a8:	1c03      	adds	r3, r0, #0
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	1c18      	adds	r0, r3, #0
 80023ae:	f7fe fbbb 	bl	8000b28 <__aeabi_fsub>
 80023b2:	1c03      	adds	r3, r0, #0
 80023b4:	613b      	str	r3, [r7, #16]
		Ignition_TimeToFire = Ignition_AngleToUs(CrankShaftHz,delayAngle);
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1c11      	adds	r1, r2, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f843 	bl	8002448 <Ignition_AngleToUs>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
	}

	/* correction in case CCR and ARR dont work with 0
	 *
	 */
	if (Ignition_TimeToFire == 0)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <Ignition_SetIgnitionTiming+0x9c>
		Ignition_TimeToFire = 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]


	switch (CylId)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d00f      	beq.n	80023f6 <Ignition_SetIgnitionTiming+0xc2>
 80023d6:	dc02      	bgt.n	80023de <Ignition_SetIgnitionTiming+0xaa>
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d005      	beq.n	80023e8 <Ignition_SetIgnitionTiming+0xb4>
	case 4:
		Ignition_FireToothCyl4 = TriggerTooth;
		Ignition_TimeToFireCyl4 = Ignition_TimeToFire;
		break;
	}
}
 80023dc:	e020      	b.n	8002420 <Ignition_SetIgnitionTiming+0xec>
	switch (CylId)
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d010      	beq.n	8002404 <Ignition_SetIgnitionTiming+0xd0>
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d015      	beq.n	8002412 <Ignition_SetIgnitionTiming+0xde>
}
 80023e6:	e01b      	b.n	8002420 <Ignition_SetIgnitionTiming+0xec>
		Ignition_FireToothCyl1 = TriggerTooth;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <Ignition_SetIgnitionTiming+0xf4>)
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	601a      	str	r2, [r3, #0]
		Ignition_TimeToFireCyl1 = Ignition_TimeToFire;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <Ignition_SetIgnitionTiming+0xf8>)
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	601a      	str	r2, [r3, #0]
		break;
 80023f4:	e014      	b.n	8002420 <Ignition_SetIgnitionTiming+0xec>
		Ignition_FireToothCyl2 = TriggerTooth;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <Ignition_SetIgnitionTiming+0xfc>)
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	601a      	str	r2, [r3, #0]
		Ignition_TimeToFireCyl2 = Ignition_TimeToFire;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <Ignition_SetIgnitionTiming+0x100>)
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	601a      	str	r2, [r3, #0]
		break;
 8002402:	e00d      	b.n	8002420 <Ignition_SetIgnitionTiming+0xec>
		Ignition_FireToothCyl3 = TriggerTooth;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <Ignition_SetIgnitionTiming+0x104>)
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	601a      	str	r2, [r3, #0]
		Ignition_TimeToFireCyl3 = Ignition_TimeToFire;
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <Ignition_SetIgnitionTiming+0x108>)
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]
		break;
 8002410:	e006      	b.n	8002420 <Ignition_SetIgnitionTiming+0xec>
		Ignition_FireToothCyl4 = TriggerTooth;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <Ignition_SetIgnitionTiming+0x10c>)
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	601a      	str	r2, [r3, #0]
		Ignition_TimeToFireCyl4 = Ignition_TimeToFire;
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <Ignition_SetIgnitionTiming+0x110>)
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	601a      	str	r2, [r3, #0]
		break;
 800241e:	46c0      	nop			; (mov r8, r8)
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b008      	add	sp, #32
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000004 	.word	0x20000004
 800242c:	2000006c 	.word	0x2000006c
 8002430:	20000008 	.word	0x20000008
 8002434:	20000070 	.word	0x20000070
 8002438:	2000000c 	.word	0x2000000c
 800243c:	20000074 	.word	0x20000074
 8002440:	20000010 	.word	0x20000010
 8002444:	20000078 	.word	0x20000078

08002448 <Ignition_AngleToUs>:

uint32_t Ignition_AngleToUs(int CrankShaftHz, float AngleDegree){
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	return HAL_RCC_GetPCLK1Freq()*AngleDegree/360/CrankShaftHz/TIM22->PSC;
 8002452:	f001 fed9 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8002456:	0003      	movs	r3, r0
 8002458:	0018      	movs	r0, r3
 800245a:	f7fe fd93 	bl	8000f84 <__aeabi_ui2f>
 800245e:	1c03      	adds	r3, r0, #0
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	1c18      	adds	r0, r3, #0
 8002464:	f7fe fa2e 	bl	80008c4 <__aeabi_fmul>
 8002468:	1c03      	adds	r3, r0, #0
 800246a:	4911      	ldr	r1, [pc, #68]	; (80024b0 <Ignition_AngleToUs+0x68>)
 800246c:	1c18      	adds	r0, r3, #0
 800246e:	f7fe f851 	bl	8000514 <__aeabi_fdiv>
 8002472:	1c03      	adds	r3, r0, #0
 8002474:	1c1c      	adds	r4, r3, #0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fd3a 	bl	8000ef0 <__aeabi_i2f>
 800247c:	1c03      	adds	r3, r0, #0
 800247e:	1c19      	adds	r1, r3, #0
 8002480:	1c20      	adds	r0, r4, #0
 8002482:	f7fe f847 	bl	8000514 <__aeabi_fdiv>
 8002486:	1c03      	adds	r3, r0, #0
 8002488:	1c1c      	adds	r4, r3, #0
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <Ignition_AngleToUs+0x6c>)
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	0018      	movs	r0, r3
 8002490:	f7fe fd78 	bl	8000f84 <__aeabi_ui2f>
 8002494:	1c03      	adds	r3, r0, #0
 8002496:	1c19      	adds	r1, r3, #0
 8002498:	1c20      	adds	r0, r4, #0
 800249a:	f7fe f83b 	bl	8000514 <__aeabi_fdiv>
 800249e:	1c03      	adds	r3, r0, #0
 80024a0:	1c18      	adds	r0, r3, #0
 80024a2:	f7fe f81f 	bl	80004e4 <__aeabi_f2uiz>
 80024a6:	0003      	movs	r3, r0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b003      	add	sp, #12
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	43b40000 	.word	0x43b40000
 80024b4:	40011400 	.word	0x40011400

080024b8 <Ignition_FireCylinder>:


void Ignition_FireCylinder(int CylId){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	uint32_t fireStartInUs = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
	switch (CylId)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d00f      	beq.n	80024ea <Ignition_FireCylinder+0x32>
 80024ca:	dc02      	bgt.n	80024d2 <Ignition_FireCylinder+0x1a>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d005      	beq.n	80024dc <Ignition_FireCylinder+0x24>
 80024d0:	e01a      	b.n	8002508 <Ignition_FireCylinder+0x50>
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d00d      	beq.n	80024f2 <Ignition_FireCylinder+0x3a>
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d012      	beq.n	8002500 <Ignition_FireCylinder+0x48>
 80024da:	e015      	b.n	8002508 <Ignition_FireCylinder+0x50>
	{
	case 1:
		fireStartInUs = Ignition_TimeToFireCyl1;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <Ignition_FireCylinder+0x84>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
		Ignition_CoilStateCyl1 = FIRE;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <Ignition_FireCylinder+0x88>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
		break;
 80024e8:	e00e      	b.n	8002508 <Ignition_FireCylinder+0x50>
	case 2:
		fireStartInUs = Ignition_TimeToFireCyl2;
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <Ignition_FireCylinder+0x8c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
		break;
 80024f0:	e00a      	b.n	8002508 <Ignition_FireCylinder+0x50>
	case 3:
		fireStartInUs = Ignition_TimeToFireCyl3;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <Ignition_FireCylinder+0x90>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
		Ignition_CoilStateCyl3 = FIRE;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <Ignition_FireCylinder+0x94>)
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
		break;
 80024fe:	e003      	b.n	8002508 <Ignition_FireCylinder+0x50>
	case 4:
		fireStartInUs = Ignition_TimeToFireCyl4;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <Ignition_FireCylinder+0x98>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
		break;
 8002506:	46c0      	nop			; (mov r8, r8)
	}
	// set proper GPIO to choose the cylinder (1,2,3,4)?
	// toggle the timer which will start counting to fire dwelling and then spark
	TIM22->ARR = fireStartInUs + 100;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <Ignition_FireCylinder+0x9c>)
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	3264      	adds	r2, #100	; 0x64
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM22->CCR1 = fireStartInUs;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <Ignition_FireCylinder+0x9c>)
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
	TIM22->CCR2 = TIM22->ARR+10;//to disable
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <Ignition_FireCylinder+0x9c>)
 8002518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <Ignition_FireCylinder+0x9c>)
 800251c:	320a      	adds	r2, #10
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM22->EGR = 1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <Ignition_FireCylinder+0x9c>)
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]
	TIM22->CR1 |= TIM_CR1_CEN;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <Ignition_FireCylinder+0x9c>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <Ignition_FireCylinder+0x9c>)
 800252c:	2101      	movs	r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
	 // TODO only for cyl1
	//HAL_TIM_OnePulse_Start(TIM22,1);
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	2000006c 	.word	0x2000006c
 8002540:	2000007c 	.word	0x2000007c
 8002544:	20000070 	.word	0x20000070
 8002548:	20000074 	.word	0x20000074
 800254c:	2000007d 	.word	0x2000007d
 8002550:	20000078 	.word	0x20000078
 8002554:	40011400 	.word	0x40011400

08002558 <Ignition_DwellCylinder>:


void Ignition_DwellCylinder(int CylId,int dwellStartInUs){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]

	switch (CylId)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d00e      	beq.n	8002586 <Ignition_DwellCylinder+0x2e>
 8002568:	dc02      	bgt.n	8002570 <Ignition_DwellCylinder+0x18>
 800256a:	2b01      	cmp	r3, #1
 800256c:	d003      	beq.n	8002576 <Ignition_DwellCylinder+0x1e>
 800256e:	e00b      	b.n	8002588 <Ignition_DwellCylinder+0x30>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d004      	beq.n	800257e <Ignition_DwellCylinder+0x26>
		//fireStartInUs = Ignition_TimeToFireCyl3;
		Ignition_CoilStateCyl3 = DWELL;
		break;
	case 4:
		//fireStartInUs = Ignition_TimeToFireCyl4;
		break;
 8002574:	e008      	b.n	8002588 <Ignition_DwellCylinder+0x30>
		Ignition_CoilStateCyl1 = DWELL;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <Ignition_DwellCylinder+0x60>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
		break;
 800257c:	e004      	b.n	8002588 <Ignition_DwellCylinder+0x30>
		Ignition_CoilStateCyl3 = DWELL;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <Ignition_DwellCylinder+0x64>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
		break;
 8002584:	e000      	b.n	8002588 <Ignition_DwellCylinder+0x30>
		break;
 8002586:	46c0      	nop			; (mov r8, r8)
	}
	// Dwell selected ignition coil for cylinder
	//TIM22->CCR1 = TIM22->ARR+1;
	//TIM22->CCR2 = 10;
	TIM22->ARR = 100;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 800258a:	2264      	movs	r2, #100	; 0x64
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM22->CCR1 = 10;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 8002590:	220a      	movs	r2, #10
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
	TIM22->CCR2 = TIM22->ARR+10;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 800259a:	320a      	adds	r2, #10
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM22->EGR = 1;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	615a      	str	r2, [r3, #20]
	TIM22->CR1 |= TIM_CR1_CEN;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <Ignition_DwellCylinder+0x68>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
	//Ignition_CoilStateCyl1 = DWELL;
	//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000007c 	.word	0x2000007c
 80025bc:	2000007d 	.word	0x2000007d
 80025c0:	40011400 	.word	0x40011400

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c8:	f000 fd6e 	bl	80030a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025cc:	f000 f830 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d0:	f000 fa3a 	bl	8002a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 80025d4:	f000 f8ae 	bl	8002734 <MX_TIM2_Init>
  MX_TIM22_Init();
 80025d8:	f000 f9a4 	bl	8002924 <MX_TIM22_Init>
  MX_TIM21_Init();
 80025dc:	f000 f926 	bl	800282c <MX_TIM21_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80025e0:	f000 f882 	bl	80026e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Start all TIM channels and Interrupts related to TIM
  HAL_TIM_OnePulse_Start_IT(&htim22, TIM_CHANNEL_1);
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <main+0x60>)
 80025e6:	2100      	movs	r1, #0
 80025e8:	0018      	movs	r0, r3
 80025ea:	f001 fff6 	bl	80045da <HAL_TIM_OnePulse_Start_IT>
  //HAL_TIM_OnePulse_Start_IT(&htim22, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim22);
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <main+0x60>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f001 fe4b 	bl	800428c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_IC_Start_DMA(&htim2,	 HAL_TIM_ACTIVE_CHANNEL_2,	 (uint32_t*)	 captures,	 2);
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim21);
   */

  HAL_TIM_Base_Start_IT(&htim21);
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <main+0x64>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f001 fe47 	bl	800428c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <main+0x68>)
 8002600:	2104      	movs	r1, #4
 8002602:	0018      	movs	r0, r3
 8002604:	f001 ff52 	bl	80044ac <HAL_TIM_IC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_2);
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <main+0x64>)
 800260a:	2104      	movs	r1, #4
 800260c:	0018      	movs	r0, r3
 800260e:	f001 fe93 	bl	8004338 <HAL_TIM_OC_Start_IT>

  HAL_Delay(500);
 8002612:	23fa      	movs	r3, #250	; 0xfa
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fdb6 	bl	8003188 <HAL_Delay>

  /* All module Inits */
  Crank_Init();
 800261c:	f7ff fd1e 	bl	800205c <Crank_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002620:	e7fe      	b.n	8002620 <main+0x5c>
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	2000008c 	.word	0x2000008c
 8002628:	20000114 	.word	0x20000114
 800262c:	200000d8 	.word	0x200000d8

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b095      	sub	sp, #84	; 0x54
 8002634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002636:	2418      	movs	r4, #24
 8002638:	193b      	adds	r3, r7, r4
 800263a:	0018      	movs	r0, r3
 800263c:	2338      	movs	r3, #56	; 0x38
 800263e:	001a      	movs	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	f002 ff13 	bl	800546c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	0018      	movs	r0, r3
 800264a:	2314      	movs	r3, #20
 800264c:	001a      	movs	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	f002 ff0c 	bl	800546c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <SystemClock_Config+0xb0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <SystemClock_Config+0xb4>)
 800265a:	401a      	ands	r2, r3
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <SystemClock_Config+0xb0>)
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002666:	0021      	movs	r1, r4
 8002668:	187b      	adds	r3, r7, r1
 800266a:	2202      	movs	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2201      	movs	r2, #1
 8002672:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2210      	movs	r2, #16
 8002678:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2202      	movs	r2, #2
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2200      	movs	r2, #0
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	02d2      	lsls	r2, r2, #11
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	03d2      	lsls	r2, r2, #15
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002696:	187b      	adds	r3, r7, r1
 8002698:	0018      	movs	r0, r3
 800269a:	f001 f83d 	bl	8003718 <HAL_RCC_OscConfig>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80026a2:	f000 fb79 	bl	8002d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	220f      	movs	r2, #15
 80026aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2203      	movs	r2, #3
 80026b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2101      	movs	r1, #1
 80026c8:	0018      	movs	r0, r3
 80026ca:	f001 fbe5 	bl	8003e98 <HAL_RCC_ClockConfig>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d001      	beq.n	80026d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026d2:	f000 fb61 	bl	8002d98 <Error_Handler>
  }
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b015      	add	sp, #84	; 0x54
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40007000 	.word	0x40007000
 80026e4:	ffffe7ff 	.word	0xffffe7ff

080026e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* TIM21_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	2014      	movs	r0, #20
 80026f2:	f000 fe13 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80026f6:	2014      	movs	r0, #20
 80026f8:	f000 fe25 	bl	8003346 <HAL_NVIC_EnableIRQ>
  /* TIM22_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	2016      	movs	r0, #22
 8002702:	f000 fe0b 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8002706:	2016      	movs	r0, #22
 8002708:	f000 fe1d 	bl	8003346 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	200f      	movs	r0, #15
 8002712:	f000 fe03 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002716:	200f      	movs	r0, #15
 8002718:	f000 fe15 	bl	8003346 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2102      	movs	r1, #2
 8002720:	2007      	movs	r0, #7
 8002722:	f000 fdfb 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002726:	2007      	movs	r0, #7
 8002728:	f000 fe0d 	bl	8003346 <HAL_NVIC_EnableIRQ>
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	2318      	movs	r3, #24
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	0018      	movs	r0, r3
 8002740:	2310      	movs	r3, #16
 8002742:	001a      	movs	r2, r3
 8002744:	2100      	movs	r1, #0
 8002746:	f002 fe91 	bl	800546c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274a:	2310      	movs	r3, #16
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	0018      	movs	r0, r3
 8002750:	2308      	movs	r3, #8
 8002752:	001a      	movs	r2, r3
 8002754:	2100      	movs	r1, #0
 8002756:	f002 fe89 	bl	800546c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800275a:	003b      	movs	r3, r7
 800275c:	0018      	movs	r0, r3
 800275e:	2310      	movs	r3, #16
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f002 fe82 	bl	800546c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <MX_TIM2_Init+0xf0>)
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	05d2      	lsls	r2, r2, #23
 800276e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 43;
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <MX_TIM2_Init+0xf0>)
 8002772:	222b      	movs	r2, #43	; 0x2b
 8002774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <MX_TIM2_Init+0xf0>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <MX_TIM2_Init+0xf0>)
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <MX_TIM2_Init+0xf4>)
 8002780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <MX_TIM2_Init+0xf0>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <MX_TIM2_Init+0xf0>)
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800278e:	4b25      	ldr	r3, [pc, #148]	; (8002824 <MX_TIM2_Init+0xf0>)
 8002790:	0018      	movs	r0, r3
 8002792:	f001 fd4f 	bl	8004234 <HAL_TIM_Base_Init>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800279a:	f000 fafd 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279e:	2118      	movs	r1, #24
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0152      	lsls	r2, r2, #5
 80027a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a8:	187a      	adds	r2, r7, r1
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <MX_TIM2_Init+0xf0>)
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f002 f9c8 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80027b8:	f000 faee 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MX_TIM2_Init+0xf0>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f001 fe40 	bl	8004444 <HAL_TIM_IC_Init>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80027c8:	f000 fae6 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2110      	movs	r1, #16
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027da:	187a      	adds	r2, r7, r1
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_TIM2_Init+0xf0>)
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f002 fddc 	bl	800539e <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80027ea:	f000 fad5 	bl	8002d98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027f4:	003b      	movs	r3, r7
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027fa:	003b      	movs	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002800:	003b      	movs	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002806:	0039      	movs	r1, r7
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_TIM2_Init+0xf0>)
 800280a:	2204      	movs	r2, #4
 800280c:	0018      	movs	r0, r3
 800280e:	f002 f843 	bl	8004898 <HAL_TIM_IC_ConfigChannel>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002816:	f000 fabf 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b00a      	add	sp, #40	; 0x28
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	200000d8 	.word	0x200000d8
 8002828:	0000ffff 	.word	0x0000ffff

0800282c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	2318      	movs	r3, #24
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	2310      	movs	r3, #16
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f002 fe15 	bl	800546c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002842:	2310      	movs	r3, #16
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	0018      	movs	r0, r3
 8002848:	2308      	movs	r3, #8
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f002 fe0d 	bl	800546c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2310      	movs	r3, #16
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f002 fe06 	bl	800546c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <MX_TIM21_Init+0xec>)
 8002862:	4a2e      	ldr	r2, [pc, #184]	; (800291c <MX_TIM21_Init+0xf0>)
 8002864:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <MX_TIM21_Init+0xec>)
 8002868:	221f      	movs	r2, #31
 800286a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <MX_TIM21_Init+0xec>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 10000;
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <MX_TIM21_Init+0xec>)
 8002874:	4a2a      	ldr	r2, [pc, #168]	; (8002920 <MX_TIM21_Init+0xf4>)
 8002876:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <MX_TIM21_Init+0xec>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <MX_TIM21_Init+0xec>)
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MX_TIM21_Init+0xec>)
 8002886:	0018      	movs	r0, r3
 8002888:	f001 fcd4 	bl	8004234 <HAL_TIM_Base_Init>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8002890:	f000 fa82 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	2118      	movs	r1, #24
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	0152      	lsls	r2, r2, #5
 800289c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800289e:	187a      	adds	r2, r7, r1
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <MX_TIM21_Init+0xec>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 f94d 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80028ae:	f000 fa73 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <MX_TIM21_Init+0xec>)
 80028b4:	0018      	movs	r0, r3
 80028b6:	f001 fd0b 	bl	80042d0 <HAL_TIM_OC_Init>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80028be:	f000 fa6b 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c2:	2110      	movs	r1, #16
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80028d0:	187a      	adds	r2, r7, r1
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_TIM21_Init+0xec>)
 80028d4:	0011      	movs	r1, r2
 80028d6:	0018      	movs	r0, r3
 80028d8:	f002 fd61 	bl	800539e <HAL_TIMEx_MasterConfigSynchronization>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80028e0:	f000 fa5a 	bl	8002d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80028e4:	003b      	movs	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028ea:	003b      	movs	r3, r7
 80028ec:	2200      	movs	r2, #0
 80028ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f0:	003b      	movs	r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f6:	003b      	movs	r3, r7
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028fc:	0039      	movs	r1, r7
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_TIM21_Init+0xec>)
 8002900:	2204      	movs	r2, #4
 8002902:	0018      	movs	r0, r3
 8002904:	f001 ff79 	bl	80047fa <HAL_TIM_OC_ConfigChannel>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 800290c:	f000 fa44 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b00a      	add	sp, #40	; 0x28
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000114 	.word	0x20000114
 800291c:	40010800 	.word	0x40010800
 8002920:	00002710 	.word	0x00002710

08002924 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	2318      	movs	r3, #24
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	0018      	movs	r0, r3
 8002930:	2310      	movs	r3, #16
 8002932:	001a      	movs	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	f002 fd99 	bl	800546c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293a:	2310      	movs	r3, #16
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	0018      	movs	r0, r3
 8002940:	2308      	movs	r3, #8
 8002942:	001a      	movs	r2, r3
 8002944:	2100      	movs	r1, #0
 8002946:	f002 fd91 	bl	800546c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	003b      	movs	r3, r7
 800294c:	0018      	movs	r0, r3
 800294e:	2310      	movs	r3, #16
 8002950:	001a      	movs	r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	f002 fd8a 	bl	800546c <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <MX_TIM22_Init+0x11c>)
 800295a:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <MX_TIM22_Init+0x120>)
 800295c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 31;
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002960:	221f      	movs	r2, #31
 8002962:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 10;
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <MX_TIM22_Init+0x11c>)
 800296c:	220a      	movs	r2, #10
 800296e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <MX_TIM22_Init+0x11c>)
 800297e:	0018      	movs	r0, r3
 8002980:	f001 fc58 	bl	8004234 <HAL_TIM_Base_Init>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8002988:	f000 fa06 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298c:	2118      	movs	r1, #24
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	0152      	lsls	r2, r2, #5
 8002994:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002996:	187a      	adds	r2, r7, r1
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <MX_TIM22_Init+0x11c>)
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f002 f8d1 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 80029a6:	f000 f9f7 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <MX_TIM22_Init+0x11c>)
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 fd15 	bl	80043dc <HAL_TIM_PWM_Init>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80029b6:	f000 f9ef 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim22, TIM_OPMODE_SINGLE) != HAL_OK)
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <MX_TIM22_Init+0x11c>)
 80029bc:	2108      	movs	r1, #8
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 fdc6 	bl	8004550 <HAL_TIM_OnePulse_Init>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 80029c8:	f000 f9e6 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029cc:	2110      	movs	r1, #16
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2220      	movs	r2, #32
 80029d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80029da:	187a      	adds	r2, r7, r1
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <MX_TIM22_Init+0x11c>)
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f002 fcdc 	bl	800539e <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM22_Init+0xca>
  {
    Error_Handler();
 80029ea:	f000 f9d5 	bl	8002d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ee:	003b      	movs	r3, r7
 80029f0:	2260      	movs	r2, #96	; 0x60
 80029f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 80029f4:	003b      	movs	r3, r7
 80029f6:	2264      	movs	r2, #100	; 0x64
 80029f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80029fa:	003b      	movs	r3, r7
 80029fc:	2202      	movs	r2, #2
 80029fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a00:	003b      	movs	r3, r7
 8002a02:	2204      	movs	r2, #4
 8002a04:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a06:	0039      	movs	r1, r7
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 ffe1 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM22_Init+0xf6>
  {
    Error_Handler();
 8002a16:	f000 f9bf 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a1a:	0039      	movs	r1, r7
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002a1e:	2204      	movs	r2, #4
 8002a20:	0018      	movs	r0, r3
 8002a22:	f001 ffd7 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8002a2a:	f000 f9b5 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  //__HAL_TIM_ENABLE(&htim22);
  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <MX_TIM22_Init+0x11c>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 fa29 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b00a      	add	sp, #40	; 0x28
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	2000008c 	.word	0x2000008c
 8002a44:	40011400 	.word	0x40011400

08002a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	240c      	movs	r4, #12
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	0018      	movs	r0, r3
 8002a54:	2314      	movs	r3, #20
 8002a56:	001a      	movs	r2, r3
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f002 fd07 	bl	800546c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a64:	2104      	movs	r1, #4
 8002a66:	430a      	orrs	r2, r1
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	2204      	movs	r2, #4
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2201      	movs	r2, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a94:	2102      	movs	r1, #2
 8002a96:	430a      	orrs	r2, r1
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MX_GPIO_Init+0xc0>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_GPIO_Init+0xc4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	210c      	movs	r1, #12
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 fdfa 	bl	80036a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2201      	movs	r2, #1
 8002abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	000c      	movs	r4, r1
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <MX_GPIO_Init+0xc4>)
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f000 fc53 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ada:	0021      	movs	r1, r4
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0052      	lsls	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <MX_GPIO_Init+0xc8>)
 8002ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	187a      	adds	r2, r7, r1
 8002af2:	23a0      	movs	r3, #160	; 0xa0
 8002af4:	05db      	lsls	r3, r3, #23
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fc41 	bl	8003380 <HAL_GPIO_Init>

}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b009      	add	sp, #36	; 0x24
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	50000800 	.word	0x50000800
 8002b10:	10310000 	.word	0x10310000

08002b14 <OS_10msTask>:

/* USER CODE BEGIN 4 */
float angleOfIgnition = 120;
float tempAngle = 0;

void OS_10msTask(){
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af02      	add	r7, sp, #8
	// Call all 10ms related functions
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);
	IgniteDwellTime = 1000;
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <OS_10msTask+0xcc>)
 8002b1c:	22fa      	movs	r2, #250	; 0xfa
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	601a      	str	r2, [r3, #0]
	//TIM22->CCR1 = dwellTime;
	//TIM22->ARR = 2500;
	// angle to spark has to be small enough to fit in the speed but large enough to allow dwell
	// dwell time around 2ms, means that one halfCycle is limited to min 2ms, which is 4ms for one crankshaft rotation which is 250hz with current method (works with 180hz and 130 degrees)
	tempAngle = tempAngle + 0.1;
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <OS_10msTask+0xd0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1c18      	adds	r0, r3, #0
 8002b28:	f7ff f9a4 	bl	8001e74 <__aeabi_f2d>
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <OS_10msTask+0xd4>)
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <OS_10msTask+0xd8>)
 8002b30:	f7fe fa68 	bl	8001004 <__aeabi_dadd>
 8002b34:	0003      	movs	r3, r0
 8002b36:	000c      	movs	r4, r1
 8002b38:	0018      	movs	r0, r3
 8002b3a:	0021      	movs	r1, r4
 8002b3c:	f7ff f9ec 	bl	8001f18 <__aeabi_d2f>
 8002b40:	1c02      	adds	r2, r0, #0
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <OS_10msTask+0xd0>)
 8002b44:	601a      	str	r2, [r3, #0]
	angleOfIgnition = tempAngle;
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <OS_10msTask+0xd0>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <OS_10msTask+0xdc>)
 8002b4c:	601a      	str	r2, [r3, #0]

	angleOfIgnition = 120;
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <OS_10msTask+0xdc>)
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <OS_10msTask+0xe0>)
 8002b52:	601a      	str	r2, [r3, #0]

	if (tempAngle >= 90){
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <OS_10msTask+0xd0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4927      	ldr	r1, [pc, #156]	; (8002bf8 <OS_10msTask+0xe4>)
 8002b5a:	1c18      	adds	r0, r3, #0
 8002b5c:	f7fd fcb8 	bl	80004d0 <__aeabi_fcmpge>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d002      	beq.n	8002b6a <OS_10msTask+0x56>
		tempAngle = 0;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <OS_10msTask+0xd0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
	}

	Ignition_SetIgnitionTiming(1,20,Crank_ShaftFreqHz,Crank_TeethNmbr_P,Crank_MissingTeethNmbr_P);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <OS_10msTask+0xe8>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <OS_10msTask+0xec>)
 8002b70:	7819      	ldrb	r1, [r3, #0]
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <OS_10msTask+0xf0>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	000b      	movs	r3, r1
 8002b7a:	2114      	movs	r1, #20
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff fbd9 	bl	8002334 <Ignition_SetIgnitionTiming>
	Ignition_SetIgnitionTiming(3,130,Crank_ShaftFreqHz,Crank_TeethNmbr_P,Crank_MissingTeethNmbr_P);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <OS_10msTask+0xe8>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <OS_10msTask+0xec>)
 8002b88:	7819      	ldrb	r1, [r3, #0]
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <OS_10msTask+0xf0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	000b      	movs	r3, r1
 8002b92:	2182      	movs	r1, #130	; 0x82
 8002b94:	2003      	movs	r0, #3
 8002b96:	f7ff fbcd 	bl	8002334 <Ignition_SetIgnitionTiming>


	//Ignition_SetIgnitionTiming(2000,angleToIgnite,Crank_ShaftFreqHz);
	//TIM22->CR1 |= TIM_CR1_CEN;
	if (IgniteDwellTime >= 2000)
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <OS_10msTask+0xcc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <OS_10msTask+0xf4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d904      	bls.n	8002bae <OS_10msTask+0x9a>
	  IgniteDwellTime = 1000;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <OS_10msTask+0xcc>)
 8002ba6:	22fa      	movs	r2, #250	; 0xfa
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e004      	b.n	8002bb8 <OS_10msTask+0xa4>
	else
	  IgniteDwellTime = IgniteDwellTime +1;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <OS_10msTask+0xcc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <OS_10msTask+0xcc>)
 8002bb6:	601a      	str	r2, [r3, #0]

	//HAL_Delay(100);
	if (angleToIgnite >= 120){
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <OS_10msTask+0xf8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b77      	cmp	r3, #119	; 0x77
 8002bbe:	dd03      	ble.n	8002bc8 <OS_10msTask+0xb4>
	  angleToIgnite = 80;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <OS_10msTask+0xf8>)
 8002bc2:	2250      	movs	r2, #80	; 0x50
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e004      	b.n	8002bd2 <OS_10msTask+0xbe>
	}
	else
	  angleToIgnite = angleToIgnite + 1;
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <OS_10msTask+0xf8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <OS_10msTask+0xf8>)
 8002bd0:	601a      	str	r2, [r3, #0]
	angleToIgnite = 120;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <OS_10msTask+0xf8>)
 8002bd4:	2278      	movs	r2, #120	; 0x78
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b001      	add	sp, #4
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	20000014 	.word	0x20000014
 8002be4:	20000080 	.word	0x20000080
 8002be8:	9999999a 	.word	0x9999999a
 8002bec:	3fb99999 	.word	0x3fb99999
 8002bf0:	2000001c 	.word	0x2000001c
 8002bf4:	42f00000 	.word	0x42f00000
 8002bf8:	42b40000 	.word	0x42b40000
 8002bfc:	20000048 	.word	0x20000048
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000001 	.word	0x20000001
 8002c08:	000007cf 	.word	0x000007cf
 8002c0c:	20000018 	.word	0x20000018

08002c10 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	if(htim == &htim22){
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d12b      	bne.n	8002c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
		// Ignition OPM TIM Channels
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d127      	bne.n	8002c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>

			// Cylinder 1
			if (Ignition_CoilStateCyl1 == DWELL){
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
				//GPIOC->BSRR = GPIO_PIN_3;
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	2108      	movs	r1, #8
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fd35 	bl	80036a6 <HAL_GPIO_WritePin>
			}
			if (Ignition_CoilStateCyl1 == FIRE){
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d105      	bne.n	8002c50 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
				//GPIOC->BRR = GPIO_PIN_3;
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	2108      	movs	r1, #8
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 fd2b 	bl	80036a6 <HAL_GPIO_WritePin>
			}


			// Cylinder 3
			if (Ignition_CoilStateCyl3 == DWELL){
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
				//GPIOC->BSRR = GPIO_PIN_3; // TODO use different pin in future . the one that corresponds cyl3
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fd21 	bl	80036a6 <HAL_GPIO_WritePin>
			}
			if (Ignition_CoilStateCyl3 == FIRE){
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d105      	bne.n	8002c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
				//GPIOC->BRR = GPIO_PIN_3;; // TODO use different pin in future . the one that corresponds cyl3
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fd17 	bl	80036a6 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
		}
		//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);

	}
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	2000008c 	.word	0x2000008c
 8002c84:	2000007c 	.word	0x2000007c
 8002c88:	50000800 	.word	0x50000800
 8002c8c:	2000007d 	.word	0x2000007d

08002c90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	0002      	movs	r2, r0
 8002c98:	1dbb      	adds	r3, r7, #6
 8002c9a:	801a      	strh	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);
	//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
	if (GPIO_Pin == GPIO_PIN_8){
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d111      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x3c>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	005a      	lsls	r2, r3, #1
 8002cac:	23a0      	movs	r3, #160	; 0xa0
 8002cae:	05db      	lsls	r3, r3, #23
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 fcda 	bl	800366c <HAL_GPIO_ReadPin>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_EXTI_Callback+0x34>
			Cam_CycleStart = 1;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
		else
			Cam_CycleStart = 0;
	}else{
		__NOP();
	}
}
 8002cc2:	e004      	b.n	8002cce <HAL_GPIO_EXTI_Callback+0x3e>
			Cam_CycleStart = 0;
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
}
 8002cca:	e000      	b.n	8002cce <HAL_GPIO_EXTI_Callback+0x3e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	20000066 	.word	0x20000066

08002cdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	if(htim == &htim21){
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d102      	bne.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
		// Call the 10ms task
		OS_10msTask();
 8002cec:	f7ff ff12 	bl	8002b14 <OS_10msTask>
	}else{
		__NOP();
	}

}
 8002cf0:	e000      	b.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x18>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000114 	.word	0x20000114

08002d00 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim ){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]


	if(htim == &htim2){
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d133      	bne.n	8002d78 <HAL_TIM_IC_CaptureCallback+0x78>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e1b      	ldrb	r3, [r3, #24]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d130      	bne.n	8002d7a <HAL_TIM_IC_CaptureCallback+0x7a>
			//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_3);
			// Ignite before halgeber driver, if the tooth is fine. There is huge delay (30-40us) in high speed9:
			Crank_AngleCalc(); // roughly 10us computation time
 8002d18:	f7ff faaa 	bl	8002270 <Crank_AngleCalc>


			//Cam_HalGeberDriver(####);

			Crank_CamPositionSync();
 8002d1c:	f7ff fad0 	bl	80022c0 <Crank_CamPositionSync>

			Crank_HalfCycleFlag = 0; // every reset of the crankshaft (initial value) is start of a new cycle. halfCycle == 1 when we are in the 2nd part of camshaft rotation.
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
			//htim2->Instance->CR1 = 1000;
			//htim2.Instance->CR1 = 1000;

			if (Crank_TeethCount == 1){
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d103      	bne.n	8002d36 <HAL_TIM_IC_CaptureCallback+0x36>
				Ignition_DwellCylinder(1,10);
 8002d2e:	210a      	movs	r1, #10
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fc11 	bl	8002558 <Ignition_DwellCylinder>
				//Ignition_FireCylinder(1);
			}


			if (Crank_TeethCount == Ignition_FireToothCyl1){
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d102      	bne.n	8002d4a <HAL_TIM_IC_CaptureCallback+0x4a>
				//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
				Ignition_FireCylinder(1);
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff fbb7 	bl	80024b8 <Ignition_FireCylinder>
			}

			if (Crank_TeethCount == 6){
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d103      	bne.n	8002d5a <HAL_TIM_IC_CaptureCallback+0x5a>
				Ignition_DwellCylinder(3,10);
 8002d52:	210a      	movs	r1, #10
 8002d54:	2003      	movs	r0, #3
 8002d56:	f7ff fbff 	bl	8002558 <Ignition_DwellCylinder>
				//Ignition_FireCylinder(1);
			}


			if (Crank_TeethCount == Ignition_FireToothCyl3){
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	001a      	movs	r2, r3
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d102      	bne.n	8002d6e <HAL_TIM_IC_CaptureCallback+0x6e>
				//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
				Ignition_FireCylinder(3);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f7ff fba5 	bl	80024b8 <Ignition_FireCylinder>
				else{
					//Ignition_FireCylinderB(4);
				}
			}*/

			Crank_HalGeberDriver(&htim2);
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff f987 	bl	8002084 <Crank_HalGeberDriver>
		}
	}else{
		__NOP();
	}
}
 8002d76:	e000      	b.n	8002d7a <HAL_TIM_IC_CaptureCallback+0x7a>
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200000d8 	.word	0x200000d8
 8002d88:	2000007e 	.word	0x2000007e
 8002d8c:	2000005c 	.word	0x2000005c
 8002d90:	20000004 	.word	0x20000004
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_MspInit+0x24>)
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_MspInit+0x24>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_MspInit+0x24>)
 8002db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_MspInit+0x24>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	0549      	lsls	r1, r1, #21
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000

08002dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	0018      	movs	r0, r3
 8002dda:	2314      	movs	r3, #20
 8002ddc:	001a      	movs	r2, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	f002 fb44 	bl	800546c <memset>
  if(htim_base->Instance==TIM2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d128      	bne.n	8002e42 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e02:	2102      	movs	r1, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e14:	210c      	movs	r1, #12
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2208      	movs	r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2202      	movs	r2, #2
 8002e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2202      	movs	r2, #2
 8002e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_TIM_Base_MspInit+0xb0>)
 8002e38:	0019      	movs	r1, r3
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	f000 faa0 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8002e40:	e016      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM21)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_TIM_Base_MspInit+0xb4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e52:	2104      	movs	r1, #4
 8002e54:	430a      	orrs	r2, r1
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e58:	e00a      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM22)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_TIM_Base_MspInit+0xb8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d105      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_TIM_Base_MspInit+0xac>)
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b008      	add	sp, #32
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	50000400 	.word	0x50000400
 8002e80:	40010800 	.word	0x40010800
 8002e84:	40011400 	.word	0x40011400

08002e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b08b      	sub	sp, #44	; 0x2c
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	2314      	movs	r3, #20
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	0018      	movs	r0, r3
 8002e96:	2314      	movs	r3, #20
 8002e98:	001a      	movs	r2, r3
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	f002 fae6 	bl	800546c <memset>
  if(htim->Instance==TIM22)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_TIM_MspPostInit+0xb4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d144      	bne.n	8002f34 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM22_MspPostInit 0 */

  /* USER CODE END TIM22_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002ec8:	2102      	movs	r1, #2
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /**TIM22 GPIO Configuration
    PA7     ------> TIM22_CH2
    PB4     ------> TIM22_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002eda:	2414      	movs	r4, #20
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	193a      	adds	r2, r7, r4
 8002efc:	23a0      	movs	r3, #160	; 0xa0
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	0011      	movs	r1, r2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 fa3c 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f08:	0021      	movs	r1, r4
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2202      	movs	r2, #2
 8002f14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2204      	movs	r2, #4
 8002f26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	0010      	movs	r0, r2
 8002f30:	f000 fa26 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b00b      	add	sp, #44	; 0x2c
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	40011400 	.word	0x40011400
 8002f40:	40021000 	.word	0x40021000
 8002f44:	50000400 	.word	0x50000400

08002f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <HardFault_Handler+0x4>

08002f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f70:	f000 f8ee 	bl	8003150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fbac 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <TIM2_IRQHandler+0x14>)
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 fb47 	bl	800462a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	200000d8 	.word	0x200000d8

08002fa8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <TIM21_IRQHandler+0x14>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f001 fb3b 	bl	800462a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000114 	.word	0x20000114

08002fc0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <TIM22_IRQHandler+0x14>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fb2f 	bl	800462a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	2000008c 	.word	0x2000008c

08002fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <SystemInit+0x64>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <SystemInit+0x64>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0049      	lsls	r1, r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <SystemInit+0x64>)
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <SystemInit+0x64>)
 8002ff0:	4913      	ldr	r1, [pc, #76]	; (8003040 <SystemInit+0x68>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <SystemInit+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <SystemInit+0x64>)
 8002ffc:	4911      	ldr	r1, [pc, #68]	; (8003044 <SystemInit+0x6c>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <SystemInit+0x64>)
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <SystemInit+0x64>)
 8003008:	2101      	movs	r1, #1
 800300a:	438a      	bics	r2, r1
 800300c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <SystemInit+0x64>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <SystemInit+0x64>)
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <SystemInit+0x70>)
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <SystemInit+0x64>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <SystemInit+0x64>)
 8003020:	490a      	ldr	r1, [pc, #40]	; (800304c <SystemInit+0x74>)
 8003022:	400a      	ands	r2, r1
 8003024:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <SystemInit+0x64>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <SystemInit+0x78>)
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0512      	lsls	r2, r2, #20
 8003032:	609a      	str	r2, [r3, #8]
#endif
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	40021000 	.word	0x40021000
 8003040:	88ff400c 	.word	0x88ff400c
 8003044:	fef6fff6 	.word	0xfef6fff6
 8003048:	fffbffff 	.word	0xfffbffff
 800304c:	ff02ffff 	.word	0xff02ffff
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <Reset_Handler>:
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopForever+0x2>)
 8003056:	4685      	mov	sp, r0
 8003058:	2100      	movs	r1, #0
 800305a:	e003      	b.n	8003064 <LoopCopyDataInit>

0800305c <CopyDataInit>:
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <LoopForever+0x6>)
 800305e:	585b      	ldr	r3, [r3, r1]
 8003060:	5043      	str	r3, [r0, r1]
 8003062:	3104      	adds	r1, #4

08003064 <LoopCopyDataInit>:
 8003064:	480b      	ldr	r0, [pc, #44]	; (8003094 <LoopForever+0xa>)
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <LoopForever+0xe>)
 8003068:	1842      	adds	r2, r0, r1
 800306a:	429a      	cmp	r2, r3
 800306c:	d3f6      	bcc.n	800305c <CopyDataInit>
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <LoopForever+0x12>)
 8003070:	e002      	b.n	8003078 <LoopFillZerobss>

08003072 <FillZerobss>:
 8003072:	2300      	movs	r3, #0
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	3204      	adds	r2, #4

08003078 <LoopFillZerobss>:
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <LoopForever+0x16>)
 800307a:	429a      	cmp	r2, r3
 800307c:	d3f9      	bcc.n	8003072 <FillZerobss>
 800307e:	f7ff ffab 	bl	8002fd8 <SystemInit>
 8003082:	f002 f9cf 	bl	8005424 <__libc_init_array>
 8003086:	f7ff fa9d 	bl	80025c4 <main>

0800308a <LoopForever>:
 800308a:	e7fe      	b.n	800308a <LoopForever>
 800308c:	20002000 	.word	0x20002000
 8003090:	080055c0 	.word	0x080055c0
 8003094:	20000000 	.word	0x20000000
 8003098:	2000002c 	.word	0x2000002c
 800309c:	2000002c 	.word	0x2000002c
 80030a0:	20000154 	.word	0x20000154

080030a4 <ADC1_COMP_IRQHandler>:
 80030a4:	e7fe      	b.n	80030a4 <ADC1_COMP_IRQHandler>
	...

080030a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x3c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_Init+0x3c>)
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c0:	2000      	movs	r0, #0
 80030c2:	f000 f811 	bl	80030e8 <HAL_InitTick>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e001      	b.n	80030d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030d2:	f7ff fe67 	bl	8002da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	781b      	ldrb	r3, [r3, #0]
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_InitTick+0x5c>)
 80030f2:	681c      	ldr	r4, [r3, #0]
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_InitTick+0x60>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0019      	movs	r1, r3
 80030fa:	23fa      	movs	r3, #250	; 0xfa
 80030fc:	0098      	lsls	r0, r3, #2
 80030fe:	f7fd f803 	bl	8000108 <__udivsi3>
 8003102:	0003      	movs	r3, r0
 8003104:	0019      	movs	r1, r3
 8003106:	0020      	movs	r0, r4
 8003108:	f7fc fffe 	bl	8000108 <__udivsi3>
 800310c:	0003      	movs	r3, r0
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f929 	bl	8003366 <HAL_SYSTICK_Config>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d001      	beq.n	800311c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e00f      	b.n	800313c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d80b      	bhi.n	800313a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	2301      	movs	r3, #1
 8003126:	425b      	negs	r3, r3
 8003128:	2200      	movs	r2, #0
 800312a:	0018      	movs	r0, r3
 800312c:	f000 f8f6 	bl	800331c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_InitTick+0x64>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b003      	add	sp, #12
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	20000020 	.word	0x20000020
 8003148:	20000028 	.word	0x20000028
 800314c:	20000024 	.word	0x20000024

08003150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_IncTick+0x1c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	001a      	movs	r2, r3
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_IncTick+0x20>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	18d2      	adds	r2, r2, r3
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_IncTick+0x20>)
 8003162:	601a      	str	r2, [r3, #0]
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	20000028 	.word	0x20000028
 8003170:	20000150 	.word	0x20000150

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <HAL_GetTick+0x10>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	20000150 	.word	0x20000150

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff fff0 	bl	8003174 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_Delay+0x40>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	f7ff ffe0 	bl	8003174 <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000028 	.word	0x20000028

080031cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	0002      	movs	r2, r0
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	001a      	movs	r2, r3
 80031de:	231f      	movs	r3, #31
 80031e0:	401a      	ands	r2, r3
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <NVIC_EnableIRQ+0x28>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	4091      	lsls	r1, r2
 80031e8:	000a      	movs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000e100 	.word	0xe000e100

080031f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	0002      	movs	r2, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	1dfb      	adds	r3, r7, #7
 8003204:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b7f      	cmp	r3, #127	; 0x7f
 800320c:	d932      	bls.n	8003274 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <NVIC_SetPriority+0xd4>)
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	0019      	movs	r1, r3
 8003216:	230f      	movs	r3, #15
 8003218:	400b      	ands	r3, r1
 800321a:	3b08      	subs	r3, #8
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3306      	adds	r3, #6
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	3304      	adds	r3, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1dfa      	adds	r2, r7, #7
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	0011      	movs	r1, r2
 800322e:	2203      	movs	r2, #3
 8003230:	400a      	ands	r2, r1
 8003232:	00d2      	lsls	r2, r2, #3
 8003234:	21ff      	movs	r1, #255	; 0xff
 8003236:	4091      	lsls	r1, r2
 8003238:	000a      	movs	r2, r1
 800323a:	43d2      	mvns	r2, r2
 800323c:	401a      	ands	r2, r3
 800323e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	401a      	ands	r2, r3
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	0018      	movs	r0, r3
 800324e:	2303      	movs	r3, #3
 8003250:	4003      	ands	r3, r0
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003256:	481d      	ldr	r0, [pc, #116]	; (80032cc <NVIC_SetPriority+0xd4>)
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	001c      	movs	r4, r3
 800325e:	230f      	movs	r3, #15
 8003260:	4023      	ands	r3, r4
 8003262:	3b08      	subs	r3, #8
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	430a      	orrs	r2, r1
 8003268:	3306      	adds	r3, #6
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	18c3      	adds	r3, r0, r3
 800326e:	3304      	adds	r3, #4
 8003270:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003272:	e027      	b.n	80032c4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <NVIC_SetPriority+0xd8>)
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b25b      	sxtb	r3, r3
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	33c0      	adds	r3, #192	; 0xc0
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	589b      	ldr	r3, [r3, r2]
 8003284:	1dfa      	adds	r2, r7, #7
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	0011      	movs	r1, r2
 800328a:	2203      	movs	r2, #3
 800328c:	400a      	ands	r2, r1
 800328e:	00d2      	lsls	r2, r2, #3
 8003290:	21ff      	movs	r1, #255	; 0xff
 8003292:	4091      	lsls	r1, r2
 8003294:	000a      	movs	r2, r1
 8003296:	43d2      	mvns	r2, r2
 8003298:	401a      	ands	r2, r3
 800329a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	019b      	lsls	r3, r3, #6
 80032a0:	22ff      	movs	r2, #255	; 0xff
 80032a2:	401a      	ands	r2, r3
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	0018      	movs	r0, r3
 80032aa:	2303      	movs	r3, #3
 80032ac:	4003      	ands	r3, r0
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b2:	4807      	ldr	r0, [pc, #28]	; (80032d0 <NVIC_SetPriority+0xd8>)
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	430a      	orrs	r2, r1
 80032be:	33c0      	adds	r3, #192	; 0xc0
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	501a      	str	r2, [r3, r0]
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b003      	add	sp, #12
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	e000ed00 	.word	0xe000ed00
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <SysTick_Config+0x40>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e010      	b.n	800330c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <SysTick_Config+0x44>)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	2301      	movs	r3, #1
 80032f4:	425b      	negs	r3, r3
 80032f6:	2103      	movs	r1, #3
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ff7d 	bl	80031f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <SysTick_Config+0x44>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x44>)
 8003306:	2207      	movs	r2, #7
 8003308:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}
 8003314:	00ffffff 	.word	0x00ffffff
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	210f      	movs	r1, #15
 8003328:	187b      	adds	r3, r7, r1
 800332a:	1c02      	adds	r2, r0, #0
 800332c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	187b      	adds	r3, r7, r1
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b25b      	sxtb	r3, r3
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ff5d 	bl	80031f8 <NVIC_SetPriority>
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	0002      	movs	r2, r0
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b25b      	sxtb	r3, r3
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff ff37 	bl	80031cc <NVIC_EnableIRQ>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff ffaf 	bl	80032d4 <SysTick_Config>
 8003376:	0003      	movs	r3, r0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003396:	e14f      	b.n	8003638 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4091      	lsls	r1, r2
 80033a2:	000a      	movs	r2, r1
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d100      	bne.n	80033b0 <HAL_GPIO_Init+0x30>
 80033ae:	e140      	b.n	8003632 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d00b      	beq.n	80033d0 <HAL_GPIO_Init+0x50>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d007      	beq.n	80033d0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d130      	bne.n	8003432 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	409a      	lsls	r2, r3
 80033de:	0013      	movs	r3, r2
 80033e0:	43da      	mvns	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	0013      	movs	r3, r2
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003406:	2201      	movs	r2, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	43da      	mvns	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	2201      	movs	r2, #1
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
 8003424:	0013      	movs	r3, r2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	43da      	mvns	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	0013      	movs	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0xf2>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b12      	cmp	r3, #18
 8003470:	d123      	bne.n	80034ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	08da      	lsrs	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3208      	adds	r2, #8
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	58d3      	ldr	r3, [r2, r3]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2207      	movs	r2, #7
 8003484:	4013      	ands	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	409a      	lsls	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	43da      	mvns	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2107      	movs	r1, #7
 800349e:	400b      	ands	r3, r1
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	43da      	mvns	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	401a      	ands	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	055b      	lsls	r3, r3, #21
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <HAL_GPIO_Init+0x17c>
 80034fa:	e09a      	b.n	8003632 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fc:	4b54      	ldr	r3, [pc, #336]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_GPIO_Init+0x2d0>)
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003508:	4a52      	ldr	r2, [pc, #328]	; (8003654 <HAL_GPIO_Init+0x2d4>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	589b      	ldr	r3, [r3, r2]
 8003514:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2203      	movs	r2, #3
 800351a:	4013      	ands	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	409a      	lsls	r2, r3
 8003522:	0013      	movs	r3, r2
 8003524:	43da      	mvns	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	429a      	cmp	r2, r3
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x1ea>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_GPIO_Init+0x2d8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x1e6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_GPIO_Init+0x2dc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x1e2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_GPIO_Init+0x2e0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x1de>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a44      	ldr	r2, [pc, #272]	; (8003664 <HAL_GPIO_Init+0x2e4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x1da>
 8003556:	2305      	movs	r3, #5
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x1ec>
 800355a:	2306      	movs	r3, #6
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x1ec>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x1ec>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x1ec>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x1ec>
 800356a:	2300      	movs	r3, #0
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	2103      	movs	r1, #3
 8003570:	400a      	ands	r2, r1
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	; (8003654 <HAL_GPIO_Init+0x2d4>)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	025b      	lsls	r3, r3, #9
 80035a2:	4013      	ands	r3, r2
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43da      	mvns	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	4013      	ands	r3, r2
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	035b      	lsls	r3, r3, #13
 80035f6:	4013      	ands	r3, r2
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43da      	mvns	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	039b      	lsls	r3, r3, #14
 8003620:	4013      	ands	r3, r2
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	40da      	lsrs	r2, r3
 8003640:	1e13      	subs	r3, r2, #0
 8003642:	d000      	beq.n	8003646 <HAL_GPIO_Init+0x2c6>
 8003644:	e6a8      	b.n	8003398 <HAL_GPIO_Init+0x18>
  }
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b006      	add	sp, #24
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	40021000 	.word	0x40021000
 8003654:	40010000 	.word	0x40010000
 8003658:	50000400 	.word	0x50000400
 800365c:	50000800 	.word	0x50000800
 8003660:	50000c00 	.word	0x50000c00
 8003664:	50001c00 	.word	0x50001c00
 8003668:	40010400 	.word	0x40010400

0800366c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	000a      	movs	r2, r1
 8003676:	1cbb      	adds	r3, r7, #2
 8003678:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	1cba      	adds	r2, r7, #2
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	4013      	ands	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003686:	230f      	movs	r3, #15
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e003      	b.n	8003698 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003698:	230f      	movs	r3, #15
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	0008      	movs	r0, r1
 80036b0:	0011      	movs	r1, r2
 80036b2:	1cbb      	adds	r3, r7, #2
 80036b4:	1c02      	adds	r2, r0, #0
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	1c7b      	adds	r3, r7, #1
 80036ba:	1c0a      	adds	r2, r1, #0
 80036bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036be:	1c7b      	adds	r3, r7, #1
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80036ce:	e003      	b.n	80036d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	0002      	movs	r2, r0
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	1dba      	adds	r2, r7, #6
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	4013      	ands	r3, r2
 80036f6:	d008      	beq.n	800370a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036fa:	1dba      	adds	r2, r7, #6
 80036fc:	8812      	ldrh	r2, [r2, #0]
 80036fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003700:	1dbb      	adds	r3, r7, #6
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff fac3 	bl	8002c90 <HAL_GPIO_EXTI_Callback>
  }
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b002      	add	sp, #8
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40010400 	.word	0x40010400

08003718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 fbab 	bl	8003e82 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372c:	4bce      	ldr	r3, [pc, #824]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	220c      	movs	r2, #12
 8003732:	4013      	ands	r3, r2
 8003734:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003736:	4bcc      	ldr	r3, [pc, #816]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	4013      	ands	r3, r2
 8003740:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d100      	bne.n	800374e <HAL_RCC_OscConfig+0x36>
 800374c:	e07e      	b.n	800384c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d007      	beq.n	8003764 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d112      	bne.n	8003780 <HAL_RCC_OscConfig+0x68>
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	429a      	cmp	r2, r3
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4bc0      	ldr	r3, [pc, #768]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	4013      	ands	r3, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCC_OscConfig+0x5a>
 8003770:	e06b      	b.n	800384a <HAL_RCC_OscConfig+0x132>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d167      	bne.n	800384a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f000 fb81 	bl	8003e82 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	025b      	lsls	r3, r3, #9
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x84>
 800378c:	4bb6      	ldr	r3, [pc, #728]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4bb5      	ldr	r3, [pc, #724]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	0249      	lsls	r1, r1, #9
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e027      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	23a0      	movs	r3, #160	; 0xa0
 80037a2:	02db      	lsls	r3, r3, #11
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10e      	bne.n	80037c6 <HAL_RCC_OscConfig+0xae>
 80037a8:	4baf      	ldr	r3, [pc, #700]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4bae      	ldr	r3, [pc, #696]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	02c9      	lsls	r1, r1, #11
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4bac      	ldr	r3, [pc, #688]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4bab      	ldr	r3, [pc, #684]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0249      	lsls	r1, r1, #9
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e012      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 80037c6:	4ba8      	ldr	r3, [pc, #672]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4ba7      	ldr	r3, [pc, #668]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037cc:	49a7      	ldr	r1, [pc, #668]	; (8003a6c <HAL_RCC_OscConfig+0x354>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4ba5      	ldr	r3, [pc, #660]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	025b      	lsls	r3, r3, #9
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4ba1      	ldr	r3, [pc, #644]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4ba0      	ldr	r3, [pc, #640]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80037e6:	49a2      	ldr	r1, [pc, #648]	; (8003a70 <HAL_RCC_OscConfig+0x358>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7ff fcbe 	bl	8003174 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037fc:	e009      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fe:	f7ff fcb9 	bl	8003174 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d902      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f000 fb38 	bl	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003812:	4b95      	ldr	r3, [pc, #596]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	029b      	lsls	r3, r3, #10
 800381a:	4013      	ands	r3, r2
 800381c:	d0ef      	beq.n	80037fe <HAL_RCC_OscConfig+0xe6>
 800381e:	e015      	b.n	800384c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff fca8 	bl	8003174 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382a:	f7ff fca3 	bl	8003174 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e322      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800383c:	4b8a      	ldr	r3, [pc, #552]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	4013      	ands	r3, r2
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x112>
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d100      	bne.n	8003858 <HAL_RCC_OscConfig+0x140>
 8003856:	e08a      	b.n	800396e <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d13d      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1ce>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d13a      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003870:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_RCC_OscConfig+0x16c>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e2fe      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b78      	ldr	r3, [pc, #480]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x35c>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	4b74      	ldr	r3, [pc, #464]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800389a:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2209      	movs	r2, #9
 80038a0:	4393      	bics	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	4b70      	ldr	r3, [pc, #448]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ac:	f000 fc1e 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80038b0:	0001      	movs	r1, r0
 80038b2:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	220f      	movs	r2, #15
 80038ba:	4013      	ands	r3, r2
 80038bc:	4a6e      	ldr	r2, [pc, #440]	; (8003a78 <HAL_RCC_OscConfig+0x360>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	000a      	movs	r2, r1
 80038c2:	40da      	lsrs	r2, r3
 80038c4:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_OscConfig+0x364>)
 80038c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80038c8:	2513      	movs	r5, #19
 80038ca:	197c      	adds	r4, r7, r5
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7ff fc0b 	bl	80030e8 <HAL_InitTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80038d6:	197b      	adds	r3, r7, r5
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d047      	beq.n	800396e <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80038de:	2313      	movs	r3, #19
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	e2cd      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d027      	beq.n	800393c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2209      	movs	r2, #9
 80038f2:	4393      	bics	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7ff fc39 	bl	8003174 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003908:	f7ff fc34 	bl	8003174 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e2b3      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800391a:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	4013      	ands	r3, r2
 8003922:	d0f1      	beq.n	8003908 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a52      	ldr	r2, [pc, #328]	; (8003a74 <HAL_RCC_OscConfig+0x35c>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e018      	b.n	800396e <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7ff fc14 	bl	8003174 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7ff fc0f 	bl	8003174 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e28e      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2204      	movs	r2, #4
 800396a:	4013      	ands	r3, r2
 800396c:	d1f1      	bne.n	8003952 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	4013      	ands	r3, r2
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x262>
 8003978:	e09e      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d13f      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x280>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e274      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a38      	ldr	r2, [pc, #224]	; (8003a80 <HAL_RCC_OscConfig+0x368>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ac:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	0a19      	lsrs	r1, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	061a      	lsls	r2, r3, #24
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	0b5b      	lsrs	r3, r3, #13
 80039c6:	3301      	adds	r3, #1
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	210f      	movs	r1, #15
 80039d6:	400b      	ands	r3, r1
 80039d8:	4927      	ldr	r1, [pc, #156]	; (8003a78 <HAL_RCC_OscConfig+0x360>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x364>)
 80039e0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80039e2:	2513      	movs	r5, #19
 80039e4:	197c      	adds	r4, r7, r5
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7ff fb7e 	bl	80030e8 <HAL_InitTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80039f0:	197b      	adds	r3, r7, r5
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05f      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 80039f8:	2313      	movs	r3, #19
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	e240      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03d      	beq.n	8003a84 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0049      	lsls	r1, r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7ff fbad 	bl	8003174 <HAL_GetTick>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a20:	f7ff fba8 	bl	8003174 <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e227      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <HAL_RCC_OscConfig+0x368>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	0a19      	lsrs	r1, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	061a      	lsls	r2, r3, #24
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	e027      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3a0>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	fffeffff 	.word	0xfffeffff
 8003a70:	fffbffff 	.word	0xfffbffff
 8003a74:	ffffe0ff 	.word	0xffffe0ff
 8003a78:	08005594 	.word	0x08005594
 8003a7c:	20000020 	.word	0x20000020
 8003a80:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a84:	4bbd      	ldr	r3, [pc, #756]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4bbc      	ldr	r3, [pc, #752]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003a8a:	49bd      	ldr	r1, [pc, #756]	; (8003d80 <HAL_RCC_OscConfig+0x668>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7ff fb70 	bl	8003174 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9a:	f7ff fb6b 	bl	8003174 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1ea      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003aac:	4bb3      	ldr	r3, [pc, #716]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4bac      	ldr	r3, [pc, #688]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ace:	4bab      	ldr	r3, [pc, #684]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7ff fb4d 	bl	8003174 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7ff fb48 	bl	8003174 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003af2:	4ba2      	ldr	r3, [pc, #648]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	2202      	movs	r2, #2
 8003af8:	4013      	ands	r3, r2
 8003afa:	d0f1      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3c8>
 8003afc:	e018      	b.n	8003b30 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b9f      	ldr	r3, [pc, #636]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b02:	4b9e      	ldr	r3, [pc, #632]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7ff fb33 	bl	8003174 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7ff fb2e 	bl	8003174 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1ad      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b26:	4b95      	ldr	r3, [pc, #596]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d100      	bne.n	8003b3c <HAL_RCC_OscConfig+0x424>
 8003b3a:	e0af      	b.n	8003c9c <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2327      	movs	r3, #39	; 0x27
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b44:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	055b      	lsls	r3, r3, #21
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b54:	4b89      	ldr	r3, [pc, #548]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	0549      	lsls	r1, r1, #21
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b5e:	2327      	movs	r3, #39	; 0x27
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b87      	ldr	r3, [pc, #540]	; (8003d84 <HAL_RCC_OscConfig+0x66c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d11a      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b84      	ldr	r3, [pc, #528]	; (8003d84 <HAL_RCC_OscConfig+0x66c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b83      	ldr	r3, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x66c>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7ff faf8 	bl	8003174 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7ff faf3 	bl	8003174 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	; 0x64
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e172      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <HAL_RCC_OscConfig+0x66c>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4ac>
 8003bb4:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bb8:	4b70      	ldr	r3, [pc, #448]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0049      	lsls	r1, r1, #1
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50
 8003bc2:	e031      	b.n	8003c28 <HAL_RCC_OscConfig+0x510>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x4ce>
 8003bcc:	4b6b      	ldr	r3, [pc, #428]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bd2:	496b      	ldr	r1, [pc, #428]	; (8003d80 <HAL_RCC_OscConfig+0x668>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	651a      	str	r2, [r3, #80]	; 0x50
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bdc:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bde:	496a      	ldr	r1, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	651a      	str	r2, [r3, #80]	; 0x50
 8003be4:	e020      	b.n	8003c28 <HAL_RCC_OscConfig+0x510>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	23a0      	movs	r3, #160	; 0xa0
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d10e      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4f8>
 8003bf2:	4b62      	ldr	r3, [pc, #392]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	00c9      	lsls	r1, r1, #3
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8003c00:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c04:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	0049      	lsls	r1, r1, #1
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x510>
 8003c10:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c16:	495a      	ldr	r1, [pc, #360]	; (8003d80 <HAL_RCC_OscConfig+0x668>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c1c:	4b57      	ldr	r3, [pc, #348]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c20:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c22:	4959      	ldr	r1, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7ff faa0 	bl	8003174 <HAL_GetTick>
 8003c34:	0003      	movs	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c38:	e009      	b.n	8003c4e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7ff fa9b 	bl	8003174 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	4a51      	ldr	r2, [pc, #324]	; (8003d8c <HAL_RCC_OscConfig+0x674>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e119      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c4e:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4013      	ands	r3, r2
 8003c58:	d0ef      	beq.n	8003c3a <HAL_RCC_OscConfig+0x522>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7ff fa8a 	bl	8003174 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7ff fa85 	bl	8003174 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	4a46      	ldr	r2, [pc, #280]	; (8003d8c <HAL_RCC_OscConfig+0x674>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e103      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7a:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4013      	ands	r3, r2
 8003c84:	d1ef      	bne.n	8003c66 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c86:	2327      	movs	r3, #39	; 0x27
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003c96:	493e      	ldr	r1, [pc, #248]	; (8003d90 <HAL_RCC_OscConfig+0x678>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d049      	beq.n	8003d3a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d026      	beq.n	8003cfc <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	2180      	movs	r1, #128	; 0x80
 8003cce:	0189      	lsls	r1, r1, #6
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fa4e 	bl	8003174 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cde:	f7ff fa49 	bl	8003174 <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0c8      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d0f1      	beq.n	8003cde <HAL_RCC_OscConfig+0x5c6>
 8003cfa:	e01e      	b.n	8003d3a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	438a      	bics	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	4922      	ldr	r1, [pc, #136]	; (8003d98 <HAL_RCC_OscConfig+0x680>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7ff fa2e 	bl	8003174 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1e:	f7ff fa29 	bl	8003174 <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2202      	movs	r2, #2
 8003d36:	4013      	ands	r3, r2
 8003d38:	d1f1      	bne.n	8003d1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d100      	bne.n	8003d44 <HAL_RCC_OscConfig+0x62c>
 8003d42:	e09d      	b.n	8003e80 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d100      	bne.n	8003d4c <HAL_RCC_OscConfig+0x634>
 8003d4a:	e076      	b.n	8003e3a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_OscConfig+0x664>)
 8003d5a:	4910      	ldr	r1, [pc, #64]	; (8003d9c <HAL_RCC_OscConfig+0x684>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7ff fa08 	bl	8003174 <HAL_GetTick>
 8003d64:	0003      	movs	r3, r0
 8003d66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d68:	e01a      	b.n	8003da0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7ff fa03 	bl	8003174 <HAL_GetTick>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d913      	bls.n	8003da0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e082      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	fffffeff 	.word	0xfffffeff
 8003d84:	40007000 	.word	0x40007000
 8003d88:	fffffbff 	.word	0xfffffbff
 8003d8c:	00001388 	.word	0x00001388
 8003d90:	efffffff 	.word	0xefffffff
 8003d94:	40010000 	.word	0x40010000
 8003d98:	ffffdfff 	.word	0xffffdfff
 8003d9c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	049b      	lsls	r3, r3, #18
 8003da8:	4013      	ands	r3, r2
 8003daa:	d1de      	bne.n	8003d6a <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dac:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a37      	ldr	r2, [pc, #220]	; (8003e90 <HAL_RCC_OscConfig+0x778>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0449      	lsls	r1, r1, #17
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7ff f9cb 	bl	8003174 <HAL_GetTick>
 8003dde:	0003      	movs	r3, r0
 8003de0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7ff f9c6 	bl	8003174 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	049b      	lsls	r3, r3, #18
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x6cc>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003e0a:	4922      	ldr	r1, [pc, #136]	; (8003e94 <HAL_RCC_OscConfig+0x77c>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7ff f9b0 	bl	8003174 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7ff f9ab 	bl	8003174 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e02a      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	049b      	lsls	r3, r3, #18
 8003e34:	4013      	ands	r3, r2
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x702>
 8003e38:	e022      	b.n	8003e80 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e01d      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCC_OscConfig+0x774>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	401a      	ands	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d10f      	bne.n	8003e7c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	23f0      	movs	r3, #240	; 0xf0
 8003e60:	039b      	lsls	r3, r3, #14
 8003e62:	401a      	ands	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	23c0      	movs	r3, #192	; 0xc0
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b00a      	add	sp, #40	; 0x28
 8003e88:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	ff02ffff 	.word	0xff02ffff
 8003e94:	feffffff 	.word	0xfeffffff

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b5b0      	push	{r4, r5, r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e10d      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b88      	ldr	r3, [pc, #544]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d911      	bls.n	8003ede <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b85      	ldr	r3, [pc, #532]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	4b82      	ldr	r3, [pc, #520]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ecc:	4b80      	ldr	r3, [pc, #512]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0f4      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	22f0      	movs	r2, #240	; 0xf0
 8003eee:	4393      	bics	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2201      	movs	r2, #1
 8003f02:	4013      	ands	r3, r2
 8003f04:	d100      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x70>
 8003f06:	e089      	b.n	800401c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d120      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0d3      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f28:	4b6a      	ldr	r3, [pc, #424]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	049b      	lsls	r3, r3, #18
 8003f30:	4013      	ands	r3, r2
 8003f32:	d114      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0c7      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f40:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0bc      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f4e:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0b4      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2203      	movs	r2, #3
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f72:	f7ff f8ff 	bl	8003174 <HAL_GetTick>
 8003f76:	0003      	movs	r3, r0
 8003f78:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d111      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f82:	e009      	b.n	8003f98 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7ff f8f6 	bl	8003174 <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e097      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f98:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	220c      	movs	r2, #12
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d1ef      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xec>
 8003fa4:	e03a      	b.n	800401c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d111      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fae:	e009      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7ff f8e0 	bl	8003174 <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	4a47      	ldr	r2, [pc, #284]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e081      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	220c      	movs	r2, #12
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d1ef      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x118>
 8003fd0:	e024      	b.n	800401c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d11b      	bne.n	8004012 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fdc:	f7ff f8ca 	bl	8003174 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e06b      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff0:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d1ef      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x144>
 8003ffc:	e00e      	b.n	800401c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffe:	f7ff f8b9 	bl	8003174 <HAL_GetTick>
 8004002:	0002      	movs	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e05a      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004012:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	220c      	movs	r2, #12
 8004018:	4013      	ands	r3, r2
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d211      	bcs.n	800404e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	4393      	bics	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_ClockConfig+0x238>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03c      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2204      	movs	r2, #4
 8004054:	4013      	ands	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800405e:	4013      	ands	r3, r2
 8004060:	0019      	movs	r1, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8004068:	430a      	orrs	r2, r1
 800406a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	4013      	ands	r3, r2
 8004074:	d00a      	beq.n	800408c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_RCC_ClockConfig+0x248>)
 800407c:	4013      	ands	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	00da      	lsls	r2, r3, #3
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800408c:	f000 f82e 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 8004090:	0001      	movs	r1, r0
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_ClockConfig+0x23c>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	220f      	movs	r2, #15
 800409a:	4013      	ands	r3, r2
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <HAL_RCC_ClockConfig+0x24c>)
 800409e:	5cd3      	ldrb	r3, [r2, r3]
 80040a0:	000a      	movs	r2, r1
 80040a2:	40da      	lsrs	r2, r3
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_ClockConfig+0x250>)
 80040a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80040a8:	250b      	movs	r5, #11
 80040aa:	197c      	adds	r4, r7, r5
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7ff f81b 	bl	80030e8 <HAL_InitTick>
 80040b2:	0003      	movs	r3, r0
 80040b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80040b6:	197b      	adds	r3, r7, r5
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80040be:	230b      	movs	r3, #11
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b004      	add	sp, #16
 80040ce:	bdb0      	pop	{r4, r5, r7, pc}
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	00001388 	.word	0x00001388
 80040dc:	fffff8ff 	.word	0xfffff8ff
 80040e0:	ffffc7ff 	.word	0xffffc7ff
 80040e4:	08005594 	.word	0x08005594
 80040e8:	20000020 	.word	0x20000020

080040ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	220c      	movs	r2, #12
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d00e      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x34>
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d00f      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x3a>
 8004106:	2b04      	cmp	r3, #4
 8004108:	d157      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800410a:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2210      	movs	r2, #16
 8004110:	4013      	ands	r3, r2
 8004112:	d002      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004116:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004118:	e05d      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800411c:	613b      	str	r3, [r7, #16]
      break;
 800411e:	e05a      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004120:	4b32      	ldr	r3, [pc, #200]	; (80041ec <HAL_RCC_GetSysClockFreq+0x100>)
 8004122:	613b      	str	r3, [r7, #16]
      break;
 8004124:	e057      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	220f      	movs	r2, #15
 800412c:	4013      	ands	r3, r2
 800412e:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	0d9b      	lsrs	r3, r3, #22
 8004138:	2203      	movs	r2, #3
 800413a:	4013      	ands	r3, r2
 800413c:	3301      	adds	r3, #1
 800413e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	4013      	ands	r3, r2
 800414a:	d00f      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	000a      	movs	r2, r1
 8004150:	0152      	lsls	r2, r2, #5
 8004152:	1a52      	subs	r2, r2, r1
 8004154:	0193      	lsls	r3, r2, #6
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	185b      	adds	r3, r3, r1
 800415c:	025b      	lsls	r3, r3, #9
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f7fb ffd1 	bl	8000108 <__udivsi3>
 8004166:	0003      	movs	r3, r0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e023      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	4013      	ands	r3, r2
 8004174:	d00f      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	000a      	movs	r2, r1
 800417a:	0152      	lsls	r2, r2, #5
 800417c:	1a52      	subs	r2, r2, r1
 800417e:	0193      	lsls	r3, r2, #6
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	185b      	adds	r3, r3, r1
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f7fb ffbc 	bl	8000108 <__udivsi3>
 8004190:	0003      	movs	r3, r0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e00e      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	000a      	movs	r2, r1
 800419a:	0152      	lsls	r2, r2, #5
 800419c:	1a52      	subs	r2, r2, r1
 800419e:	0193      	lsls	r3, r2, #6
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	185b      	adds	r3, r3, r1
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fb ffac 	bl	8000108 <__udivsi3>
 80041b0:	0003      	movs	r3, r0
 80041b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	613b      	str	r3, [r7, #16]
      break;
 80041b8:	e00d      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	2207      	movs	r2, #7
 80041c2:	4013      	ands	r3, r2
 80041c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	0212      	lsls	r2, r2, #8
 80041ce:	409a      	lsls	r2, r3
 80041d0:	0013      	movs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
      break;
 80041d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041d6:	693b      	ldr	r3, [r7, #16]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b006      	add	sp, #24
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	003d0900 	.word	0x003d0900
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200
 80041f0:	080055ac 	.word	0x080055ac

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000020 	.word	0x20000020

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800420c:	f7ff fff2 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004210:	0001      	movs	r1, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	2207      	movs	r2, #7
 800421a:	4013      	ands	r3, r2
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5cd3      	ldrb	r3, [r2, r3]
 8004220:	40d9      	lsrs	r1, r3
 8004222:	000b      	movs	r3, r1
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40021000 	.word	0x40021000
 8004230:	080055a4 	.word	0x080055a4

08004234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e01e      	b.n	8004284 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2239      	movs	r2, #57	; 0x39
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2238      	movs	r2, #56	; 0x38
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f7fe fdb5 	bl	8002dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2239      	movs	r2, #57	; 0x39
 8004266:	2102      	movs	r1, #2
 8004268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	0019      	movs	r1, r3
 8004274:	0010      	movs	r0, r2
 8004276:	f000 fd5f 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2239      	movs	r2, #57	; 0x39
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2101      	movs	r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2207      	movs	r2, #7
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d007      	beq.n	80042c6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01e      	b.n	8004320 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2239      	movs	r2, #57	; 0x39
 80042e6:	5c9b      	ldrb	r3, [r3, r2]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2238      	movs	r2, #56	; 0x38
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 f815 	bl	8004328 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2239      	movs	r2, #57	; 0x39
 8004302:	2102      	movs	r1, #2
 8004304:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	0019      	movs	r1, r3
 8004310:	0010      	movs	r0, r2
 8004312:	f000 fd11 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2239      	movs	r2, #57	; 0x39
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d011      	beq.n	800436c <HAL_TIM_OC_Start_IT+0x34>
 8004348:	d802      	bhi.n	8004350 <HAL_TIM_OC_Start_IT+0x18>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800434e:	e028      	b.n	80043a2 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8004350:	2b08      	cmp	r3, #8
 8004352:	d014      	beq.n	800437e <HAL_TIM_OC_Start_IT+0x46>
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x58>
      break;
 8004358:	e023      	b.n	80043a2 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2102      	movs	r1, #2
 8004366:	430a      	orrs	r2, r1
 8004368:	60da      	str	r2, [r3, #12]
      break;
 800436a:	e01a      	b.n	80043a2 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2104      	movs	r1, #4
 8004378:	430a      	orrs	r2, r1
 800437a:	60da      	str	r2, [r3, #12]
      break;
 800437c:	e011      	b.n	80043a2 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2108      	movs	r1, #8
 800438a:	430a      	orrs	r2, r1
 800438c:	60da      	str	r2, [r3, #12]
      break;
 800438e:	e008      	b.n	80043a2 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2110      	movs	r1, #16
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]
      break;
 80043a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	2201      	movs	r2, #1
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 ffd4 	bl	8005358 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2207      	movs	r2, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d007      	beq.n	80043d2 <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b004      	add	sp, #16
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e01e      	b.n	800442c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2239      	movs	r2, #57	; 0x39
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2238      	movs	r2, #56	; 0x38
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f000 f815 	bl	8004434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2239      	movs	r2, #57	; 0x39
 800440e:	2102      	movs	r1, #2
 8004410:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f000 fc8b 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2239      	movs	r2, #57	; 0x39
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e01e      	b.n	8004494 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2239      	movs	r2, #57	; 0x39
 800445a:	5c9b      	ldrb	r3, [r3, r2]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2238      	movs	r2, #56	; 0x38
 8004466:	2100      	movs	r1, #0
 8004468:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f815 	bl	800449c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2239      	movs	r2, #57	; 0x39
 8004476:	2102      	movs	r1, #2
 8004478:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	0019      	movs	r1, r3
 8004484:	0010      	movs	r0, r2
 8004486:	f000 fc57 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2239      	movs	r2, #57	; 0x39
 800448e:	2101      	movs	r1, #1
 8004490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d011      	beq.n	80044e0 <HAL_TIM_IC_Start_IT+0x34>
 80044bc:	d802      	bhi.n	80044c4 <HAL_TIM_IC_Start_IT+0x18>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80044c2:	e028      	b.n	8004516 <HAL_TIM_IC_Start_IT+0x6a>
  switch (Channel)
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d014      	beq.n	80044f2 <HAL_TIM_IC_Start_IT+0x46>
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d01b      	beq.n	8004504 <HAL_TIM_IC_Start_IT+0x58>
      break;
 80044cc:	e023      	b.n	8004516 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2102      	movs	r1, #2
 80044da:	430a      	orrs	r2, r1
 80044dc:	60da      	str	r2, [r3, #12]
      break;
 80044de:	e01a      	b.n	8004516 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2104      	movs	r1, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]
      break;
 80044f0:	e011      	b.n	8004516 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2108      	movs	r1, #8
 80044fe:	430a      	orrs	r2, r1
 8004500:	60da      	str	r2, [r3, #12]
      break;
 8004502:	e008      	b.n	8004516 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2110      	movs	r1, #16
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]
      break;
 8004514:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6839      	ldr	r1, [r7, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	0018      	movs	r0, r3
 8004520:	f000 ff1a 	bl	8005358 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d007      	beq.n	8004546 <HAL_TIM_IC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e02e      	b.n	80045c2 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2239      	movs	r2, #57	; 0x39
 8004568:	5c9b      	ldrb	r3, [r3, r2]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2238      	movs	r2, #56	; 0x38
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 f825 	bl	80045ca <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2239      	movs	r2, #57	; 0x39
 8004584:	2102      	movs	r1, #2
 8004586:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	0019      	movs	r1, r3
 8004592:	0010      	movs	r0, r2
 8004594:	f000 fbd0 	bl	8004d38 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2108      	movs	r1, #8
 80045a4:	438a      	bics	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2239      	movs	r2, #57	; 0x39
 80045bc:	2101      	movs	r1, #1
 80045be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b002      	add	sp, #8
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b002      	add	sp, #8
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2102      	movs	r1, #2
 80045f0:	430a      	orrs	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2104      	movs	r1, #4
 8004600:	430a      	orrs	r2, r1
 8004602:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	2100      	movs	r1, #0
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fea3 	bl	8005358 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	2104      	movs	r1, #4
 800461a:	0018      	movs	r0, r3
 800461c:	f000 fe9c 	bl	8005358 <TIM_CCxChannelCmd>

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	2b02      	cmp	r3, #2
 800463e:	d124      	bne.n	800468a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11d      	bne.n	800468a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2203      	movs	r2, #3
 8004654:	4252      	negs	r2, r2
 8004656:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2203      	movs	r2, #3
 8004666:	4013      	ands	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7fe fb47 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 8004672:	e007      	b.n	8004684 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fb4e 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0018      	movs	r0, r3
 8004680:	f7fe fac6 	bl	8002c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2204      	movs	r2, #4
 8004692:	4013      	ands	r3, r2
 8004694:	2b04      	cmp	r3, #4
 8004696:	d125      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d11e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2205      	movs	r2, #5
 80046ac:	4252      	negs	r2, r2
 80046ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	23c0      	movs	r3, #192	; 0xc0
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4013      	ands	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7fe fb1a 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e007      	b.n	80046de <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 fb21 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	0018      	movs	r0, r3
 80046da:	f7fe fa99 	bl	8002c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2208      	movs	r2, #8
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d124      	bne.n	800473c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2208      	movs	r2, #8
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d11d      	bne.n	800473c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2209      	movs	r2, #9
 8004706:	4252      	negs	r2, r2
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2204      	movs	r2, #4
 800470e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2203      	movs	r2, #3
 8004718:	4013      	ands	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7fe faee 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 8004724:	e007      	b.n	8004736 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 faf5 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f7fe fa6d 	bl	8002c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2210      	movs	r2, #16
 8004744:	4013      	ands	r3, r2
 8004746:	2b10      	cmp	r3, #16
 8004748:	d125      	bne.n	8004796 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2210      	movs	r2, #16
 8004752:	4013      	ands	r3, r2
 8004754:	2b10      	cmp	r3, #16
 8004756:	d11e      	bne.n	8004796 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2211      	movs	r2, #17
 800475e:	4252      	negs	r2, r2
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2208      	movs	r2, #8
 8004766:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	23c0      	movs	r3, #192	; 0xc0
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7fe fac1 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 800477e:	e007      	b.n	8004790 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fac8 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f7fe fa40 	bl	8002c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10f      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2202      	movs	r2, #2
 80047b8:	4252      	negs	r2, r2
 80047ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f7fe fa8c 	bl	8002cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d10f      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	4013      	ands	r3, r2
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d108      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2241      	movs	r2, #65	; 0x41
 80047e6:	4252      	negs	r2, r2
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 fa9b 	bl	8004d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b002      	add	sp, #8
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2238      	movs	r2, #56	; 0x38
 800480a:	5c9b      	ldrb	r3, [r3, r2]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004810:	2302      	movs	r3, #2
 8004812:	e03c      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0x94>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2238      	movs	r2, #56	; 0x38
 8004818:	2101      	movs	r1, #1
 800481a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2239      	movs	r2, #57	; 0x39
 8004820:	2102      	movs	r1, #2
 8004822:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b04      	cmp	r3, #4
 8004828:	d010      	beq.n	800484c <HAL_TIM_OC_ConfigChannel+0x52>
 800482a:	d802      	bhi.n	8004832 <HAL_TIM_OC_ConfigChannel+0x38>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8004830:	e024      	b.n	800487c <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8004832:	2b08      	cmp	r3, #8
 8004834:	d012      	beq.n	800485c <HAL_TIM_OC_ConfigChannel+0x62>
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d018      	beq.n	800486c <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800483a:	e01f      	b.n	800487c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f000 facb 	bl	8004de0 <TIM_OC1_SetConfig>
      break;
 800484a:	e017      	b.n	800487c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0011      	movs	r1, r2
 8004854:	0018      	movs	r0, r3
 8004856:	f000 faff 	bl	8004e58 <TIM_OC2_SetConfig>
      break;
 800485a:	e00f      	b.n	800487c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	0011      	movs	r1, r2
 8004864:	0018      	movs	r0, r3
 8004866:	f000 fb39 	bl	8004edc <TIM_OC3_SetConfig>
      break;
 800486a:	e007      	b.n	800487c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f000 fb71 	bl	8004f5c <TIM_OC4_SetConfig>
      break;
 800487a:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2239      	movs	r2, #57	; 0x39
 8004880:	2101      	movs	r1, #1
 8004882:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2238      	movs	r2, #56	; 0x38
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b004      	add	sp, #16
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2238      	movs	r2, #56	; 0x38
 80048a8:	5c9b      	ldrb	r3, [r3, r2]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e08a      	b.n	80049c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2238      	movs	r2, #56	; 0x38
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2239      	movs	r2, #57	; 0x39
 80048be:	2102      	movs	r1, #2
 80048c0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f000 fb86 	bl	8004fe8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	210c      	movs	r1, #12
 80048e8:	438a      	bics	r2, r1
 80048ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	619a      	str	r2, [r3, #24]
 80048fe:	e05a      	b.n	80049b6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b04      	cmp	r3, #4
 8004904:	d11c      	bne.n	8004940 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f000 fbeb 	bl	80050f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	492a      	ldr	r1, [pc, #168]	; (80049d0 <HAL_TIM_IC_ConfigChannel+0x138>)
 8004926:	400a      	ands	r2, r1
 8004928:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6999      	ldr	r1, [r3, #24]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	021a      	lsls	r2, r3, #8
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	619a      	str	r2, [r3, #24]
 800493e:	e03a      	b.n	80049b6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d11b      	bne.n	800497e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f000 fc3f 	bl	80051d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	210c      	movs	r1, #12
 8004966:	438a      	bics	r2, r1
 8004968:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69d9      	ldr	r1, [r3, #28]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	61da      	str	r2, [r3, #28]
 800497c:	e01b      	b.n	80049b6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f000 fc63 	bl	8005258 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <HAL_TIM_IC_ConfigChannel+0x138>)
 800499e:	400a      	ands	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69d9      	ldr	r1, [r3, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	021a      	lsls	r2, r3, #8
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2239      	movs	r2, #57	; 0x39
 80049ba:	2101      	movs	r1, #1
 80049bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2238      	movs	r2, #56	; 0x38
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffff3ff 	.word	0xfffff3ff

080049d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2238      	movs	r2, #56	; 0x38
 80049e4:	5c9b      	ldrb	r3, [r3, r2]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0a4      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x164>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2238      	movs	r2, #56	; 0x38
 80049f2:	2101      	movs	r1, #1
 80049f4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2239      	movs	r2, #57	; 0x39
 80049fa:	2102      	movs	r1, #2
 80049fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d029      	beq.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004a04:	d802      	bhi.n	8004a0c <HAL_TIM_PWM_ConfigChannel+0x38>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004a0a:	e08c      	b.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d046      	beq.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0xca>
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d065      	beq.n	8004ae0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8004a14:	e087      	b.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0011      	movs	r1, r2
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f9de 	bl	8004de0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2108      	movs	r1, #8
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2104      	movs	r1, #4
 8004a40:	438a      	bics	r2, r1
 8004a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6999      	ldr	r1, [r3, #24]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	619a      	str	r2, [r3, #24]
      break;
 8004a56:	e066      	b.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f9f9 	bl	8004e58 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	0109      	lsls	r1, r1, #4
 8004a74:	430a      	orrs	r2, r1
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	492f      	ldr	r1, [pc, #188]	; (8004b40 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004a84:	400a      	ands	r2, r1
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]
      break;
 8004a9c:	e043      	b.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0011      	movs	r1, r2
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fa18 	bl	8004edc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2108      	movs	r1, #8
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	438a      	bics	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69d9      	ldr	r1, [r3, #28]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	61da      	str	r2, [r3, #28]
      break;
 8004ade:	e022      	b.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 fa37 	bl	8004f5c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2180      	movs	r1, #128	; 0x80
 8004afa:	0109      	lsls	r1, r1, #4
 8004afc:	430a      	orrs	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	490d      	ldr	r1, [pc, #52]	; (8004b40 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69d9      	ldr	r1, [r3, #28]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	021a      	lsls	r2, r3, #8
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      break;
 8004b24:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2239      	movs	r2, #57	; 0x39
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2238      	movs	r2, #56	; 0x38
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	fffffbff 	.word	0xfffffbff

08004b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2238      	movs	r2, #56	; 0x38
 8004b52:	5c9b      	ldrb	r3, [r3, r2]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIM_ConfigClockSource+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e0ab      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x170>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2238      	movs	r2, #56	; 0x38
 8004b60:	2101      	movs	r1, #1
 8004b62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2239      	movs	r2, #57	; 0x39
 8004b68:	2102      	movs	r1, #2
 8004b6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2277      	movs	r2, #119	; 0x77
 8004b78:	4393      	bics	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a4f      	ldr	r2, [pc, #316]	; (8004cbc <HAL_TIM_ConfigClockSource+0x178>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d100      	bne.n	8004b96 <HAL_TIM_ConfigClockSource+0x52>
 8004b94:	e06b      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x12a>
 8004b96:	d80e      	bhi.n	8004bb6 <HAL_TIM_ConfigClockSource+0x72>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d100      	bne.n	8004b9e <HAL_TIM_ConfigClockSource+0x5a>
 8004b9c:	e077      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x14a>
 8004b9e:	d803      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x64>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d100      	bne.n	8004ba6 <HAL_TIM_ConfigClockSource+0x62>
 8004ba4:	e073      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ba6:	e07c      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d100      	bne.n	8004bae <HAL_TIM_ConfigClockSource+0x6a>
 8004bac:	e06f      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x14a>
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d100      	bne.n	8004bb4 <HAL_TIM_ConfigClockSource+0x70>
 8004bb2:	e06c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004bb4:	e075      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004bb6:	2b70      	cmp	r3, #112	; 0x70
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0x94>
 8004bba:	d804      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x82>
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d036      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0xea>
 8004bc0:	2b60      	cmp	r3, #96	; 0x60
 8004bc2:	d044      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004bc4:	e06d      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	0152      	lsls	r2, r2, #5
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d068      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0x15c>
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	0192      	lsls	r2, r2, #6
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004bd6:	e064      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f000 fb96 	bl	8005318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2277      	movs	r2, #119	; 0x77
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]
      break;
 8004c04:	e04d      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f000 fb7f 	bl	8005318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	01c9      	lsls	r1, r1, #7
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]
      break;
 8004c2c:	e039      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	f000 fa2a 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2150      	movs	r1, #80	; 0x50
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fb4c 	bl	80052e4 <TIM_ITRx_SetConfig>
      break;
 8004c4c:	e029      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	f000 fa8a 	bl	8005174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2160      	movs	r1, #96	; 0x60
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 fb3c 	bl	80052e4 <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e019      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	f000 fa0a 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 fb2c 	bl	80052e4 <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e009      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	0019      	movs	r1, r3
 8004c98:	0010      	movs	r0, r2
 8004c9a:	f000 fb23 	bl	80052e4 <TIM_ITRx_SetConfig>
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004ca0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2239      	movs	r2, #57	; 0x39
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2238      	movs	r2, #56	; 0x38
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	ffff00ff 	.word	0xffff00ff

08004cc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_TIM_ReadCapturedValue+0x30>
 8004cd4:	d802      	bhi.n	8004cdc <HAL_TIM_ReadCapturedValue+0x1c>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_TIM_ReadCapturedValue+0x26>

      break;
    }

    default:
      break;
 8004cda:	e018      	b.n	8004d0e <HAL_TIM_ReadCapturedValue+0x4e>
  switch (Channel)
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d00c      	beq.n	8004cfa <HAL_TIM_ReadCapturedValue+0x3a>
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	d00f      	beq.n	8004d04 <HAL_TIM_ReadCapturedValue+0x44>
      break;
 8004ce4:	e013      	b.n	8004d0e <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =  htim->Instance->CCR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	60fb      	str	r3, [r7, #12]
      break;
 8004cee:	e00e      	b.n	8004d0e <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	60fb      	str	r3, [r7, #12]
      break;
 8004cf8:	e009      	b.n	8004d0e <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR3;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	60fb      	str	r3, [r7, #12]
      break;
 8004d02:	e004      	b.n	8004d0e <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR4;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	60fb      	str	r3, [r7, #12]
      break;
 8004d0c:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b004      	add	sp, #16
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0x2a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <TIM_Base_SetConfig+0x9c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0x2a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <TIM_Base_SetConfig+0xa0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2270      	movs	r2, #112	; 0x70
 8004d66:	4393      	bics	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	05db      	lsls	r3, r3, #23
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0x56>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_Base_SetConfig+0x9c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x56>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_Base_SetConfig+0xa0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <TIM_Base_SetConfig+0xa4>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	4393      	bics	r3, r2
 8004da6:	001a      	movs	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	615a      	str	r2, [r3, #20]
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b004      	add	sp, #16
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40010800 	.word	0x40010800
 8004dd8:	40011400 	.word	0x40011400
 8004ddc:	fffffcff 	.word	0xfffffcff

08004de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4393      	bics	r3, r2
 8004df2:	001a      	movs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2270      	movs	r2, #112	; 0x70
 8004e0e:	4393      	bics	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2203      	movs	r2, #3
 8004e16:	4393      	bics	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4393      	bics	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b006      	add	sp, #24
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	2210      	movs	r2, #16
 8004e68:	4393      	bics	r3, r2
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <TIM_OC2_SetConfig+0x7c>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <TIM_OC2_SetConfig+0x80>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	4393      	bics	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b006      	add	sp, #24
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	ffff8fff 	.word	0xffff8fff
 8004ed8:	fffffcff 	.word	0xfffffcff

08004edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <TIM_OC3_SetConfig+0x78>)
 8004eec:	401a      	ands	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2270      	movs	r2, #112	; 0x70
 8004f08:	4393      	bics	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	4393      	bics	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	; (8004f58 <TIM_OC3_SetConfig+0x7c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b006      	add	sp, #24
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	fffffeff 	.word	0xfffffeff
 8004f58:	fffffdff 	.word	0xfffffdff

08004f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <TIM_OC4_SetConfig+0x7c>)
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <TIM_OC4_SetConfig+0x80>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <TIM_OC4_SetConfig+0x84>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_OC4_SetConfig+0x88>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b006      	add	sp, #24
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	ffffefff 	.word	0xffffefff
 8004fdc:	ffff8fff 	.word	0xffff8fff
 8004fe0:	fffffcff 	.word	0xfffffcff
 8004fe4:	ffffdfff 	.word	0xffffdfff

08004fe8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	001a      	movs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	05db      	lsls	r3, r3, #23
 8005016:	429a      	cmp	r2, r3
 8005018:	d007      	beq.n	800502a <TIM_TI1_SetConfig+0x42>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <TIM_TI1_SetConfig+0xa4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_TI1_SetConfig+0x42>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <TIM_TI1_SetConfig+0xa8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <TIM_TI1_SetConfig+0x46>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <TIM_TI1_SetConfig+0x48>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2203      	movs	r2, #3
 8005038:	4393      	bics	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e003      	b.n	800504e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2201      	movs	r2, #1
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	22f0      	movs	r2, #240	; 0xf0
 8005052:	4393      	bics	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	22ff      	movs	r2, #255	; 0xff
 800505c:	4013      	ands	r3, r2
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	220a      	movs	r2, #10
 8005068:	4393      	bics	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	220a      	movs	r2, #10
 8005070:	4013      	ands	r3, r2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b006      	add	sp, #24
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40010800 	.word	0x40010800
 8005090:	40011400 	.word	0x40011400

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	2201      	movs	r2, #1
 80050ac:	4393      	bics	r3, r2
 80050ae:	001a      	movs	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	22f0      	movs	r2, #240	; 0xf0
 80050be:	4393      	bics	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	220a      	movs	r2, #10
 80050d0:	4393      	bics	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	2210      	movs	r2, #16
 8005104:	4393      	bics	r3, r2
 8005106:	001a      	movs	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <TIM_TI2_SetConfig+0x7c>)
 800511c:	4013      	ands	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4a10      	ldr	r2, [pc, #64]	; (8005170 <TIM_TI2_SetConfig+0x80>)
 800512e:	4013      	ands	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	031b      	lsls	r3, r3, #12
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	22a0      	movs	r2, #160	; 0xa0
 8005144:	4393      	bics	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	22a0      	movs	r2, #160	; 0xa0
 800514e:	4013      	ands	r3, r2
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b006      	add	sp, #24
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	fffffcff 	.word	0xfffffcff
 8005170:	ffff0fff 	.word	0xffff0fff

08005174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	2210      	movs	r2, #16
 8005186:	4393      	bics	r3, r2
 8005188:	001a      	movs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4a0d      	ldr	r2, [pc, #52]	; (80051d4 <TIM_TI2_ConfigInputStage+0x60>)
 800519e:	4013      	ands	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	22a0      	movs	r2, #160	; 0xa0
 80051b0:	4393      	bics	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b006      	add	sp, #24
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	ffff0fff 	.word	0xffff0fff

080051d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <TIM_TI3_SetConfig+0x78>)
 80051ec:	401a      	ands	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2203      	movs	r2, #3
 8005202:	4393      	bics	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	22f0      	movs	r2, #240	; 0xf0
 8005212:	4393      	bics	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	22ff      	movs	r2, #255	; 0xff
 800521c:	4013      	ands	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4a0b      	ldr	r2, [pc, #44]	; (8005254 <TIM_TI3_SetConfig+0x7c>)
 8005228:	4013      	ands	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	23a0      	movs	r3, #160	; 0xa0
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	4013      	ands	r3, r2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	46bd      	mov	sp, r7
 800524c:	b006      	add	sp, #24
 800524e:	bd80      	pop	{r7, pc}
 8005250:	fffffeff 	.word	0xfffffeff
 8005254:	fffff5ff 	.word	0xfffff5ff

08005258 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <TIM_TI4_SetConfig+0x7c>)
 800526c:	401a      	ands	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <TIM_TI4_SetConfig+0x80>)
 8005282:	4013      	ands	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_TI4_SetConfig+0x84>)
 8005294:	4013      	ands	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <TIM_TI4_SetConfig+0x88>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	031a      	lsls	r2, r3, #12
 80052b2:	23a0      	movs	r3, #160	; 0xa0
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	4013      	ands	r3, r2
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b006      	add	sp, #24
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	ffffefff 	.word	0xffffefff
 80052d8:	fffffcff 	.word	0xfffffcff
 80052dc:	ffff0fff 	.word	0xffff0fff
 80052e0:	ffff5fff 	.word	0xffff5fff

080052e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2270      	movs	r2, #112	; 0x70
 80052f8:	4393      	bics	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	2207      	movs	r2, #7
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b004      	add	sp, #16
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <TIM_ETR_SetConfig+0x3c>)
 8005330:	4013      	ands	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	431a      	orrs	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b006      	add	sp, #24
 8005352:	bd80      	pop	{r7, pc}
 8005354:	ffff00ff 	.word	0xffff00ff

08005358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	221f      	movs	r2, #31
 8005368:	4013      	ands	r3, r2
 800536a:	2201      	movs	r2, #1
 800536c:	409a      	lsls	r2, r3
 800536e:	0013      	movs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	43d2      	mvns	r2, r2
 800537a:	401a      	ands	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	211f      	movs	r1, #31
 8005388:	400b      	ands	r3, r1
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4099      	lsls	r1, r3
 800538e:	000b      	movs	r3, r1
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b006      	add	sp, #24
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2238      	movs	r2, #56	; 0x38
 80053ac:	5c9b      	ldrb	r3, [r3, r2]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e032      	b.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2238      	movs	r2, #56	; 0x38
 80053ba:	2101      	movs	r1, #1
 80053bc:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2239      	movs	r2, #57	; 0x39
 80053c2:	2102      	movs	r1, #2
 80053c4:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2270      	movs	r2, #112	; 0x70
 80053da:	4393      	bics	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	4393      	bics	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2239      	movs	r2, #57	; 0x39
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2238      	movs	r2, #56	; 0x38
 8005416:	2100      	movs	r1, #0
 8005418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b004      	add	sp, #16
 8005422:	bd80      	pop	{r7, pc}

08005424 <__libc_init_array>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	2600      	movs	r6, #0
 8005428:	4d0c      	ldr	r5, [pc, #48]	; (800545c <__libc_init_array+0x38>)
 800542a:	4c0d      	ldr	r4, [pc, #52]	; (8005460 <__libc_init_array+0x3c>)
 800542c:	1b64      	subs	r4, r4, r5
 800542e:	10a4      	asrs	r4, r4, #2
 8005430:	42a6      	cmp	r6, r4
 8005432:	d109      	bne.n	8005448 <__libc_init_array+0x24>
 8005434:	2600      	movs	r6, #0
 8005436:	f000 f821 	bl	800547c <_init>
 800543a:	4d0a      	ldr	r5, [pc, #40]	; (8005464 <__libc_init_array+0x40>)
 800543c:	4c0a      	ldr	r4, [pc, #40]	; (8005468 <__libc_init_array+0x44>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	42a6      	cmp	r6, r4
 8005444:	d105      	bne.n	8005452 <__libc_init_array+0x2e>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	00b3      	lsls	r3, r6, #2
 800544a:	58eb      	ldr	r3, [r5, r3]
 800544c:	4798      	blx	r3
 800544e:	3601      	adds	r6, #1
 8005450:	e7ee      	b.n	8005430 <__libc_init_array+0xc>
 8005452:	00b3      	lsls	r3, r6, #2
 8005454:	58eb      	ldr	r3, [r5, r3]
 8005456:	4798      	blx	r3
 8005458:	3601      	adds	r6, #1
 800545a:	e7f2      	b.n	8005442 <__libc_init_array+0x1e>
 800545c:	080055b8 	.word	0x080055b8
 8005460:	080055b8 	.word	0x080055b8
 8005464:	080055b8 	.word	0x080055b8
 8005468:	080055bc 	.word	0x080055bc

0800546c <memset>:
 800546c:	0003      	movs	r3, r0
 800546e:	1812      	adds	r2, r2, r0
 8005470:	4293      	cmp	r3, r2
 8005472:	d100      	bne.n	8005476 <memset+0xa>
 8005474:	4770      	bx	lr
 8005476:	7019      	strb	r1, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	e7f9      	b.n	8005470 <memset+0x4>

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
